
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Anyone-Can-Play-Guitar on Kevin Murphy</title>
   <link>https://kevinjmurphy.com/tags/anyone-can-play-guitar/</link>
   <description>Recent content in Anyone-Can-Play-Guitar on Kevin Murphy</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en</language>
   <copyright>Copyright &amp;copy; 2023 - Kevin Murphy</copyright>
   <lastBuildDate>Sat, 13 May 2023 07:20:24 -0400</lastBuildDate>
   
       <atom:link href="https://kevinjmurphy.com/tags/anyone-can-play-guitar/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>At RubyConf 2024</title>
       <link>https://kevinjmurphy.com/posts/at_rubyconf2024/</link>
       <pubDate>Tue, 12 Nov 2024 05:40:50 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/at_rubyconf2024/</guid>
       <description>&lt;h2 id=&#34;rubyconf-2024&#34;&gt;RubyConf 2024 &lt;a href=&#34;#rubyconf-2024&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m starting this post from Terminal B in Logan Airport (Boston). Waiting for myplane, I figured I might put together a post to document a quick and looseexploration of what I see while I&amp;rsquo;m in Chicago.&lt;/p&gt;&lt;h2 id=&#34;hotel&#34;&gt;Hotel &lt;a href=&#34;#hotel&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m staying at the conference hotel. I originally was going to stay elsewhere,but switched to the conference hotel for the convenience.&lt;/p&gt;&lt;h2 id=&#34;this-post-is-in-progress-and-will-update&#34;&gt;This Post Is In Progress And Will Update &lt;a href=&#34;#this-post-is-in-progress-and-will-update&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;</description>
     </item>
   
     <item>
       <title>Frequently Played Nov 2024</title>
       <link>https://kevinjmurphy.com/posts/frequently-played-2024-11/</link>
       <pubDate>Wed, 06 Nov 2024 20:00:50 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/frequently-played-2024-11/</guid>
       <description>&lt;h2 id=&#34;frequently-played&#34;&gt;Frequently Played &lt;a href=&#34;#frequently-played&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I tend to listen to the same songs or albums on repeat that are evocative of how I&amp;rsquo;m feeling or what&amp;rsquo;s going on with me. Here is what I&amp;rsquo;m currently listening to over, and over, and over, and over, again.&lt;/p&gt;&lt;h2 id=&#34;great-expectations&#34;&gt;Great Expectations &lt;a href=&#34;#great-expectations&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3xYVyi6n7cA?si=SqaG5k40RcbAwJ0U&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;I have to admit, I&amp;rsquo;ve never read the book.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://genius.com/The-gaslight-anthem-great-expectations-lyrics&#34;&gt;Full Lyrics&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;And I learned about the blues from this kitten that I knew&lt;br&gt;Her hair was raven and her heart was like a tomb&lt;br&gt;My heart is like a wound&lt;br&gt;And I saw taillights last night in a dream about my first wife&lt;br&gt;Everybody leaves and I&amp;rsquo;d expect as much from you&lt;br&gt;I saw taillights last night in a dream about my old life&lt;br&gt;Everybody leaves, Mary why, why wouldn&amp;rsquo;t you?&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;isnt-everyone&#34;&gt;Isn&amp;rsquo;t Everyone &lt;a href=&#34;#isnt-everyone&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6W2E6jNXzBE?si=6PwZFbUlHuurPmJE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Good luck out there everyone.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://genius.com/22998361&#34;&gt;Full Lyrics&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Nothing matters, we&amp;rsquo;re all to blame&lt;br&gt;We&amp;rsquo;ve all surrendered to those we serve&lt;br&gt;We get the world we all deserve&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Happy Halloween 2024</title>
       <link>https://kevinjmurphy.com/posts/happy-halloween-2024/</link>
       <pubDate>Thu, 31 Oct 2024 08:29:50 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/happy-halloween-2024/</guid>
       <description>&lt;h2 id=&#34;frequently-played&#34;&gt;Frequently Played &lt;a href=&#34;#frequently-played&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Maybe you&amp;rsquo;re wearing a witch hat today, like my daughter will be. Maybe you&amp;rsquo;d befine treating it like just another day, like I am. Either way, enjoy the day.&lt;/p&gt;&lt;h2 id=&#34;halloween&#34;&gt;Halloween &lt;a href=&#34;#halloween&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/si8Tpp5En-I?si=KlTvqU5y4Fi45EyJ&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://genius.com/The-gaslight-anthem-halloween-lyrics&#34;&gt;Full Lyrics&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;And who are you supposed to be?&lt;br&gt;You look like heaven tonight&lt;br&gt;Me, I&amp;rsquo;m a tomb, a corpse in a suit&lt;br&gt;Trying to look a little alive&lt;br&gt;Are you alright?&lt;br&gt;&amp;lsquo;Cause I worry sometimes&lt;br&gt;Are you dressed up to take my life?&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;a-night-with-the-jersey-devil&#34;&gt;A Night with the Jersey Devil &lt;a href=&#34;#a-night-with-the-jersey-devil&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/l6leNRGhOqA?si=4uTk7wjP7KUS7Srk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://genius.com/Bruce-springsteen-a-night-with-the-jersey-devil-lyrics&#34;&gt;Full Lyrics&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Set my flesh to burning, whilst I sleep&lt;br&gt;I burn, burn, burn, till my soul burn black&lt;br&gt;Black rains fall, I come back, I come back&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;monster-mash&#34;&gt;Monster Mash &lt;a href=&#34;#monster-mash&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2B-9GgbK9dk?si=pb3eyGYSQYHpIp5G&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Certainly not their strongest effort.&lt;/p&gt;&lt;p&gt;Coincidentally, the E Street Band starts the Canadian swing of their tour tonight. I&amp;rsquo;d definitely run away to Canada and catch a show if I could.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This is terrible!&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Two Drawer End Tables Construction</title>
       <link>https://kevinjmurphy.com/posts/two-drawer-end-tables/</link>
       <pubDate>Sun, 13 Oct 2024 11:40:50 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/two-drawer-end-tables/</guid>
       <description>&lt;h2 id=&#34;building-in-3d&#34;&gt;Building in 3D &lt;a href=&#34;#building-in-3d&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I make a lot of things. Most commonly code. I &lt;a href=&#34;https://kevinjmurphy.com/featured-writing/&#34;&gt;blog&lt;/a&gt; (maybe you&amp;rsquo;re aware, given you&amp;rsquo;re here). I build &lt;a href=&#34;https://kevinjmurphy.com/speaking/&#34;&gt;conference talks&lt;/a&gt;. Sometimes manifestos. Most of these live on the computer. Sometimes I need to step away and not look at a screen.&lt;/p&gt;&lt;p&gt;On occasion, I&amp;rsquo;ll build some piece of furniture we need in the house. Or some small accessory out of wood that I&amp;rsquo;ll use on my desk. This is one such time, and I decided to document it.&lt;/p&gt;&lt;p&gt;Similar to my recent posts on &lt;a href=&#34;https://kevinjmurphy.com/tags/music/&#34;&gt;music&lt;/a&gt; I&amp;rsquo;m listening to, this isn&amp;rsquo;t directly related to software development. If you want to bail because of that, no judgement.&lt;/p&gt;&lt;h2 id=&#34;the-problem&#34;&gt;The Problem &lt;a href=&#34;#the-problem&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There wasn&amp;rsquo;t really so much a problem. I recently built an &lt;a href=&#34;https://kevinjmurphy.com/posts/office-end-table-construction/&#34;&gt;end table&lt;/a&gt; for my office. I had extra drawer slides. I had some leftover wood. And I wanted to keep building. So I decided to build some similar tables. These would each have two drawers. That will give me more practice with drawers, given my past issues successfully making working drawers.&lt;/p&gt;&lt;h2 id=&#34;the-design&#34;&gt;The Design &lt;a href=&#34;#the-design&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This design borrows heavily from the other table. It&amp;rsquo;s meant to be cohesive. The dimensions are a bit different. These tables are smaller. And they won&amp;rsquo;t have a shelf on the bottom. Instead, there&amp;rsquo;s the second drawer.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/pair_tables/design.jpg&#34;    alt=&#34;End table design on paper&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;the-materials&#34;&gt;The Materials &lt;a href=&#34;#the-materials&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is all the same as the past build.&lt;/p&gt;&lt;p&gt;This requires 1&amp;quot;x6&amp;quot; and 2&amp;quot;x2&amp;quot; lumber. For the 1x6s, I&amp;rsquo;m using poplar. It&amp;rsquo;s (relatively) cheap and (I think) a step up from soft pine. Some people don&amp;rsquo;t like the look of poplar. I totally get that, but the majority of this will be painted anyway.&lt;/p&gt;&lt;p&gt;For the 2x2s, I&amp;rsquo;m not actually going to purchase 2x2s. Instead, I&amp;rsquo;ll grab the straightest 2x4 wall studs I can possibly find. I dig through the giant pallet of 2x4s at the big box store. It&amp;rsquo;s more economical for me to do that.&lt;/p&gt;&lt;p&gt;The drawer box will use 3/4&amp;quot; plywood for the sides and 1/4&amp;quot; plywood for the bottom.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m using pocket screws again. It&amp;rsquo;s quick. It&amp;rsquo;s effective. I don&amp;rsquo;t care if people think it&amp;rsquo;s beneath them. It&amp;rsquo;s a tool, and one that works well in this application.&lt;/p&gt;&lt;h2 id=&#34;construction&#34;&gt;Construction &lt;a href=&#34;#construction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This won&amp;rsquo;t go in-depth into the steps I took to build these. That&amp;rsquo;s for a few reasons. First, it&amp;rsquo;d be really repetitive. If you&amp;rsquo;re interested, check out the &lt;a href=&#34;https://kevinjmurphy.com/posts/office-end-table-construction/&#34;&gt;last build&lt;/a&gt;. The dimensions are different, but I followed the same steps. Also, I didn&amp;rsquo;t take in-progress pictures. I felt they&amp;rsquo;d be redundant, and I was focused on building.&lt;/p&gt;&lt;p&gt;One thing I did differently was when constructing the tabletops, I didn&amp;rsquo;t use pocket screws. I only used glue. This required more attention, and some additional clamping and helper wood, to try to keep everything level.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/pair_tables/glue_up.jpg&#34;    alt=&#34;A table top in clamps after being glued together&#34;&gt;&lt;/figure&gt;&lt;p&gt;It worked out mostly ok, I guess? I think the result ended up better with the pocket screws of the other table (in terms of things being aligned). However, this was a better use of materials (fewer screws), was closer to how I feel it &amp;ldquo;should&amp;rdquo; be built (whatever that means), and was a challenge I wanted to try. Overall, it worked out.&lt;/p&gt;&lt;h2 id=&#34;detail-change&#34;&gt;Detail Change &lt;a href=&#34;#detail-change&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One other thing I did was to be &lt;em&gt;extra fancy&lt;/em&gt; with the profile of the table. I got out my fearful friend the router and used a roman ogee bit to give the top some definition and flair. It&amp;rsquo;s&amp;hellip;fine?&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/pair_tables/roman_ogee.jpg&#34;    alt=&#34;The side profile of the top of the table, which has been cut with a router&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;deployment&#34;&gt;Deployment &lt;a href=&#34;#deployment&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These are currently in my enclosed porch, on the ends of some outdoor furniture we have.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/pair_tables/top_finished.jpg&#34;    alt=&#34;A completed table in my porch&#34;&gt;&lt;/figure&gt;&lt;p&gt;And because I&amp;rsquo;m sure you&amp;rsquo;re very concerned, yes the drawers open and close.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/pair_tables/drawer_open.jpg&#34;    alt=&#34;A completed table in my porch&#34;&gt;&lt;/figure&gt;&lt;p&gt;What would you use these tables for?&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>1,000 Miles</title>
       <link>https://kevinjmurphy.com/posts/1000_miles/</link>
       <pubDate>Tue, 08 Oct 2024 14:40:50 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/1000_miles/</guid>
       <description>&lt;h2 id=&#34;ebike-excitement&#34;&gt;eBike eXcitement &lt;a href=&#34;#ebike-excitement&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This evening, on the way home from gymnastics, with my daughter in the rear cargo seat, my eBike&amp;rsquo;s odometer ticked over 1,000 miles. I was riding at the time, so you&amp;rsquo;ll need to settle for the obligatory picture of it at 1,001 miles.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/1000_miles.jpg&#34;    alt=&#34;My bike&amp;#39;s odometer reading 1,001 miles&#34;&gt;&lt;/figure&gt;&lt;p&gt;And you&amp;rsquo;ll have to trust me that by getting to 1,001 I first rode 1,000 miles.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ve had the eBike for almost 14 months, and it&amp;rsquo;s been the primary way my daughter and I get around town. I ride her into school every day on the bike, no matter how cold it is. We ride to the playground. We go to the library. We ride in to drop her off at summer camp in the morning. Maybe we&amp;rsquo;ll go to get ice cream. We go to her activities. Stop to run an errand.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s nothing exciting - and that&amp;rsquo;s the point. It&amp;rsquo;s just our normal mode of transportation now.&lt;/p&gt;&lt;p&gt;I still have a car and use it. It averages 30.70 miles per gallon (I track it every time I fill it up with gas). That&amp;rsquo;s 32 gallons of gas I&amp;rsquo;ve saved and instead used my legs (with pedal assist powered by the solar panels on my roof). That&amp;rsquo;s not much, but it&amp;rsquo;s something. And that&amp;rsquo;s ok. I didn&amp;rsquo;t get it to save the world, but I hope it&amp;rsquo;s helping.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s &lt;em&gt;fun&lt;/em&gt;. It&amp;rsquo;s a good way to get around town. My daughter enjoys it. She yells, &amp;ldquo;bike lane!&amp;rdquo; when we come across one of the (far too few) bike lines in our area. She likes climbing in the back all by herself. Here&amp;rsquo;s to the next 1,000 miles with my daughter behind me.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Office End Table Construction</title>
       <link>https://kevinjmurphy.com/posts/office-end-table-construction/</link>
       <pubDate>Mon, 07 Oct 2024 14:40:50 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/office-end-table-construction/</guid>
       <description>&lt;h2 id=&#34;building-in-3d&#34;&gt;Building in 3D &lt;a href=&#34;#building-in-3d&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I make a lot of things. Most commonly code. I &lt;a href=&#34;https://kevinjmurphy.com/featured-writing/&#34;&gt;blog&lt;/a&gt; (maybe you&amp;rsquo;re aware, given you&amp;rsquo;re here). I build &lt;a href=&#34;https://kevinjmurphy.com/speaking/&#34;&gt;conference talks&lt;/a&gt;. Sometimes manifestos. Most of these live on the computer. Sometimes I need to step away and not look at a screen.&lt;/p&gt;&lt;p&gt;On occasion, I&amp;rsquo;ll build some piece of furniture we need in the house. Or some small accessory out of wood that I&amp;rsquo;ll use on my desk. This is one such time, and I decided to document it.&lt;/p&gt;&lt;p&gt;Similar to my recent posts on &lt;a href=&#34;https://kevinjmurphy.com/tags/music/&#34;&gt;music&lt;/a&gt; I&amp;rsquo;m listening to, this isn&amp;rsquo;t directly related to software development. If you want to bail because of that, no judgement.&lt;/p&gt;&lt;h2 id=&#34;the-problem&#34;&gt;The Problem &lt;a href=&#34;#the-problem&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In my office, I have a couch. Right now there&amp;rsquo;s a metal filing cabinet next to the couch that I&amp;rsquo;m using as an end table. It&amp;rsquo;s working fine, but I don&amp;rsquo;t even have much paperwork in it. I wanted something different. This DOES show up in my video background. I thought it&amp;rsquo;d be interesting to have something I&amp;rsquo;ve built in my background, even just for myself.&lt;/p&gt;&lt;p&gt;On the other side of the couch there&amp;rsquo;s a basket with a blanket that&amp;rsquo;s on the floor. I wanted to move that off the floor. And a drawer to store whatever I want not on the tabletop.&lt;/p&gt;&lt;h2 id=&#34;the-design&#34;&gt;The Design &lt;a href=&#34;#the-design&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The goal here is to be simple. I&amp;rsquo;m not going to win any design awards. But it will get done. And reasonably quickly. I do my designing on paper. I could probably be more efficient and build cut lists and stuff by learning some piece of software. But part of the point here is NOT using my computer. And now ironically I&amp;rsquo;m documenting this&amp;hellip;on my computer.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/design.jpg&#34;    alt=&#34;End table design on paper&#34;&gt;&lt;/figure&gt;&lt;p&gt;In a bold move, this will use four legs, two sides, a back, and a front. I&amp;rsquo;ve really revolutionized the world of table building here. For the drawer, I&amp;rsquo;m not going to have hardware to open it. Instead, I&amp;rsquo;m going to cut a hole out of the drawer face itself. I toyed with making a few holes on the side. After consulting with my design partner (my daughter), we decided to land on one in the middle.&lt;/p&gt;&lt;h2 id=&#34;the-materials&#34;&gt;The Materials &lt;a href=&#34;#the-materials&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This requires 1&amp;quot;x6&amp;quot; and 2&amp;quot;x2&amp;quot; lumber. For the 1x6s, I&amp;rsquo;m using poplar. It&amp;rsquo;s (relatively) cheap and (I think) a step up from soft pine. Some people don&amp;rsquo;t like the look of poplar. I totally get that, but the majority of this will be painted anyway.&lt;/p&gt;&lt;p&gt;For the 2x2s, I&amp;rsquo;m not actually going to purchase 2x2s. Instead, I&amp;rsquo;ll grab the straightest 2x4 wall studs I can possibly find. I dig through the giant pallet of 2x4s at the big box store. It&amp;rsquo;s more economical for me to do that.&lt;/p&gt;&lt;p&gt;The drawer box will use 3/4&amp;quot; plywood for the sides and 1/4&amp;quot; plywood for the bottom.&lt;/p&gt;&lt;p&gt;My main joinery method will be pocket screws. Pocket screws also get a bad reputation as not being &amp;ldquo;real&amp;rdquo; joinery. Yeah, gatekeeping doesn&amp;rsquo;t only exist in software development. However, I will be using it for the following reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;It&amp;rsquo;s quick.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;None of the joinery will be exposed.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;It&amp;rsquo;s quick.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;I have the materials on hand.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;It&amp;rsquo;s quick.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;I don&amp;rsquo;t care what you think about my joinery expertise.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;It&amp;rsquo;s quick.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;One downside here with pocket screws is with how many 2x2s I&amp;rsquo;m using. There isn&amp;rsquo;t a space for multiple screws per side. That&amp;rsquo;ll leave the 2x2s able to spin. That&amp;rsquo;s a trade-off I&amp;rsquo;m willing to make. Most of them will be up against other supports. And for the rest - I don&amp;rsquo;t care.&lt;/p&gt;&lt;h2 id=&#34;cutting-the-legs-and-supports&#34;&gt;Cutting the legs and supports &lt;a href=&#34;#cutting-the-legs-and-supports&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One reason I need to be quick is because of my constraints. I don&amp;rsquo;t have a deadline, but I want to make progress. My workshop is my driveway. I need to build outside. I need light to build. I work during the day. The time between work ending and the rest of my evening home life starting leaves me with about an hour after work each day.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/workshop.jpg&#34;    alt=&#34;My workshop, which is my driveway&#34;&gt;&lt;/figure&gt;&lt;p&gt;I purchase 2x4s, but I need 2x2s. And I don&amp;rsquo;t want the rounded edges of a 2x4. I start by ripping the side of one of the 2x4s the full length of the stud. That gives me a clean, straight edge.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/cut_2x4.jpg&#34;    alt=&#34;Ripping 2x4 on the table saw&#34;&gt;&lt;/figure&gt;&lt;p&gt;Then I set my rip fence based on the thickness of the 2x4 and make another rip cut the length of the board. That gives me one 2x2. Doing that again, making sure to cut off the rounded edge, gives me my other. I repeat that for each of the 2x4s.&lt;/p&gt;&lt;p&gt;I then use my miter saw to cut the 2x2s to their height for the table legs. You know they&amp;rsquo;re legs because I&amp;rsquo;ve labeled them accordingly.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/legs_labeled.jpg&#34;    alt=&#34;4 table legs each with one letter &amp;#39;LEGS&amp;#39; on the top&#34;&gt;&lt;/figure&gt;&lt;p&gt;I cut down the front, back, and side support 2x2s the same way.&lt;/p&gt;&lt;h2 id=&#34;cutting-the-top-sides-and-drawer-face&#34;&gt;Cutting the top, sides, and drawer face &lt;a href=&#34;#cutting-the-top-sides-and-drawer-face&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The poplar 1x6 boards need to get cut to length and I also use the miter saw to do that. To make repeatable cuts, I add an extension fence to my small miter saw. That is a fancy way of saying I screwed a board to the miter saw. And then clamp another piece of wood the distance I want to cut.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/miter_saw_fence.jpg&#34;    alt=&#34;Miter saw with extension fence&#34;&gt;&lt;/figure&gt;&lt;p&gt;Even though I have plans with dimensions, it&amp;rsquo;s not as important that I meet those exact dimensions. What is more important is that everything relatively is the same size. So, if something is supposed to be 17&amp;quot;, it&amp;rsquo;s not as problematic if it&amp;rsquo;s actually 16+7/8&amp;quot;. As long as every other piece that&amp;rsquo;s supposed to be 17&amp;quot; is the same actual size, we&amp;rsquo;re good.&lt;/p&gt;&lt;p&gt;The fence helps ensure that each of my pieces of that dimension are the same size, even if it&amp;rsquo;s a little off.&lt;/p&gt;&lt;p&gt;Unfortunately with the 1x6 and the fence, my miter saw blade isn&amp;rsquo;t big enough to cut the entire 1x6. So I need to cut (roughly) half of it, flip it over, then cut the rest. Without the fence, I could get the entire 1x6 cut on the miter saw. But, that&amp;rsquo;s the cost I paid for repeatability.&lt;/p&gt;&lt;h2 id=&#34;sanding-part-1&#34;&gt;Sanding, Part 1 &lt;a href=&#34;#sanding-part-1&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There&amp;rsquo;s always a lot of sanding with projects. I start preemptively sanding everything. That&amp;rsquo;ll make it easier to ensure I get everything sanded at least a little. Once it&amp;rsquo;s put together, it may be hard to reach a corner or some other bit. By doing it now, I&amp;rsquo;m getting a start on a smooth surface everywhere.&lt;/p&gt;&lt;p&gt;I use my workmate to lock in the 2x2&amp;quot; pieces. That way they don&amp;rsquo;t move around as much when sanding, given they&amp;rsquo;re pretty slender.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/sanding_2x2.jpg&#34;    alt=&#34;Sanding a 2x2&#34;&gt;&lt;/figure&gt;&lt;p&gt;After that, I have all my pieces cut and sanded.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/all_pieces_cut.jpg&#34;    alt=&#34;All the individual pieces that need to be combined&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;side-construction&#34;&gt;Side Construction &lt;a href=&#34;#side-construction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now I can finally start putting anything together. I start with the sides. I drill pocket holes in the side supports and line one up against the legs. I use my speed square to give some sense of roughly installing it square. Then pocket screws go in the pocket holes, connecting the side support to the leg.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/line_up_side_pieces.jpg&#34;    alt=&#34;Aligning the side support to the legs&#34;&gt;&lt;/figure&gt;&lt;p&gt;The sides next have a piece of poplar that will cover the drawer. I attach that to the legs with pocket screws as well. I prop up a piece of poplar below it, because it is half the thickness as the 2x2 side support. Then I add another 2x2 below it. This is kind of acting as trim, or a decorative piece. It doesn&amp;rsquo;t add too much structure. But I like the symmetry.&lt;/p&gt;&lt;p&gt;The 2x2 at the bottom is helpful for giving some structure towards the bottom. It&amp;rsquo;s also for supporting the shelf that&amp;rsquo;ll sit on top of it.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/side_constructed.jpg&#34;    alt=&#34;A completed side assembly&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;back-construction&#34;&gt;Back Construction &lt;a href=&#34;#back-construction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The back mirrors the look of either side, with a 2x2, 1x6, 2x2, and bottom 2x2. I hold the sides up with clamps while attaching the back rails to each side assembly.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/attach_back.jpg&#34;    alt=&#34;Attaching the two sides together&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;front-construction&#34;&gt;Front Construction &lt;a href=&#34;#front-construction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The front has the 2x2s of the side and back. However, there is no 1x6 here. The drawer face will take that space eventually.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/front_construction.png&#34;    alt=&#34;Attaching 2x2s to the front&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;table-top&#34;&gt;Table Top &lt;a href=&#34;#table-top&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The top of the table is going to be 4 1x6 boards joined together. I first inspect the boards to see which side I want to be on the top. I don&amp;rsquo;t attempt to do any grain matching or anything.  That wouldn&amp;rsquo;t have worked out well anyway and also, this is getting painted.&lt;/p&gt;&lt;p&gt;Once I have that figured out, I flip all the boards over and start marking up the bottom side. That gives me reference points across the boards. Where lines match between boards tells me I&amp;rsquo;m gluing them together at the right position.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/line_up_top.jpg&#34;    alt=&#34;Marking the underside of the table top for alignment&#34;&gt;&lt;/figure&gt;&lt;p&gt;I could only glue the boards, but I also attach them with pocket screws. I could have chosen one or the other, but I chose both. This gives me a chance to document how to make the pocket holes. There&amp;rsquo;s a special jig that attaches to the end of the board. And then I have a drill bit with a collar on it so it stops at a particular depth. I use that to drill into the jig, which leaves the angled holes on the face of the board.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/pocket_hole_jig.jpg&#34;    alt=&#34;Pocket hole jig&#34;&gt;&lt;/figure&gt;&lt;p&gt;I use special pocket screws, inserted into the pocket hole, to attach the board to the other board.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/pocket_hole_screw.jpg&#34;    alt=&#34;Attaching pocket screw&#34;&gt;&lt;/figure&gt;&lt;p&gt;In the case of this table top, I first apply glue before screwing the boards together. I use my two pipe clamps to keep pressure on everything. And use a spare 2x2 on the top to try to keep the top surface flat and level. I don&amp;rsquo;t have a planer. Any adjustments I make here for boards being higher or lower than the board next to them will require sanding.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/top_glued_screwed.jpg&#34;    alt=&#34;Clamping the glued and screwed table top&#34;&gt;&lt;/figure&gt;&lt;p&gt;Speaking of sanding, I sand down the top to get the excess glue that squeezed out and try to get a flat surface.&lt;/p&gt;&lt;p&gt;I left the top in the clamps for a day. Given the screws, it&amp;rsquo;s much longer than necessary, but I had other things to do anyway, like work.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/top_sanding.jpg&#34;    alt=&#34;Sanding the table top&#34;&gt;&lt;/figure&gt;&lt;p&gt;While I was already sanding, I sanded everything once again.&lt;/p&gt;&lt;h2 id=&#34;bottom-shelf&#34;&gt;Bottom Shelf &lt;a href=&#34;#bottom-shelf&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I still have the bottom shelf to deal with. This was constructed the same way as the table top. However, I need to cut it down to match the dimensions of the table. I could measure, but again, the actual measurement isn&amp;rsquo;t what matters. It&amp;rsquo;s how it matches relative to the other items. So, I take the table, place it on my table saw, set one end of the table against the blade, and push the fence against the other end. That gives me the exact width of the table.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/shelf_dimension.jpg&#34;    alt=&#34;Measuring the table dimensions by laying it on top of the table saw&#34;&gt;&lt;/figure&gt;&lt;p&gt;I use that to cut down the shelf to that same width. I repeat the process to get the depth.&lt;/p&gt;&lt;p&gt;The shelf needs to fit inside the table legs, so I need to cut out the corners. To get these measurements, I place the shelf on the top of the table and draw lines where the legs meet the shelf.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/shelf_cutout.jpg&#34;    alt=&#34;Lining up the table legs with the bottom shelf to know where to cut&#34;&gt;&lt;/figure&gt;&lt;p&gt;I then extend the lines to the top and join them together with my pencil. That gives me the rectangles I need to remove from the corners.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/shelf_cutout_extension.jpg&#34;    alt=&#34;Extending the lines on the side to draw a rectangle to cut&#34;&gt;&lt;/figure&gt;&lt;p&gt;I use a jigsaw to cut out these ends. Using the straight blade will give me a precise end. If I used the table saw, then the circular blade would need to cut through too much material on one side to get to the appropriate length. Plus, it would be tough to manage.&lt;/p&gt;&lt;p&gt;Sometimes, you do need to use the right tool for the job.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/jigsaw.jpg&#34;    alt=&#34;Jigsaw on top of the shelf, ready to cut&#34;&gt;&lt;/figure&gt;&lt;p&gt;With that, I can fit the shelf in the table. As you can see, I initially cut too little and the shelf wouldn&amp;rsquo;t fit. That is on purpose. It&amp;rsquo;s a lot easier to remove more wood than it is to add it back. I continue shaving more off until it fits snugly.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/shelf_fit.jpg&#34;    alt=&#34;The shelf does not yet fit inside the table legs&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;drawer-box&#34;&gt;Drawer Box &lt;a href=&#34;#drawer-box&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Drawers have been difficult for me to get right. Every piece I build that has drawers has some problem with the drawer. They&amp;rsquo;re not quite square and they catch at some point. I measure wrong and they end up too short, so I need to shim out the drawer slides. Whatever the problem is, the commonality is that me and drawers don&amp;rsquo;t get along. As much as I like things having drawers. So, here I go - building another drawer.&lt;/p&gt;&lt;p&gt;I start by getting my 3/4&amp;quot; plywood and cutting it to the height of my drawer - 5&amp;quot;. It&amp;rsquo;s a bit tall, but I figure if it ends up being too tall I can cut it down. I rip the plywood to that height on the table saw.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/drawer_box_height.jpg&#34;    alt=&#34;Ripping plywood to the height of the drawer&#34;&gt;&lt;/figure&gt;&lt;p&gt;Then it&amp;rsquo;s back to the miter saw with my extension fence to cut the two sides of the drawer. My fence is from an extra french cleat I have. That lets me use the angled cut on the top to lay my tape measure across so I can still see it while setting the stop block. That wasn&amp;rsquo;t intentional, but was a nice surprise that I totally meant to do in retrospect (I didn&amp;rsquo;t).&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/miter_saw_fence_tape.jpg&#34;    alt=&#34;Miter saw extension fence with tape measure&#34;&gt;&lt;/figure&gt;&lt;p&gt;The width of the box is what I&amp;rsquo;m most concerned with. I&amp;rsquo;m going to use pocket screws to connect the drawer box. The two sides will run the full depth, and the front and back will be inside of them. The two drawer slides + the thickness of two pieces of plywood + the front/back piece I&amp;rsquo;m cutting == the space inside the table.&lt;/p&gt;&lt;p&gt;I grab the slides and pieces of plywood to measure how thick that all is. Then I subtract that from the space inside the table, and that is the distance I cut my front and back to. I again intentionally cut everything a little long. I try to shove it in the table, and then cut a little more until it is a comfortable fit.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/drawer_width_consideration.jpg&#34;    alt=&#34;Measuring the thickness of the plywood and drawer slides&#34;&gt;&lt;/figure&gt;&lt;p&gt;Then I need to put the box together. I clamp one side to the edge of my table saw fence as a straight edge that&amp;rsquo;s not going to move. And use my square to line things up as close to 90* as I can.&lt;/p&gt;&lt;p&gt;I do that for the front and back, on both sides. With that, I&amp;rsquo;m left with a box.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/drawer_box_construction.jpg&#34;    alt=&#34;Clamping drawer sides to the table saw to attach together&#34;&gt;&lt;/figure&gt;&lt;p&gt;My box probably needs a bottom though to actually STORE stuff in. I&amp;rsquo;m going to use 1/4&amp;quot; plywood for that. And I need the exact dimensions of my box. So, what am I going to do? Yup. I put the box up on the table saw. I line up the blade against the box, push my fence out to that distance, and I know the exact size of that dimension.&lt;/p&gt;&lt;p&gt;I could have been fancier and cut dados (1/4&amp;quot; grooves) on the inside of all the pieces of the box. With that, the 1/4&amp;quot; panel could float freely in there. I do not do that. Instead, I&amp;rsquo;m just nailing it in there. Which means I get to use my brad nailer.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/brad_nailer.jpg&#34;    alt=&#34;Brad nailer on top of the drawer&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;drawer-install&#34;&gt;Drawer Install &lt;a href=&#34;#drawer-install&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The next step is to install the drawer slides on the table carcass. I flip the table on its side. I take a piece of the poplar that&amp;rsquo;s the same thickness as the poplar that&amp;rsquo;ll be my drawer face. And I make sure the drawer slides are inset that far in. Now the drawer will line up with the outside of the table when the drawer face is on it. I try to make sure it is straight&amp;hellip;and screw the slide in. Then I do the same thing on the other side.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/drawer_slide_install.jpg&#34;    alt=&#34;Aligning the drawer slide inside the table&#34;&gt;&lt;/figure&gt;&lt;p&gt;Now it&amp;rsquo;s the moment of truth - attaching the drawer box to the slides. I use a piece of 1/4&amp;quot; plywood as a spacer against the bottom brace I have. Then the drawer won&amp;rsquo;t rub against the support every time you open and close it.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/quarter_inch_clearance.jpg&#34;    alt=&#34;A plywood panel resting on top of a 2x2 support&#34;&gt;&lt;/figure&gt;&lt;p&gt;The drawer box rests on top of that. I pull out the drawer slides and screw them in. I pull the inside of the slides out and screw in the end pieces. No pictures of that. I need all my hands to do that.&lt;/p&gt;&lt;p&gt;Then I pop the slides back in and&amp;hellip;hold my breath.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/drawer_installed.jpg&#34;    alt=&#34;Drawer box installed in the table&#34;&gt;&lt;/figure&gt;&lt;p&gt;It&amp;rsquo;s alright. I think it&amp;rsquo;s annoyingly one of the better drawers I&amp;rsquo;ve made. It sticks a little on the left side (of that picture) about halfway in.&lt;/p&gt;&lt;h2 id=&#34;drawer-face&#34;&gt;Drawer Face &lt;a href=&#34;#drawer-face&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now, I need to work on the drawer face. That&amp;rsquo;s going to be a piece of poplar, like is used for the sides of the table. And that&amp;rsquo;s already been cut - but cut to EXACTLY fit in that slot. You don&amp;rsquo;t want it to be exact. Then it&amp;rsquo;ll rub against everything. So, very carefully, I trim not even a saw blade from the length and width.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m not going to attach any knobs or hardware to this. To pull it out, I&amp;rsquo;m going to cut out some of the drawer face as a pull. So, I get drawing on what&amp;rsquo;ll be the back of the drawer face.&lt;/p&gt;&lt;p&gt;There&amp;rsquo;s going to be an angle. It&amp;rsquo;s not going to be square. But I can use my speed square to get that done still. I line it against the edge of the board, and use the markings to set my angle. I want a 30* angle. But from the direction the speed square is in the following picture, I&amp;rsquo;m really subtracting that from 45* . So I line the edge of my board with the 15* marker.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/handle_angle.jpg&#34;    alt=&#34;A speed square tilted to measure an angled cut&#34;&gt;&lt;/figure&gt;&lt;p&gt;I use my jigsaw to cut that out. And after finishing that, it&amp;rsquo;s time to use what I think is the scariest tool - the router.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/router.jpg&#34;    alt=&#34;A router&#34;&gt;&lt;/figure&gt;&lt;p&gt;A spinning blade that chews up wood, needs to go in the right direction, and can generally ruin your day right at the end. I want to use this because I don&amp;rsquo;t want sharp edges that I&amp;rsquo;m reaching my hand into to open the drawer. So I&amp;rsquo;m going to use the router to round over the edges of the &amp;ldquo;pull&amp;rdquo;.&lt;/p&gt;&lt;p&gt;And my fear is justified - I set the depth a bit too far on the backside, so it cut into the face a bit. But, that&amp;rsquo;s why you do it on the back first. I raise the blade a little and do the same on the other side.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/handle_router_roundover.jpg&#34;    alt=&#34;The drawer face handle is cut too deep by the router&#34;&gt;&lt;/figure&gt;&lt;p&gt;I sand that all down next. No picture. It&amp;rsquo;s sanding. You get it.&lt;/p&gt;&lt;p&gt;After that I need to get my drawer box back out. Because with that chunk taken out of the drawer face, I need to cut out a matching, but bigger, chunk of the drawer. Otherwise, you&amp;rsquo;ll just run into the wall of the drawer with your hand and not actually be able to grab anything to open it.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/need_trim_drawer_box.jpg&#34;    alt=&#34;Drawer face against drawer box shows we need to cut the drawer box to be able to open the drawer&#34;&gt;&lt;/figure&gt;&lt;p&gt;I cut that out on the jigsaw as well and end up with something like this.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/drawer_box_cut.jpg&#34;    alt=&#34;Cutting out the front of the drawer box to leave space for the handle&#34;&gt;&lt;/figure&gt;&lt;p&gt;I sanded the edges of that down. It&amp;rsquo;s not pretty, but it doesn&amp;rsquo;t really matter. What it does mean is that I won&amp;rsquo;t edge band the inside of the plywood that&amp;rsquo;s facing up. That&amp;rsquo;s a nice touch that just looks a little better, rather than seeing the plys of the plywood, but&amp;hellip;it&amp;rsquo;ll be fine.&lt;/p&gt;&lt;p&gt;Now I need to attach the drawer face to the drawer. I&amp;rsquo;m going to screw from the inside of the drawer into the drawer face. This way the screws are on the inside of the drawer and not seen. I want the drawer face to have space around all the edges so it doesn&amp;rsquo;t rub against the table. And ideally have it be centered. I use a deck of cards for that. I shove cards around all the edges, and make sure it&amp;rsquo;s the same number of cards for the top/bottom, and the same for each side.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/playing_card_offset.jpg&#34;    alt=&#34;Playing cards inserted between the drawer face and the table for spacing&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;table-top-install&#34;&gt;Table Top Install &lt;a href=&#34;#table-top-install&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I have these figure 8 desktop connectors. It allows for some wood movement, but also just&amp;hellip;gives you a way to connect them. I need to bury them inside the supports so everything is flush. So I grab a forstner bit in my drill and drill out a hole for them.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/figure_8_install.jpg&#34;    alt=&#34;A drill making holes for the figure 8 desktop connector&#34;&gt;&lt;/figure&gt;&lt;p&gt;I screw them in so they&amp;rsquo;re ready for the top to go on them. I want a consistent &amp;ldquo;reveal&amp;rdquo; (distance from the edge of the table top to the body of the table) so I measure that across all dimensions. Then I realize it&amp;rsquo;s going to be a lot easier to screw everything in if I flip it over, so I do it again, and then screw the top in.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/top_install.jpg&#34;    alt=&#34;The underside of the table top now attached to the table&#34;&gt;&lt;/figure&gt;&lt;p&gt;With that, we&amp;rsquo;re done building. Of course, I&amp;rsquo;m still not done. But, we&amp;rsquo;ve done the fun part.&lt;/p&gt;&lt;h2 id=&#34;paint-and-finish&#34;&gt;Paint and Finish &lt;a href=&#34;#paint-and-finish&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I hate painting. It&amp;rsquo;s detail work I don&amp;rsquo;t have the patience for and I&amp;rsquo;m also just not good at it. I apply two coats of white paint and primer to all surfaces and one more coat of paint just on the top. My design consultant (my daughter) is not pleased with this color  choice. She wants to go with &amp;ldquo;rainbow&amp;rdquo;. But, we have a gallon of spare white paint and have zero &amp;ldquo;rainbow&amp;rdquo; paint hanging around. So, white it is.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/painting.jpg&#34;    alt=&#34;A coat of paint on the table&#34;&gt;&lt;/figure&gt;&lt;p&gt;I use polycrilic to finish the drawer face and the drawer itself. I also apply that to the table top after the paint is dry for more protection.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/drawer_box_poly.jpg&#34;    alt=&#34;A coat of polycrilic on the drawer&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;deployment&#34;&gt;Deployment &lt;a href=&#34;#deployment&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There&amp;rsquo;s only one thing that&amp;rsquo;s left to do - place it in my office.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/end_table/complete.jpg&#34;    alt=&#34;The completed table next to a couch with headphones and a speaker on top of it&#34;&gt;&lt;/figure&gt;&lt;p&gt;It&amp;rsquo;s not perfect, and neither am I. If we&amp;rsquo;re on a video call in the near future and the table catches your eye, now you know where it came from. In extreme detail. Just in case you&amp;rsquo;ve ever wanted to know all the steps I&amp;rsquo;ve taken to build something.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Frequently Played Oct 2024</title>
       <link>https://kevinjmurphy.com/posts/frequently-played-2024-10/</link>
       <pubDate>Sun, 06 Oct 2024 18:40:50 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/frequently-played-2024-10/</guid>
       <description>&lt;h2 id=&#34;frequently-played&#34;&gt;Frequently Played &lt;a href=&#34;#frequently-played&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I tend to listen to the same songs or albums on repeat that are evocative of how I&amp;rsquo;m feeling or what&amp;rsquo;s going on with me. Here is what I&amp;rsquo;m currently listening to over, and over, and over, and over, again.&lt;/p&gt;&lt;h2 id=&#34;21-days&#34;&gt;21 Days &lt;a href=&#34;#21-days&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pbqSaTagCqA?si=06m2BFoUx7n03uZv&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;In my experience, it takes more than 21 days.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://genius.com/Brian-fallon-21-days-lyrics&#34;&gt;Full Lyrics&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I miss you most&lt;br&gt;In the morning&lt;br&gt;We used to talk&lt;br&gt;Over coffee&lt;br&gt;But now&lt;br&gt;I&amp;rsquo;m gonna have to find&lt;br&gt;Another friend&lt;br&gt;When it&amp;rsquo;s over&lt;br&gt;We do the leaving&lt;br&gt;We do the crying&lt;br&gt;We do the healing&lt;br&gt;And they say&lt;br&gt;21 days till I don&amp;rsquo;t miss you&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;the-perfect-drug&#34;&gt;The Perfect Drug &lt;a href=&#34;#the-perfect-drug&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/dn3j6-yQKWQ?si=sofKbf7to0005dn9&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Another entry that&amp;rsquo;s Brian Fallon and NIN. I guess that&amp;rsquo;s just where I&amp;rsquo;m at these days.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://genius.com/Nine-inch-nails-the-perfect-drug-lyrics&#34;&gt;Full Lyrics&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I got my heart, but my heart&amp;rsquo;s no good&lt;br&gt;And you&amp;rsquo;re the only one that&amp;rsquo;s understood&lt;br&gt;&amp;hellip;&lt;br&gt;Without you&lt;br&gt;Without you everything falls apart&lt;br&gt;Without you&lt;br&gt;It&amp;rsquo;s not as much fun to pick up the pieces&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>RSpec Stubs The Object In Memory</title>
       <link>https://kevinjmurphy.com/posts/rspec-stubs-object-in-memory/</link>
       <pubDate>Fri, 13 Sep 2024 15:00:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rspec-stubs-object-in-memory/</guid>
       <description>&lt;h2 id=&#34;publish-or-perish&#34;&gt;Publish or Perish &lt;a href=&#34;#publish-or-perish&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;ve been sitting on a handful of blog posts that are ready to publish, but we haven&amp;rsquo;t released yet. This is a fictional story that in no way mirrors reality of any particular writer. Certainly not the author writing this post now. In a spirit of inspiration, we decide to write a small class to publish all these posts that exist in our system.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DraftPost&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;publish_all&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draft&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rather than actually publish them, we&amp;rsquo;ve successfully procrastinated. We have a &lt;em&gt;way&lt;/em&gt; to publish them, eventually. While we&amp;rsquo;re busy not actually publishing them, let&amp;rsquo;s test this method works.&lt;/p&gt;&lt;h2 id=&#34;prolonged-publication-procrastination&#34;&gt;Prolonged Publication Procrastination &lt;a href=&#34;#prolonged-publication-procrastination&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We want to verify that we send the &lt;code&gt;publish&lt;/code&gt; message to each of these posts. We don&amp;rsquo;t actually want to execute the &lt;code&gt;publish&lt;/code&gt; method. Perhaps that integrates with a third-party API. We don&amp;rsquo;t want to manage &lt;a href=&#34;https://kevinjmurphy.com/posts/testing-dependencies/&#34;&gt;testing that interaction&lt;/a&gt; here.&lt;/p&gt;&lt;p&gt;Instead, we&amp;rsquo;ll stub out the response using &lt;a href=&#34;https://rspec.info/features/3-12/rspec-mocks/&#34;&gt;RSpec mocks&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;With that goal, we write our test.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;publishes all draft posts&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  draft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;draft&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  allow(draft)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;DraftPost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish_all&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(draft)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_received(&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This test &lt;em&gt;fails&lt;/em&gt;. We put a breakpoint in our test. We confirm that a post with the same database ID as &lt;code&gt;draft&lt;/code&gt; &lt;strong&gt;does&lt;/strong&gt; get the &lt;code&gt;publish&lt;/code&gt; method called on it.&lt;/p&gt;&lt;p&gt;Even though these objects pass the equality check, the issue is that they are &lt;em&gt;not&lt;/em&gt; the same object in memory. Compare the &lt;code&gt;object_id&lt;/code&gt; of the &lt;code&gt;draft&lt;/code&gt; object to the object pulled out of the database. They&amp;rsquo;re different. The post published in &lt;code&gt;DraftPost.publish_all&lt;/code&gt; does not have the stub applied to it.&lt;/p&gt;&lt;p&gt;The stub operates on that &lt;code&gt;draft&lt;/code&gt; object in memory, and only that object. Even though the other object is equal to the &lt;code&gt;draft&lt;/code&gt; object, it is not the &lt;em&gt;same&lt;/em&gt; as the &lt;code&gt;draft&lt;/code&gt; object. Because of that, our assertion does not pass.&lt;/p&gt;&lt;h2 id=&#34;any-instance-of&#34;&gt;Any Instance Of &lt;a href=&#34;#any-instance-of&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At this point, we may try to instead test what&amp;rsquo;s returned from &lt;code&gt;publish_all&lt;/code&gt; while still not having the &lt;code&gt;publish&lt;/code&gt; method called on the posts.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;publishes all draft posts&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  draft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;draft&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  allow_any_instance_of(&lt;span style=&#34;color:#66d9ef&#34;&gt;Post&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;and_return(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;called publish&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(&lt;span style=&#34;color:#66d9ef&#34;&gt;DraftPost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish_all)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;called publish&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our test now passes. However, we have some drawbacks. First off, &lt;a href=&#34;https://rspec.info/features/3-12/rspec-mocks/working-with-legacy-code/any-instance/&#34;&gt;RSpec itself&lt;/a&gt; considers using &lt;code&gt;allow_any_instance_of&lt;/code&gt; to be suspect.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This feature is sometimes useful when working with legacy code, though in general we discourage its use for a number of reasons&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now, this doesn&amp;rsquo;t mean it&amp;rsquo;s &lt;em&gt;wrong&lt;/em&gt;. But, I&amp;rsquo;d argue to only use it after carefully considering other options.&lt;/p&gt;&lt;p&gt;The other thing we changed here is our testing philosophy. Now we&amp;rsquo;re testing what&amp;rsquo;s returned by the method, rather than what the method does. And we did this by stubbing out what any Post should return when we call the &lt;code&gt;publish&lt;/code&gt; method on it.&lt;/p&gt;&lt;p&gt;That again may be fine, but it may not test that we publish all the draft posts, which is our goal. Instead, it confirms what the &lt;code&gt;publish_all&lt;/code&gt; method returns.&lt;/p&gt;&lt;p&gt;This may be hyperbolic, but if we changed the implementation to look like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DraftPost&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;publish_all&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;called publish&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our test that asserts this method is calling &lt;code&gt;publish&lt;/code&gt; still passes, but we&amp;rsquo;re definitely not publishing any posts.&lt;/p&gt;&lt;h2 id=&#34;change-the-implementation&#34;&gt;Change the Implementation &lt;a href=&#34;#change-the-implementation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s change &lt;code&gt;publish_all&lt;/code&gt; so we pass all the posts to publish into it.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DraftPost&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;publish_all&lt;/span&gt;(posts)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    posts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can use the RSpec mock as we want.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;publishes all draft posts&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  draft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;draft&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  allow(draft)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;DraftPost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish_all(&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;draft&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(draft)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_received(&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This test passes, and as a bonus, we don&amp;rsquo;t need to access the database in our test anymore. What a speed improvement!&lt;/p&gt;&lt;p&gt;Once again, this choice comes with some careful consideration. First off, modifying the implementation to satisfy the way we want to test it may be undesirable. I do want to point out that I don&amp;rsquo;t think this is true generally. I do believe in using your tests as your first consumer of your code. If something is tough to test, it may be hard to use or confusing to understand. There&amp;rsquo;s value in receiving that signal and deciding to change the code&amp;rsquo;s design or structure in that case.&lt;/p&gt;&lt;p&gt;Stepping back here, passing in the posts makes the name of this class pretty meaningless. This should only work on draft posts. However, we can pass any kind of post (really, anything that responds to &lt;code&gt;publish&lt;/code&gt;) and this will still work.&lt;/p&gt;&lt;p&gt;Maybe we want something that&amp;rsquo;ll generically publish any kind of post. If so, we probably shouldn&amp;rsquo;t have that inside a &lt;code&gt;DraftPost&lt;/code&gt; class. If this should only operate on draft posts, then this may not be the choice we want to make.&lt;/p&gt;&lt;p&gt;Passing in the posts allows our stub to work. Passing in the posts may allow us to achieve some purity of using dependency injection. Passing in the posts may make this method less usable. Enough to the point where perhaps it shouldn&amp;rsquo;t exist at all.&lt;/p&gt;&lt;h2 id=&#34;stub-the-db-interaction&#34;&gt;Stub the DB Interaction &lt;a href=&#34;#stub-the-db-interaction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We still want to use the mock. We don&amp;rsquo;t want to use RSpec features that the core team themselves recommend against. We don&amp;rsquo;t want to change the implementation. It turns out we like the benefit of not needing to access the database. We can achieve all those goals by &lt;em&gt;also&lt;/em&gt; stubbing out the database call.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;publishes all draft posts&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; draft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;draft&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; allow(&lt;span style=&#34;color:#66d9ef&#34;&gt;Post&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:draft&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;and_return(&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;draft&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; allow(draft)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DraftPost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish_all&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; expect(draft)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_received(&lt;span style=&#34;color:#e6db74&#34;&gt;:publish&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;finally-publishing-the-post&#34;&gt;Finally Publishing The Post &lt;a href=&#34;#finally-publishing-the-post&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We confirm that we send the right message (&lt;code&gt;publish&lt;/code&gt;) without invoking its implementation. We do give up some confidence in that we don&amp;rsquo;t know for sure that &lt;code&gt;Post.draft&lt;/code&gt; works how we expect. We can regain that confidence by having other tests specific for that method.&lt;/p&gt;&lt;p&gt;One could argue this gives us more flexibility. If the implementation of &lt;code&gt;Post.draft&lt;/code&gt; changes, this test will continue to work. It can get posts from a database or third-party API. Our method doesn&amp;rsquo;t care.&lt;/p&gt;&lt;p&gt;On the flip side, one could also argue that this test is tying us to a particular implementation. If &lt;code&gt;DraftPost.publish_all&lt;/code&gt; changed to instead use &lt;code&gt;Post.where(draft: true)&lt;/code&gt;, then this test will no longer work. Even though using the scope or using where will retrieve the same records from the database.&lt;/p&gt;&lt;p&gt;Unfortunately, there is no &lt;em&gt;right&lt;/em&gt; answer. We must consider the trade-offs we&amp;rsquo;re willing to make to achieve our goal. What ✨magic✨ you&amp;rsquo;re interested in maintaining is up to you.&lt;/p&gt;&lt;p&gt;Keep in mind that RSpec mocks only work on that particular object in memory. If the implementation pulls the same record fresh out of the database, the mock will not apply. When using RSpec mocks in your tests, objects in memory may be farther than they appear.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Frequently Played Sept 2024</title>
       <link>https://kevinjmurphy.com/posts/frequently-played-2024-09/</link>
       <pubDate>Tue, 10 Sep 2024 17:40:50 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/frequently-played-2024-09/</guid>
       <description>&lt;h2 id=&#34;frequently-played&#34;&gt;Frequently Played &lt;a href=&#34;#frequently-played&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I tend to listen to the same songs or albums on repeat that are evocative of how I&amp;rsquo;m feeling or what&amp;rsquo;s going on with me. Here is what I&amp;rsquo;m currently listening to over, and over, and over, and over, again.&lt;/p&gt;&lt;h2 id=&#34;the-blues-mary&#34;&gt;The Blues, Mary &lt;a href=&#34;#the-blues-mary&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/d5hJV3dM5OA?si=ZVDhPccPCyvMoFxf&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Brian Fallon may be best known as the lead singer of The Gaslight Anthem. I appreciate his solo work during their hiatus too. I think future entries of this series will feature a lot of Brian&amp;rsquo;s output.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://genius.com/Brian-fallon-the-blues-mary-lyrics&#34;&gt;Full Lyrics&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I learned how to cry&lt;br&gt;In them lonesome September nights&lt;br&gt;I learned to get by&lt;br&gt;With the dogs and the dirt and the charm of the street&lt;br&gt;I fell asleep most nights&lt;br&gt;With your pictures right behind my eyes, your eyes&lt;br&gt;&amp;hellip;&lt;br&gt;And cause your smile&lt;br&gt;Is bright like the ramparts on the 4th of July&lt;br&gt;And my baby swings like a boxer&lt;br&gt;And sends her right hooks under my chin&lt;br&gt;She cries like a baby&lt;br&gt;And she wears me just like a ring&lt;br&gt;Cries like a baby&lt;br&gt;And she wears me just like a ring&lt;br&gt;I&amp;rsquo;d rather go than watch you leave&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;and-all-that-could-have-been&#34;&gt;And All That Could Have Been &lt;a href=&#34;#and-all-that-could-have-been&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2U0flA_Yp64?si=k2V_SmRzUMzxsTf3&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;This is my favorite Nine Inch Nails song. However, I can only listen to it when I&amp;rsquo;m in a certain mood. And when I do listen to it, it&amp;rsquo;s on repeat.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://genius.com/Nine-inch-nails-and-all-that-could-have-been-lyrics&#34;&gt;Full Lyrics&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Please&lt;br&gt;Take this&lt;br&gt;And run far away&lt;br&gt;Far as you can see&lt;br&gt;I am tainted&lt;br&gt;And happiness&lt;br&gt;And peace of mind&lt;br&gt;Were never meant for me&lt;br&gt;All these pieces&lt;br&gt;And promises&lt;br&gt;And left-behinds&lt;br&gt;If only I could see&lt;br&gt;In my nothing&lt;br&gt;You meant everything&lt;br&gt;Everything to me&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Access Request Headers in a Rails Controller</title>
       <link>https://kevinjmurphy.com/posts/access-request-headers-in-rails-controller/</link>
       <pubDate>Thu, 11 Jul 2024 18:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/access-request-headers-in-rails-controller/</guid>
       <description>&lt;h2 id=&#34;heads-up&#34;&gt;Heads Up &lt;a href=&#34;#heads-up&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A coworker presented a failing request spec. They asked if they were passing headers incorrectly in the test.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reports to be a teapot when asked to brew coffee&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-COMMAND&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brew coffee&amp;#34;&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get drinks_url, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: headers&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;418&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;They wrote the test exactly like I&amp;rsquo;d &lt;a href=&#34;https://rspec.info/features/6-0/rspec-rails/request-specs/request-spec/&#34;&gt;expect&lt;/a&gt;. But, rather than providing the 418, a 200 OK was the status code. I then looked at the controller this request spec was accessing.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; headers&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-COMMAND&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brew coffee&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    head &lt;span style=&#34;color:#ae81ff&#34;&gt;418&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @drinks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Drink&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nothing &lt;em&gt;obvious&lt;/em&gt; caught my attention. But now that I&amp;rsquo;d been effectively &lt;a href=&#34;https://xkcd.com/356/&#34;&gt;nerd sniped&lt;/a&gt;, I had to figure out what was going on.&lt;/p&gt;&lt;h2 id=&#34;heading-in-for-a-closer-look&#34;&gt;Heading In For a Closer Look &lt;a href=&#34;#heading-in-for-a-closer-look&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I added a breakpoint inside the controller to inspect the headers when the test was running.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;irb&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; headers&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Frame-Options&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SAMEORIGIN&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-XSS-Protection&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Content-Type-Options&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nosniff&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Download-Options&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noopen&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Permitted-Cross-Domain-Policies&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Referrer-Policy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strict-origin-when-cross-origin&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As expected, given the failing test, the &lt;code&gt;X-COMMAND&lt;/code&gt; header was nowhere to be found. But luckily, they did seem familiar to me. They looked to be Rails&amp;rsquo; &lt;a href=&#34;https://github.com/rails/rails/blob/f1aa436d738af1852b610189aeb93a5609bfe3b0/actionpack/lib/action_dispatch/railtie.rb#L30&#34;&gt;default headers&lt;/a&gt;. But those &lt;a href=&#34;https://edgeguides.rubyonrails.org/configuring.html#config-action-dispatch-default-headers&#34;&gt;default headers&lt;/a&gt; are for the &lt;strong&gt;response&lt;/strong&gt;, not the &lt;em&gt;request&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;I still had my console session with my breakpoint, so I asked what kind of headers we were interacting with.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;irb&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; headers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Response&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Header&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This confirmed we were dealing with the response, not request, headers.&lt;/p&gt;&lt;h2 id=&#34;heads-down&#34;&gt;Heads Down &lt;a href=&#34;#heads-down&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I needed to trace my way backwards from what I have or know. I asked what defines the headers method by asking for the &lt;a href=&#34;https://ruby-doc.org/3.2.1/Method.html#method-i-source_location&#34;&gt;source location&lt;/a&gt;. That&amp;rsquo;ll tell me the file and line number.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;irb&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; method(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;source_location&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.../gems/actionpack-7.0.3.1/lib/action_controller/metal.rb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/7-0-stable/actionpack/lib/action_controller/metal.rb#L147&#34;&gt;That line&lt;/a&gt; shows &lt;code&gt;headers&lt;/code&gt; delegated to an &lt;a href=&#34;https://guides.rubyonrails.org/active_support_core_extensions.html#internal-attributes&#34;&gt;internal attribute&lt;/a&gt; &lt;code&gt;@_response&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;delegate &lt;span style=&#34;color:#e6db74&#34;&gt;:headers&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:content_type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;:status&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:content_type&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:media_type&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;to&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@_response&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That internal attribute is accessible in the controller by calling &lt;code&gt;response&lt;/code&gt;. We can see that from the &lt;code&gt;attr_internal&lt;/code&gt; definition on &lt;a href=&#34;https://github.com/rails/rails/blob/7-0-stable/actionpack/lib/action_controller/metal.rb#L145&#34;&gt;line 145&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attr_internal &lt;span style=&#34;color:#e6db74&#34;&gt;:response&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:request&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;response&lt;/code&gt; isn&amp;rsquo;t the ONLY internal attribute on that line though. There&amp;rsquo;s ALSO a &lt;code&gt;request&lt;/code&gt;. In our console, let&amp;rsquo;s see what that request is.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;irb&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Request&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That class also &lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Request.html#method-i-headers&#34;&gt;responds to&lt;/a&gt; &lt;code&gt;headers&lt;/code&gt;, providing the &lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Http/Headers.html&#34;&gt;request headers&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;heading-in-for-the-close&#34;&gt;Heading In For The Close &lt;a href=&#34;#heading-in-for-the-close&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The change to get our test to pass is small. We don&amp;rsquo;t want the response headers, which is what the &lt;code&gt;headers&lt;/code&gt; variable is. We need the request headers, which are accessible at &lt;code&gt;request.headers&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-COMMAND&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brew coffee&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    head &lt;span style=&#34;color:#ae81ff&#34;&gt;418&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @drinks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Drink&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we&amp;rsquo;re accessing the headers of the &lt;strong&gt;request&lt;/strong&gt; our test passes.&lt;/p&gt;&lt;p&gt;Naming is hard. Asking for a controller&amp;rsquo;s headers could be either the request or the response headers. Turns out, Rails will give you the response headers. To access the request headers, explicitly ask for them from the request object.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Four Things To Take Away From RailsConf 2024</title>
       <link>https://kevinjmurphy.com/posts/4-things-railsconf-2024/</link>
       <pubDate>Mon, 13 May 2024 19:00:24 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/4-things-railsconf-2024/</guid>
       <description>&lt;h2 id=&#34;railsconf-2024&#34;&gt;RailsConf 2024 &lt;a href=&#34;#railsconf-2024&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that RailsConf 2024 is behind us, I want to share some key takeaways that I left Detroit with. I also have a &lt;a href=&#34;https://kevinjmurphy.com/posts/railsconf-2024-recap/&#34;&gt;full recap&lt;/a&gt; available of what I saw while I was there.&lt;/p&gt;&lt;h2 id=&#34;1-rubyfriends-is-more-than-a-hashtag&#34;&gt;1. #RubyFriends Is More Than A Hashtag &lt;a href=&#34;#1-rubyfriends-is-more-than-a-hashtag&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I cannot overstate the importance of your professional network. In the Ruby community, we talk a lot about Ruby Friends. How you build and cultivate that group is up to you. Conferences have been a main driver of that forme.&lt;/p&gt;&lt;p&gt;The reason I was on the &lt;a href=&#34;https://kevinjmurphy.com/posts/railsconf-2024-program-committee/&#34;&gt;Program Committee&lt;/a&gt; is because of the conference relationships I’ve built. I congratulated Ufuk on joining the Ruby Central board at RubyConf last year. I (sincerely) told him to keep me in mind if I can help in the future. He immediately said, &amp;ldquo;program committee?&amp;rdquo; And then he remembered when putting together RailsConf&amp;rsquo;s committee. I&amp;rsquo;m thankful to him for the opportunity.&lt;/p&gt;&lt;p&gt;The conference is an excuse to connect with my friends before, during, and after the actual event. I can check in on speaker friends throughout the process. This year I developed meaningful relationships with fellow Program Committee members. That persists throughout the conference. And after we can reminisce and recall all those moments.&lt;/p&gt;&lt;p&gt;And sure, hopefully I&amp;rsquo;m being helpful to my Ruby Friends, much like I know they&amp;rsquo;ll help me. But really what I appreciate most is having something to reach out to them about.&lt;/p&gt;&lt;h2 id=&#34;2-ruby--rails&#34;&gt;2. Ruby ❤️ Rails &lt;a href=&#34;#2-ruby--rails&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Rails benefits greatly from the tooling and improvements of Ruby itself. John Hawthorn demonstrated how Vernier can help profile Ruby code. That benefits all our Rails applications. Aaron Patterson described existing and future changes in Ruby. Each one improves our Rails applications. To take advantage of them, we need to stay up-to-date with those changes.&lt;/p&gt;&lt;h2 id=&#34;3-build-with-rails-build-with-rails&#34;&gt;3. Build with Rails? Build With Rails. &lt;a href=&#34;#3-build-with-rails-build-with-rails&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The theme at RailsConf was &amp;ldquo;Building with Rails&amp;rdquo;. We heard from people who built businesses with Rails. Built teams with Rails. Built technical advances with Rails. Built careers with Rails. Nadia talked to us about The StoryGraph. I took away an appreciation of how many risks and unknowns you take on starting and running a business. By keeping the tech simple and known, you can allocate your risk budget elsewhere.&lt;/p&gt;&lt;p&gt;Irina also surveyed various earlier-stage founders on their use of Rails. Hearing what they appreciate about the ecosystem was reaffirming. Learning what they&amp;rsquo;re missing was informative and helpful.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_irina_dont_be_shy.jpg&#34;    alt=&#34;Irina at RailsConf 2024 with a slide that says, &amp;#39;Whatever you do don&amp;#39;t be shy about building with Rails&amp;#39;&#34;&gt;&lt;/figure&gt;&lt;p&gt;Marco also called attention to Rails-adjacent projects, like Turbo and Stimulus Reflex. His talk provided a great history lesson on these projects. He gave exciting introductions to new tooling. He shared learning resources. Marco gave many options for how we can leverage this all in our Rails applications.&lt;/p&gt;&lt;h2 id=&#34;4-its-almost-over&#34;&gt;4. It&amp;rsquo;s (Almost) Over &lt;a href=&#34;#4-its-almost-over&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Yes, RailsConf 2024 is definitely over. However, RailsConf itself is also almost over. RailsConf 2025 is the &lt;a href=&#34;https://rubycentral.org/news/anewearforrubycentralevents/&#34;&gt;last planned RailsConf&lt;/a&gt;. Ruby Central will continue supporting RubyConf.&lt;/p&gt;&lt;p&gt;This will free RubyCentral up to focus their efforts. There are many other important benefits they provide the community. I know for a long time I thought of Ruby Central as the group the puts on the conferences. I took for granted the work they do. I didn’t consider how vital they are. They support the bedrock tooling for our community: Bundler and RubyGems. I hope this shift will help others be more awareness to the rest of the ways Ruby Central supports Ruby.&lt;/p&gt;&lt;p&gt;But we&amp;rsquo;re not done yet. Ruby Central needs your help shaping RailsConf 2025. Fill out &lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeQIVh1Uje6LBHFbkcSgVMliMPUVKt-kVloHAQ8OuVkvYoopw/viewform?ref=rubycentral.org&#34;&gt;this survey&lt;/a&gt; to tell them where you&amp;rsquo;re excited to see RailsConf. That&amp;rsquo;s right, there isn&amp;rsquo;t a date or location yet. Wherever it is, I hope I see you there.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>RailsConf 2024 Recap</title>
       <link>https://kevinjmurphy.com/posts/railsconf-2024-recap/</link>
       <pubDate>Sun, 12 May 2024 09:00:24 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/railsconf-2024-recap/</guid>
       <description>&lt;h2 id=&#34;railsconf-2024&#34;&gt;RailsConf 2024 &lt;a href=&#34;#railsconf-2024&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RailsConf recently wrapped up in Detroit, Michigan. This post is meant to highlight the great work from all involved. I hope you&amp;rsquo;ll seek out the full videos of all the sessions that interest you once they are available. Unfortunately, I couldn&amp;rsquo;t be everywhere, so this covers what I saw.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve separately compiled a list of &lt;a href=&#34;https://kevinjmurphy.com/posts/4-things-railsconf-2024/&#34;&gt;brief takeaways&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;preparing&#34;&gt;Preparing &lt;a href=&#34;#preparing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I had a bit of work to do leading up to the conference. It was my honor andpleasure to serve on the &lt;a href=&#34;https://kevinjmurphy.com/posts/railsconf-2024-program-committee/&#34;&gt;Program Committee&lt;/a&gt; for RailsConf this year. Mainly this meant reading all of the proposals. And then the even more difficult work to whittle that down to our &lt;a href=&#34;https://railsconf.org/speakers/&#34;&gt;program&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The committee broke into smaller groups. I was on the tracks group, even though we didn&amp;rsquo;t have &lt;a href=&#34;https://kevinjmurphy.com/posts/tracks-not-at-railsconf-2024/&#34;&gt;formal tracks&lt;/a&gt;. We helped put the schedule together. We provided feedback to those who asked for it about their proposal. I also tried to be as available as possible to any other groups who needed a hand.&lt;/p&gt;&lt;p&gt;Just as I&amp;rsquo;ve done in the past, I joined Ruby Central members for the CFP coaching sessions. We helped others with their proposals in small groups. This was a great opportunity to meet with prospective speakers and workshop ideas to submit for the conference. I&amp;rsquo;m glad that Ruby Central runs these events. They&amp;rsquo;re a great opportunity for prospective speakers. If you&amp;rsquo;re considering submitting to a future conference, I hope you&amp;rsquo;ll join one in the future.&lt;/p&gt;&lt;p&gt;Julie J, co-host of the Ruby for All podcast, was also on the Program Committee. Julie and I joined her co-host Andrew Mason to &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-for-all-guest-2024/&#34;&gt;talk about&lt;/a&gt; our experience on the committee.&lt;/p&gt;&lt;p&gt;I was also happy to be a speaker mentor. I paired with &lt;a href=&#34;https://railsconf2024.sessionize.com/speaker/45d44f90-cd1f-4678-9a87-17c44e3d9900&#34;&gt;Dawn Richardson&lt;/a&gt;. Dawn had a &lt;a href=&#34;https://railsconf2024.sessionize.com/session/623026&#34;&gt;terrific talk about&lt;/a&gt; her experience as a Principal Engineer. Dawn was ready with a great topic, talk structure, and plans for delivery before we met. I would have never guessed she was a first-time speaker unless she told me! Definitely check out her talk if you didn&amp;rsquo;t see it at RailsConf.&lt;/p&gt;&lt;h2 id=&#34;day-1&#34;&gt;Day 1 &lt;a href=&#34;#day-1&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;opening-keynote&#34;&gt;Opening Keynote &lt;a href=&#34;#opening-keynote&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/648347&#34;&gt;Nadia Odunayo&lt;/a&gt; got us started with a reminder of how far Rails can take you. And more generally, how to decide on where to allocate risk. When starting a business, there is so much unknown. Keep the tech simple.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_nadia.jpg&#34;    alt=&#34;Nadia at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;so-writing-tests-feels-painful-what-now&#34;&gt;So writing tests feels painful. What now? &lt;a href=&#34;#so-writing-tests-feels-painful-what-now&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/628784&#34;&gt;Stephanie Minn&lt;/a&gt; walked us through an illustrative example of when testing can be painful. We built the test together, allowing us to understand the justification for why the test was written this way. We felt what it&amp;rsquo;s like to realize we need a change and why. And of course, we worked to improve the situation. I am patiently awaiting the launch of Petreon, so I can sign up as Hickory&amp;rsquo;s Club President.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_stephanie.jpg&#34;    alt=&#34;Stephanie at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;ruby-on-fails---effective-error-handling-with-rails-conventions&#34;&gt;Ruby on Fails - effective error handling with Rails conventions &lt;a href=&#34;#ruby-on-fails---effective-error-handling-with-rails-conventions&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/626598&#34;&gt;Talysson Oliveira Cassiano&lt;/a&gt; opened with an exceptional introduction to errors and exceptions. Later they introduced some anti-patterns for error handling before wrapping up with suggestions for effective error handling.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_talysson.jpg&#34;    alt=&#34;Talysson at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;crafting-rails-plugins&#34;&gt;Crafting Rails Plugins &lt;a href=&#34;#crafting-rails-plugins&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/626652&#34;&gt;Chris Oliver&lt;/a&gt; gave a tour on how to construct a Rails plugin for distribution. He demystified this process, coming at it from the perspective of someone already familiar with Rails. It turns out, you may be more prepared to build a plugin than you think.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_chris.jpg&#34;    alt=&#34;Chris at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;from-cryptic-error-messages-to-rails-contributor&#34;&gt;From Cryptic Error Messages To Rails Contributor &lt;a href=&#34;#from-cryptic-error-messages-to-rails-contributor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/618628&#34;&gt;Collin Jilbert&lt;/a&gt;&amp;rsquo;s teaching style translated just as well to the stage. He comfortably walked through an explanation of an issue all the way through to the fix.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_collin.jpg&#34;    alt=&#34;Collin at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;riffing-on-rails-sketch-your-way-to-better-designed-code&#34;&gt;Riffing on Rails: sketch your way to better designed code &lt;a href=&#34;#riffing-on-rails-sketch-your-way-to-better-designed-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/630464&#34;&gt;Kasper Timm Hansen&lt;/a&gt; explored code design live on stage. Working within the constraints of a single file (not necessarily class) focused our efforts. Removing the tie to any existing code allowed us to freely consider a world of possibilities.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_kaspar.jpg&#34;    alt=&#34;Kasper at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;closing-keynote-startups-on-rails&#34;&gt;Closing Keynote: Startups on Rails &lt;a href=&#34;#closing-keynote-startups-on-rails&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/629524&#34;&gt;Irina Nazarova&lt;/a&gt; ended our day with stories of current founders using Rails. Irina shared how Rails has been a &lt;a href=&#34;https://kevinjmurphy.com/posts/competitive-advantage/&#34;&gt;competitive advantage&lt;/a&gt;. We also explored what needs these founders have that aren&amp;rsquo;t being met by the technology or the community.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_irina.jpg&#34;    alt=&#34;Irina at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;day-2---hack-day&#34;&gt;Day 2 - Hack Day! &lt;a href=&#34;#day-2---hack-day&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I left this day open in my planning. I did not attend any of the workshops. I started the day meandering through the hack day tables. I asked people what they were working on. I observed the conversation.&lt;/p&gt;&lt;p&gt;Later, I sat down with a friend to look at &lt;a href=&#34;https://github.com/kevin-j-m/clockwork-test&#34;&gt;code&lt;/a&gt; I had written nine years ago. We revisited the project with multiple sets of new eyes. Some who&amp;rsquo;ve never seen it before. Others haven&amp;rsquo;t seen it in a long, long time. We considered if this code even needs to exist. We had a good discussion on alternative implementations. We went through an interesting thought experiment to consider how I would or wouldn&amp;rsquo;t write this code differently now.&lt;/p&gt;&lt;h2 id=&#34;day-3&#34;&gt;Day 3 &lt;a href=&#34;#day-3&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;revisiting-the-hotwire-landscape-after-turbo-8&#34;&gt;Revisiting the Hotwire Landscape after Turbo 8 &lt;a href=&#34;#revisiting-the-hotwire-landscape-after-turbo-8&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/630406&#34;&gt;Marco Roth&lt;/a&gt; fit the past, present, and future into a tight package. It didn&amp;rsquo;t feel rushed or consolidated. Because of this, I better understand where we are as a community for building complex UI interactions. I&amp;rsquo;m equipped with more tools and resources to develop them. I&amp;rsquo;m informed on where we&amp;rsquo;re going.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_marco.jpg&#34;    alt=&#34;Marco at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;the-very-hungry-transaction&#34;&gt;The Very Hungry Transaction &lt;a href=&#34;#the-very-hungry-transaction&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/626442&#34;&gt;Daniel Colson&lt;/a&gt; brought some delightful storytelling to explain a technical topic. Small changes in transactions may seem innocuous but have drastic consequences. Code in transactions needs additional consideration we don&amp;rsquo;t normally apply outside a transaction.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_daniel.jpg&#34;    alt=&#34;Daniel at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;dungeons--dragons--rails&#34;&gt;Dungeons &amp;amp; Dragons &amp;amp; Rails &lt;a href=&#34;#dungeons--dragons--rails&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/630449&#34;&gt;Joël Quenneville&lt;/a&gt; and Glittersense the gnome demonstrated the magic of Turbo (and stagecraft). The talk is worth the watch for the entertainment value alone. That it provides a delightful survey of the tools in the Turbo toolbox is a bonus.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_joel.jpg&#34;    alt=&#34;Joël at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;from-rspec-to-jest-javascript-testing-for-rails-devs&#34;&gt;From RSpec to Jest: JavaScript testing for Rails devs &lt;a href=&#34;#from-rspec-to-jest-javascript-testing-for-rails-devs&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/623122&#34;&gt;Stefanni Brasil&lt;/a&gt; dared to bring us out of our comfort zone. We accepted the reality that JavaScript exists and explored how to bring our rubyist testing practices to that environment.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_steffani.jpg&#34;    alt=&#34;Stefanni at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;beyond-senior-lessons-from-the-technical-career-path&#34;&gt;Beyond senior: lessons from the technical career path &lt;a href=&#34;#beyond-senior-lessons-from-the-technical-career-path&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/623026&#34;&gt;Dawn Richardson&lt;/a&gt; walked us up the career ladder. By explaining her experience as a Principal Engineer, we&amp;rsquo;re now better equipped for our own progression.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_dawn.jpg&#34;    alt=&#34;Dawn at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;closing-keynote&#34;&gt;Closing Keynote &lt;a href=&#34;#closing-keynote&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf2024.sessionize.com/session/648380&#34;&gt;Aaron Patterson&lt;/a&gt; explained changes in Ruby, both current and coming, that can inform how we structure and write our Ruby code in a Rails app.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_aaron.jpg&#34;    alt=&#34;Aaron at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;appreciation&#34;&gt;Appreciation &lt;a href=&#34;#appreciation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thank you &lt;a href=&#34;https://rubycentral.org&#34;&gt;Ruby Central&lt;/a&gt; for your work to organize these events and supporting the Ruby community all year round.&lt;/p&gt;&lt;p&gt;Thank you to Andy and Ufuk for inviting me on the Program Committee. Thank you to the rest of the Program Committee: Julie, Ifat, Mayra, Aji, Gary, John, and Zarela.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_program_committee.jpg&#34;    alt=&#34;The Program Committee Slide at RailsConf 2024&#34;&gt;&lt;/figure&gt;&lt;p&gt;Thank you to the Scholarship Committee, volunteers, and venue staff for bringing this conference to life.&lt;/p&gt;&lt;p&gt;Thank you sponsors for supporting the Ruby community and making it possible for us to come together.&lt;/p&gt;&lt;p&gt;Thanks to all the #RubyFriends, old and new, that I met in Detroit.&lt;/p&gt;&lt;p&gt;Thank you for reading to the end. Maybe we met at RailsConf 2024. Maybe we didn&amp;rsquo;t. I hope to see you in 2025. Let&amp;rsquo;s wrap up the long tradition of RailsConf with the send-off it deserves.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Another Ruby for All Podcast Guest Appearance</title>
       <link>https://kevinjmurphy.com/posts/ruby-for-all-guest-2024/</link>
       <pubDate>Sat, 20 Apr 2024 20:00:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-for-all-guest-2024/</guid>
       <description>&lt;h2 id=&#34;ruby-for-all-podcast&#34;&gt;Ruby for All Podcast &lt;a href=&#34;#ruby-for-all-podcast&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was a guest on &lt;a href=&#34;https://www.rubyforall.com/s2/66&#34;&gt;episode 66&lt;/a&gt; of the Ruby for All podcast. Julie and I are both on the RailsConf 2024 Program Committee. I joined Julie and Andrew to talk about RailsConf 2024 and what it&amp;rsquo;s been like being on the Program Committee.&lt;/p&gt;&lt;p&gt;From the episode description:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;In this episode of &amp;lsquo;Ruby For All&amp;rsquo;, hosts Andrew and Julie welcome guest Kevin Murphy, Software Developer at Pubmark and member of the RailsConf program committee. The discussion kicks off with Andrew and Julie catching up, then transitions into an in-depth conversation about the RailsConf planning process. Kevin and Julie, the Speaker Liaison, share insights into the workings of the program committee, the selection criteria for conference talks, and the challenges and rewards of organizing RailsConf. Additionally, Kevin elaborates on his role in the committee, the theme for this year&amp;rsquo;s conference, and his goals for impact, and Julie looks forward to supporting speakers and managing workshops. The episode emphasizes the importance of volunteer contributions to the success of RailsConf and encourages attendees to express their gratitude to the organizers, and to go check out all the details at RailsConf.org and buy your tickets now!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Give it a &lt;a href=&#34;https://www.rubyforall.com/s2/66&#34;&gt;listen&lt;/a&gt; and let me know what youthink!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Making a (Sidekiq) Batch Recipe</title>
       <link>https://kevinjmurphy.com/posts/making-a-sidekiq-batch-recipe/</link>
       <pubDate>Sat, 13 Apr 2024 18:00:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/making-a-sidekiq-batch-recipe/</guid>
       <description>&lt;h2 id=&#34;the-right-number-of-cooks-in-the-kitchen&#34;&gt;The Right Number of Cooks in the Kitchen &lt;a href=&#34;#the-right-number-of-cooks-in-the-kitchen&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Today we&amp;rsquo;re going to make a stew. The recipe has three steps that can all run independently. But when they&amp;rsquo;re done, their output needs to come together to finish the stew.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll set each step up as a separate Sidekiq job. The details of each step aren&amp;rsquo;t important for this demonstration.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetRawVeggiesWorker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Job&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetBaconWorker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Job&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetCupOfSoupWorker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Job&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can enqueue these to run by themselves no problem. However, we need to know when they&amp;rsquo;re all done so we can finish our recipe. We can group these together using a &lt;a href=&#34;https://sidekiq.org/products/pro.html&#34;&gt;Sidekiq Pro&lt;/a&gt; feature: batches.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll write a series of RSpec tests to explore how to use batches to make our recipe.&lt;/p&gt;&lt;h2 id=&#34;tracking-kitchen-progress&#34;&gt;Tracking Kitchen Progress &lt;a href=&#34;#tracking-kitchen-progress&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ll start by creating a batch, and adding our recipe steps to it as jobs. Just like a Sidekiq job has a &lt;code&gt;jid&lt;/code&gt; (job ID), a batch has a &lt;code&gt;bid&lt;/code&gt; (batch ID). We can use that &lt;code&gt;bid&lt;/code&gt; to check on the batch&amp;rsquo;s status thanks to the aptly-named &lt;code&gt;Batch::Status&lt;/code&gt; class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adds jobs to a batch&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  recipe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  recipe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;GetRawVeggiesWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;GetBaconWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;GetCupOfSoupWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch_status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(recipe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bid)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(batch_status)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_attributes(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;total&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;pending&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    complete?: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After making our batch and checking on the status, we see there are three jobs, but none of them ran. That is because this is in a test, and we&amp;rsquo;re using the &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Testing#testing-worker-queueing-fake&#34;&gt;Sidekiq fake adapter&lt;/a&gt; by default.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s update our test to run the batch jobs &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Testing#testing-workers-inline&#34;&gt;inline&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runs the workers in the batch in inline mode&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  recipe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inline! &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recipe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;GetRawVeggiesWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;GetBaconWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;GetCupOfSoupWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch_status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(recipe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bid)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(batch_status)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_attributes(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;pending&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    complete?: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;total&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The jobs executed and the batch is complete. Note that the total number of jobs is five, even though we enqueued three jobs. Interesting! Let&amp;rsquo;s leave that aside as we explore what to do now that we have a batch that completes.&lt;/p&gt;&lt;h2 id=&#34;calling-back-next-steps&#34;&gt;Calling (back) next steps &lt;a href=&#34;#calling-back-next-steps&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The reason we created a batch was so we could do something with the results of our jobs when they finished. We wanted them to run independently, so we can take advantage of parallel execution. But we need to have the system take action once they&amp;rsquo;re all done.&lt;/p&gt;&lt;p&gt;Sidekiq batches respond to &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Batches#callbacks&#34;&gt;callbacks&lt;/a&gt;. We&amp;rsquo;ll focus on two of the three available callbacks: complete and success.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ActingLessonCallback&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_complete&lt;/span&gt;(status, options)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; went to Craft Services&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_success&lt;/span&gt;(status, options)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Baby, you&amp;#39;ve got a stew goin&amp;#39;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each callback method accepts two arguments. One for the status, and another for a set of options. We&amp;rsquo;re using those options in the &lt;code&gt;on_complete&lt;/code&gt; callback to pass a name to the status message.&lt;/p&gt;&lt;p&gt;Also, I&amp;rsquo;m sorry I misled you earlier. This isn&amp;rsquo;t really about a recipe. It&amp;rsquo;s an &lt;a href=&#34;https://www.youtube.com/watch?v=oDOffqDsV5Q&#34;&gt;acting lesson&lt;/a&gt;.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oDOffqDsV5Q?si=dHN-tl96__zJpc_0&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;getting-an-audition-callback&#34;&gt;Getting an audition callback &lt;a href=&#34;#getting-an-audition-callback&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now we know how to use a callback and we created a class to house our callbacks. Let&amp;rsquo;s put it to use by telling our batch about it, and seeing how they get used.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runs a callback&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  acting_lesson &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  acting_lesson&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(&lt;span style=&#34;color:#e6db74&#34;&gt;:complete&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;ActingLessonCallback&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kevin&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  acting_lesson&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(&lt;span style=&#34;color:#e6db74&#34;&gt;:success&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;ActingLessonCallback&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inline! &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      acting_lesson&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;GetRawVeggiesWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;GetBaconWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;GetCupOfSoupWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to output(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kevin went to Craft Services&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;\&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Baby, you&amp;#39;ve got a stew goin&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_stdout&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We registered our callbacks with the batch using the &lt;code&gt;on&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;Remember those two additional jobs in the prior example? Where we enqueued three jobs, but the total count was five? Those extra jobs were these callbacks firing. Even though we didn&amp;rsquo;t register any callbacks, the events still fired.&lt;/p&gt;&lt;p&gt;In this test our batch executed, triggering both callback events. As expected, the callbacks output their message. Completion! Success!&lt;/p&gt;&lt;h2 id=&#34;a-complete-definition-of-success&#34;&gt;A complete definition of success &lt;a href=&#34;#a-complete-definition-of-success&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;While success and complete may sound similar, they have specific and different meanings. The success callback is perhaps the more obvious one. It triggers when the jobs in the batch have completed successfully.&lt;/p&gt;&lt;p&gt;That means that a batch can complete and not be successful - leading us to the &lt;code&gt;on_complete&lt;/code&gt; callback. That fires when all the jobs have executed. Some of the jobs could have failed. Some may be in the retry queue. But they have run at least once.&lt;/p&gt;&lt;p&gt;To show this, let&amp;rsquo;s create a few more Sidekiq jobs. We&amp;rsquo;ll join the steps of our acting lesson together in one job. And we&amp;rsquo;ll create one more that always fails.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ActingLessonWorker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Job&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HugeMistakeWorker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Job&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sidekiq_options &lt;span style=&#34;color:#66d9ef&#34;&gt;retry&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I think I&amp;#39;d like my money back&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we&amp;rsquo;ll run another test, creating a batch with these two jobs. At the end, we&amp;rsquo;ll check the status of the batch.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;completes once each job has run once, regardless of success&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  drama_coach &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inline! &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      drama_coach&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;ActingLessonWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;HugeMistakeWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to raise_error &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I think I&amp;#39;d like my money back&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch_status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(drama_coach&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bid)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(batch_status)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_attributes(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    complete?: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;total&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;pending&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;failures&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;success_pct&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even though not all the jobs were successful, the batch still reports itself as complete. We can see the failure, and the job that failed as pending. We can also look at the success percentage of the batch to understand that not all the jobs succeeded.&lt;/p&gt;&lt;h2 id=&#34;dress-rehearsal-implications&#34;&gt;Dress rehearsal implications &lt;a href=&#34;#dress-rehearsal-implications&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Something to be mindful of when running your batches in tests is when the callback will fire. To really have some fun, let&amp;rsquo;s do something I don&amp;rsquo;t reach for often: use a global variable.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$global &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll create a job that increments the global.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWorker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Job&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $global &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll have a callback after the batch succeeds. It outputs how many times the jobs incremented the counter.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BatchCallback&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_success&lt;/span&gt;(status, options)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jobs run: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;$global&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our test, we have a batch that fires the callback and enqueues the counter job twice.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runs the success callback after the first job is run with inline test mode&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(&lt;span style=&#34;color:#e6db74&#34;&gt;:success&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;BatchCallback&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inline! &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;CounterWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;CounterWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to output(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jobs run: 1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_stdout&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect($global)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our global says both jobs ran; however, the output from our callback says only one ran. Both are correct - at different points in time! Remember, these jobs in this &lt;em&gt;test&lt;/em&gt; are performed inline. The first counter job was enqueued and run, incrementing the counter. Then Sidekiq checked to see if any other jobs were in the batch. At this point there aren&amp;rsquo;t, so it triggers the callbacks. The success callback outputs that one job ran.&lt;/p&gt;&lt;p&gt;Then, the second job in the batch was enqueued and run, incrementing the counter. The end of our test verifies that the global variable is currently set to two. The callback is not executed again because it already ran.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;re running batches in tests, want to test the callback of a batch, and the callback depends on the state or results of all the jobs in the batch, you may end up with a surprising result.&lt;/p&gt;&lt;h2 id=&#34;bulking-up-mid-rehearsal&#34;&gt;Bulking up mid-rehearsal &lt;a href=&#34;#bulking-up-mid-rehearsal&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you really need to test this, you &lt;em&gt;could&lt;/em&gt; work around this by changing how you enqueue the jobs in your batch. Using &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Bulk-Queueing&#34;&gt;bulk queueing&lt;/a&gt; will get you the result you expect.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runs the success callback after all jobs run when pushed in bulk with inline test mode&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(&lt;span style=&#34;color:#e6db74&#34;&gt;:success&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;BatchCallback&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inline! &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs { &lt;span style=&#34;color:#66d9ef&#34;&gt;CounterWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_bulk(&lt;span style=&#34;color:#f92672&#34;&gt;[[]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[]]&lt;/span&gt;) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to output(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jobs run: 2&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_stdout&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect($global)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This also enqueues two jobs. When run with the inline test adapter, they both run before the batch callbacks fire. So, both the callback and the global are consistent.&lt;/p&gt;&lt;p&gt;I point this out to show you can do this, and also to perhaps introduce bulk queueing to you. However, if your tests rely on this, I would advocate to reconsider your testing strategy. Test the callback in isolation to verify that part of your code. Trust Sidekiq to manage the orchestration of firing the callback for the batch.&lt;/p&gt;&lt;h2 id=&#34;a-draining-performance&#34;&gt;A draining performance &lt;a href=&#34;#a-draining-performance&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You may recall that our first test didn&amp;rsquo;t run the jobs because we were using the fake test adapter. I have one other word of caution to point out that I noticed using the fake adapter. Draining the queue that the jobs are enqueued in for a batch later in the test also does not trigger the callbacks.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doesn&amp;#39;t run the success callback of a batch when draining the queue in fake test mode&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(&lt;span style=&#34;color:#e6db74&#34;&gt;:success&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;BatchCallback&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  batch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jobs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;CounterWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;CounterWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perform_async&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect { &lt;span style=&#34;color:#66d9ef&#34;&gt;CounterWorker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drain }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;not_to output(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jobs run: 2&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_stdout&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect($global)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly on testing, to have these callbacks fire in tests, you must &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Batches#testing&#34;&gt;add middleware&lt;/a&gt; to your tests.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;around(&lt;span style=&#34;color:#e6db74&#34;&gt;:example&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;example&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;server_middleware &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;chain&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chain&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Server&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;server_middleware &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;chain&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chain&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove &lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Batch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Server&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;curtain-call&#34;&gt;Curtain call &lt;a href=&#34;#curtain-call&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This has been an introduction to Sidekiq&amp;rsquo;s batch functionality. It &lt;em&gt;also&lt;/em&gt; provides a valuable life lesson on acting. Batches can be a great option to parallelize work and report the result of, or combine, those pieces. You can also use it to build complex workflows. Dig into batches in more detail on &lt;a href=&#34;https://github.com/sidekiq/sidekiq/wiki/Batches&#34;&gt;Sidekiq&amp;rsquo;s wiki&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Tracks Not At RailsConf 2024</title>
       <link>https://kevinjmurphy.com/posts/tracks-not-at-railsconf-2024/</link>
       <pubDate>Fri, 15 Mar 2024 10:00:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/tracks-not-at-railsconf-2024/</guid>
       <description>&lt;h2 id=&#34;railsconf-2024&#34;&gt;RailsConf 2024 &lt;a href=&#34;#railsconf-2024&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m on the &lt;a href=&#34;https://kevinjmurphy.com/posts/railsconf-2024-program-committee/&#34;&gt;RailsConf 2024 Program Committee&lt;/a&gt;. We just released the &lt;a href=&#34;https://railsconf.org/schedule/&#34;&gt;program&lt;/a&gt; for this year&amp;rsquo;s event, and I hope you&amp;rsquo;ll join us!&lt;/p&gt;&lt;p&gt;One thing we don&amp;rsquo;t have are formally-themed tracks. In past years, our CFP might have included prompts for different topics. Or we&amp;rsquo;d group some talks in publicly-shared and advertised ways.&lt;/p&gt;&lt;p&gt;We aren&amp;rsquo;t doing that this year. That lets us focus on the overall conference theme: building with Rails. However, that didn&amp;rsquo;t stop me from brainstorming a list of possible tracks, in case we did want to add them in.&lt;/p&gt;&lt;p&gt;The following is a list of what could have been, but will not be: tracks that are not part of the RailsConf 2024 program.&lt;/p&gt;&lt;h2 id=&#34;lend-an-enginear&#34;&gt;Lend an Enginear &lt;a href=&#34;#lend-an-enginear&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Story Time! Gather round to hear harrowing tales of software development. Was the bug coming from inside the framework? What can we learn from these experiences? Follow the hero&amp;rsquo;s journey of these presenters. Listen to adventures both imagined and too strange for fiction.&lt;/p&gt;&lt;h2 id=&#34;rails-train-ing&#34;&gt;Rails Train-ing &lt;a href=&#34;#rails-train-ing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Unlock new perspectives on using the Rails toolbox. Talks in this track will help you level up on Rails functionality. They&amp;rsquo;ll build up a stronger understanding of framework features.&lt;/p&gt;&lt;h2 id=&#34;rails-engine-uity&#34;&gt;Rails Engine-uity &lt;a href=&#34;#rails-engine-uity&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This track highlights people combining Rails with other concepts. This may include a variety of front-end tools. It may show connecting with different data sources. I&amp;rsquo;m sure there are things I can&amp;rsquo;t even imagine that submitters would surprise us with.&lt;/p&gt;&lt;h2 id=&#34;railway-maintenance&#34;&gt;Railway Maintenance &lt;a href=&#34;#railway-maintenance&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;re all about setting ourselves up for long-haul success here. How can we prevent future pain in managing our applications? How can we get ourselves out of sticky situations? What tools, systems, and mindsets make our apps more amenable to change? How can we otherwise make our apps better in the future?&lt;/p&gt;&lt;h2 id=&#34;express-rail&#34;&gt;Express Rail &lt;a href=&#34;#express-rail&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here is a one-way ticket to building foundational Rails knowledge. Talks in this track assume no prior experience for the audience. This track will bring you up to speed quickly.&lt;/p&gt;&lt;h2 id=&#34;freight-transport&#34;&gt;Freight Transport &lt;a href=&#34;#freight-transport&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is where all the heavy technical talks combine in one long train traveling down the same track. Talks may dig into details on Rails source code. They could explore dreams for the future.&lt;/p&gt;&lt;h2 id=&#34;passenger-train&#34;&gt;Passenger Train &lt;a href=&#34;#passenger-train&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Ruby community is so delightful because of the people in it. These talks highlight that. They provide insight on how to improve our human connection, to code and each other.&lt;/p&gt;&lt;h2 id=&#34;tunnel-vision&#34;&gt;Tunnel Vision &lt;a href=&#34;#tunnel-vision&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Talks in this track are deep dives on specific topics. Here is a chance for speakers to get into intense detail. Share the knowledge that it feels like only you know. Combine the wisdom of the community on one area in a tight package.&lt;/p&gt;&lt;h2 id=&#34;railsconf-2024-program&#34;&gt;RailsConf 2024 Program &lt;a href=&#34;#railsconf-2024-program&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;While those tracks aren&amp;rsquo;t in this year&amp;rsquo;s program, we have lots of &lt;a href=&#34;https://railsconf.org/schedule/&#34;&gt;amazing sessions&lt;/a&gt; that are. Get your &lt;a href=&#34;https://ti.to/railsconf/2024&#34;&gt;ticket&lt;/a&gt; today!&lt;/p&gt;&lt;p&gt;There may also be some subtle ordering to the schedule. What themes do you see? What sessions are you looking forward to? &lt;a href=&#34;https://ruby.social/@kevin_j_m/112090218913981735&#34;&gt;Let me know&lt;/a&gt;!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Joining RailsConf 2024 Program Committee</title>
       <link>https://kevinjmurphy.com/posts/railsconf-2024-program-committee/</link>
       <pubDate>Mon, 05 Feb 2024 17:00:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/railsconf-2024-program-committee/</guid>
       <description>&lt;h2 id=&#34;railsconf-2024-program&#34;&gt;RailsConf 2024 Program &lt;a href=&#34;#railsconf-2024-program&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m thrilled to be part of the RailsConf 2024 &lt;a href=&#34;https://railsconf.org/about/&#34;&gt;Program Committee&lt;/a&gt;. &lt;a href=&#34;https://railsconf.org/&#34;&gt;RailsConf&lt;/a&gt; is taking place in Detroit, MI from May 7-9. We&amp;rsquo;ll have two days of talks with a hack day/community day in between.&lt;/p&gt;&lt;p&gt;To put together a great program, we need &lt;strong&gt;your help&lt;/strong&gt;. I hope you&amp;rsquo;ll consider submitting a talk proposal to our &lt;a href=&#34;https://sessionize.com/railsconf2024/&#34;&gt;CFP&lt;/a&gt;, which is open until February 13. I want to read your proposal!&lt;/p&gt;&lt;p&gt;Thank you to Ufuk Kayserilioglu and Andy Croll for inviting me to participate. Special thanks to past Program Committee members for answering my questions.&lt;/p&gt;&lt;p&gt;Whether as a speaker or an attendee, I hope I&amp;rsquo;ll see you in Detroit this May.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/railsconf_2024_program_committee.png&#34;    alt=&#34;Pictures of the RailsConf 2024 Program Committee Members&#34;&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>Slowing Down</title>
       <link>https://kevinjmurphy.com/posts/slowing-down/</link>
       <pubDate>Sun, 07 Jan 2024 20:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/slowing-down/</guid>
       <description>&lt;h2 id=&#34;the-plan-going-forward&#34;&gt;The plan going forward &lt;a href=&#34;#the-plan-going-forward&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve been consistently publishing at least one article a month on the internet for more than three years. I&amp;rsquo;ve since formalized that so that by the third Monday of the month, there&amp;rsquo;d be a new article. That may not sound like much, but it&amp;rsquo;s been what&amp;rsquo;s worked for me.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m no longer going to hold myself to that content calendar. I&amp;rsquo;m still going to write, but I&amp;rsquo;m going to intentionally break the streak to have something new every month. There will be a new post when I&amp;rsquo;m inspired or incentivized to do so.&lt;/p&gt;&lt;h2 id=&#34;historical-context&#34;&gt;Historical context &lt;a href=&#34;#historical-context&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I started writing to kick-start a technical blog of my employer at the time. I did benefit from getting editing and early review from my peers, but wrote all the content off-hours. I &lt;em&gt;enjoyed&lt;/em&gt; writing, and I enjoyed &lt;em&gt;sharing&lt;/em&gt; it as well.&lt;/p&gt;&lt;p&gt;Monthly there&amp;rsquo;d be a round-up of posts, videos, documentation, podcasts, or anything else people in the company found helpful. We&amp;rsquo;d write a small blurb and include a link to it. I organized that effort at the time to make sure there was at least one thing a month posted.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;d also write at least one other post a month. Sometimes more. This wasn&amp;rsquo;t tremendously scheduled. Some months I&amp;rsquo;d have two-part posts that I&amp;rsquo;d publish a week apart. Some months I would drop my post whenever it fit in against other authors on the company blog.&lt;/p&gt;&lt;p&gt;When I left that job, I kept writing. I dropped maintaining a personal monthly round-up of neat stuff. I did keep up with original content. Occasionally it was about things that were in air with the larger Ruby community. Mostly it was things that were interesting to me at the time. It may have been something I just encountered for work. It may related to a conference talk I was putting together. But, every month something ended up on &lt;a href=&#34;https://kevinjmurphy.com&#34;&gt;kevinjmurphy.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In July 2022 I started a &lt;a href=&#34;https://newsletter.kevinjmurphy.com/&#34;&gt;newsletter&lt;/a&gt;. To me, that cemented that I needed to keep delivering on a consistent schedule. Consistency is a core engagement mechanism to cultivate and maintain an audience. And that&amp;rsquo;s what I&amp;rsquo;ve done, even before the newsletter. Now it&amp;rsquo;d be more obvious (maybe?) if I didn&amp;rsquo;t.&lt;/p&gt;&lt;h2 id=&#34;trial-period&#34;&gt;Trial period &lt;a href=&#34;#trial-period&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I intentionally said that I&amp;rsquo;ve been publishing monthly. Lately, I haven&amp;rsquo;t been &lt;strong&gt;writing&lt;/strong&gt; monthly. I started feeling like I wanted to pull back in 2022. But I had just started the newsletter. I didn&amp;rsquo;t, I couldn&amp;rsquo;t, abandon that. Looking back, I think I started the newsletter in the hopes that it would reinvigorate my writing. I&amp;rsquo;m still very thankful that I have the newsletter. Thanks to everyone reading this who subscribes. But it hasn&amp;rsquo;t gotten me excited to write. It&amp;rsquo;s made it more public (maybe just to me) whenever I got close to missing my self-imposed deadline to write. Which has not been the best environment to write in for fun.&lt;/p&gt;&lt;p&gt;Coincidentally, at the same time I was just about to have a fresh stream of content to publish. I delivered a fresh conference talk at &lt;a href=&#34;https://kevinjmurphy.com/posts/rubyconf-mini-2022-recap/&#34;&gt;RubyConf Mini 2022&lt;/a&gt;. Not one to let content go to waste, I turn each of my talks into blog posts. Conference talks tend to be more dense in the amount of material, so they usually become a blog post series. This talk was no exception. I had the &lt;a href=&#34;https://kevinjmurphy.com/tags/anyone-can-play-guitar/&#34;&gt;posts written&lt;/a&gt;, along with writing the talk. I had published the &lt;a href=&#34;https://kevinjmurphy.com/posts/enumerating-musical-notes/&#34;&gt;first entry&lt;/a&gt; before the conference. It was content I had to cut from my talk, so I used it on my blog to promote the upcoming conference. I released &lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/&#34;&gt;another&lt;/a&gt; just before the talk, but didn&amp;rsquo;t publicize it until the day of the talk.&lt;/p&gt;&lt;p&gt;That still left three posts ready to go. Previously, I would have published these maybe a week or so apart. But I did something different this time. I sat on them.&lt;/p&gt;&lt;p&gt;Instead, I published my year in review post in December. That followed with an unexpected post to end the year about a &lt;a href=&#34;https://kevinjmurphy.com/posts/my-first-code-commit-in-ruby/&#34;&gt;contribution to Ruby&lt;/a&gt;. Then, because Ruby 3.2 was top of mind at the start of year, I wrote about &lt;a href=&#34;https://kevinjmurphy.com/posts/evaluating-more-coverage-in-ruby-3-2/&#34;&gt;new 3.2 functionality&lt;/a&gt; in January.&lt;/p&gt;&lt;p&gt;I didn&amp;rsquo;t get around to continue publishing the Anyone Can Play Guitar series until March. At that time, I had a healthy backlog of articles ready to go. But I held off on publishing them. I intentionally only published one a month.&lt;/p&gt;&lt;p&gt;That gave me breathing room. In March, I knew I had articles written that would last me through August. I didn&amp;rsquo;t stop writing. I stopped writing because I felt I had to. I had a set of posts ready to go to fall back on. When I&amp;rsquo;d write a new article, I&amp;rsquo;d decide if I should publish it more immediately, or move it back in line behind the others. For example, I&amp;rsquo;m writing &lt;em&gt;this post&lt;/em&gt; in August, 2023. I know it&amp;rsquo;s not getting published for a while though. I&amp;rsquo;d shift things around. Is there a big conference coming up? I&amp;rsquo;d publish posts I had ready to go about preparing for, or going to, conferences. Is there something that I&amp;rsquo;m really excited that I just wrote? I&amp;rsquo;d move it to the front of the line.&lt;/p&gt;&lt;p&gt;I kept the schedule, but I didn&amp;rsquo;t write to the schedule.&lt;/p&gt;&lt;h2 id=&#34;settling-in&#34;&gt;Settling in &lt;a href=&#34;#settling-in&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I prefer this writing arrangement. I put something together when I have the time, or when I&amp;rsquo;m particularly motivated. I&amp;rsquo;m not out of ideas. Much like my list of conference talk ideas, I have pages of ideas for blog posts unwritten. And new ideas spring to life, taking priority over those other ideas. When I feel like writing &lt;em&gt;something&lt;/em&gt;, but don&amp;rsquo;t know what, I scroll through my list. I see what catches my fancy - or what generates a different idea.&lt;/p&gt;&lt;h2 id=&#34;consequences&#34;&gt;Consequences &lt;a href=&#34;#consequences&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I still have some posts already written that I&amp;rsquo;ve been sitting on. I&amp;rsquo;ll probably space them out to publish a bit further than every month. If something comes up to fill the void, great - I&amp;rsquo;ll hit publish on it. Otherwise, I&amp;rsquo;ll wait for the time to drop the written post.&lt;/p&gt;&lt;p&gt;And when those run out? I&amp;rsquo;ll write when I feel like it.&lt;/p&gt;&lt;p&gt;In terms of building a brand, or an audience, I&amp;rsquo;m led to believe this is death. Consistency and guarantees help breed expectation and comfort. I&amp;rsquo;m breaking that guarantee to take the expectation off of me.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve never published something that I thought was bad because I thought I had to. But I&amp;rsquo;ve definitely written under a time schedule that was entirely my own doing. It&amp;rsquo;s less fun to do it when you have to.&lt;/p&gt;&lt;p&gt;And that&amp;rsquo;s why I do this - for fun. Sure, I do it because I hope it helps someone. Mostly I do it because it helps me. My audience primarily is me. Don&amp;rsquo;t get me wrong, I&amp;rsquo;m very happy that other people read this. But, I start writing because I want to get ideas out of my head, and/or because I want to be able to reference it in the future.&lt;/p&gt;&lt;p&gt;That&amp;rsquo;s why I make references or puns that maybe only I get. That&amp;rsquo;s why some of my technical posts are excuses to accompany a silly title I thought of. I don&amp;rsquo;t share drafts with others prior to publishing. Partly that&amp;rsquo;s because I don&amp;rsquo;t want to burden someone else with that responsibility. But also, my approach has been when it&amp;rsquo;s good enough for me, it&amp;rsquo;s good enough to publish.&lt;/p&gt;&lt;p&gt;There have certainly been second-order benefits of writing (or giving &lt;a href=&#34;https://kevinjmurphy.com/speaking/&#34;&gt;conference talks&lt;/a&gt;, or going on &lt;a href=&#34;https://kevinjmurphy.com/speaking/#podcasts&#34;&gt;podcasts&lt;/a&gt;). I&amp;rsquo;ve met people and made friends I wouldn&amp;rsquo;t have otherwise. My increased visibility made it more helpful when I had a &lt;a href=&#34;https://kevinjmurphy.com/posts/available-for-hire-2022/&#34;&gt;public job search&lt;/a&gt; in 2022. It&amp;rsquo;s a huge thrill when I see an article end up &lt;a href=&#34;https://kevinjmurphy.com/featured-writing/&#34;&gt;featured&lt;/a&gt; elsewhere. It&amp;rsquo;s one of the most meaningful career experiences I&amp;rsquo;ve had hearing how a post or talk helped someone. It&amp;rsquo;s a delight finding out that someone liked what I wrote. Or even simply that someone read it.&lt;/p&gt;&lt;p&gt;But, for now, I&amp;rsquo;m coming out of the content mines. I&amp;rsquo;ll keep delivering posts, but not with as much rigor. To keep the analogy going, I&amp;rsquo;ll instead visit alluvial deposits to sift for gems to publish on occasion. That&amp;rsquo;s one of those references that is just for me. This one is from one of my &lt;a href=&#34;https://kevinjmurphy.com/posts/browser-history/&#34;&gt;talks&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;what-it-means-for-you&#34;&gt;What it means for you &lt;a href=&#34;#what-it-means-for-you&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Probably not much? If you subscribe to my &lt;a href=&#34;https://newsletter.kevinjmurphy.com/&#34;&gt;newsletter&lt;/a&gt;, you&amp;rsquo;ll keep getting posts in your inbox when they&amp;rsquo;re written. If you follow me on &lt;a href=&#34;https://kevinjmurphy.com/about/#elsewhere-on-the-internet&#34;&gt;social media&lt;/a&gt;, you&amp;rsquo;ll keep getting posts in your feed when they&amp;rsquo;re written (unless any algorithm says otherwise). If you follow this site via &lt;a href=&#34;https://kevinjmurphy.com/index.xml&#34;&gt;RSS&lt;/a&gt;, thanks for keeping RSS alive - and you&amp;rsquo;ll keep getting posts in your feed when they&amp;rsquo;re written. If you come to this site when my posts are featured in other publications, you&amp;rsquo;ll never read this, but you&amp;rsquo;ll keep seeing them when they&amp;rsquo;re featured, if you click on them.&lt;/p&gt;&lt;p&gt;You just won&amp;rsquo;t see them as often. At least that&amp;rsquo;s the plan. Who knows - maybe this will make me realize I should actually push something weekly. Just kidding, I could barely make monthly work. Maybe I&amp;rsquo;ll have more time to catch up with you directly. Drop me a line however we&amp;rsquo;re connected. I&amp;rsquo;m happy to hear from you.&lt;/p&gt;&lt;h2 id=&#34;what-it-means-for-me&#34;&gt;What it means for me &lt;a href=&#34;#what-it-means-for-me&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This frees me from my self-imposed deadlines and anxiety about publishing something. It gives me a chance to dig into something that may be a little meatier, but may not be ready in time. It gives me the license to just&amp;hellip;not write something. I&amp;rsquo;m not entirely sure what it means for me. But I think it&amp;rsquo;ll be good for me (otherwise, why do it?). And if it&amp;rsquo;s not? We can all have a laugh about that time I made this self-aggrandizing pronouncement. Like someone slinking back to social media after announcing their exit. Hey, I&amp;rsquo;m sure it felt right to them at the time. This feels right to me now.&lt;/p&gt;&lt;p&gt;Though I&amp;rsquo;ve planned this for a while, announcing it now makes it public when I know I&amp;rsquo;ll have to step away from a few things to handle some unexpected family business. So, thanks past Kevin for writing this! It&amp;rsquo;s all ready to go, and all I had to do was add this paragraph and publish it.&lt;/p&gt;&lt;h2 id=&#34;what-slow-down&#34;&gt;What slow down? &lt;a href=&#34;#what-slow-down&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, there you go. Over 1,500 words about how I&amp;rsquo;m going to write words less often. Or, at least, feel forced to publish them less often. The irony is not lost on me. If you read this far, let me know. Clearly, we should catch up.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Blue Ridge Ruby Coverage Talk Video</title>
       <link>https://kevinjmurphy.com/posts/blue-ridge-coverage-video/</link>
       <pubDate>Wed, 03 Jan 2024 08:00:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/blue-ridge-coverage-video/</guid>
       <description>&lt;h2 id=&#34;blue-ridge-ruby-videos&#34;&gt;Blue Ridge Ruby Videos &lt;a href=&#34;#blue-ridge-ruby-videos&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I had a great time at &lt;a href=&#34;https://kevinjmurphy.com/posts/blue-ridge-ruby-2023-recap/&#34;&gt;Blue Ridge Ruby&lt;/a&gt; last year. This was the first time I shared &amp;ldquo;&lt;a href=&#34;https://kevinjmurphy.com/posts/coverage/&#34;&gt;Enough Coverage To Beat the Band&lt;/a&gt;&amp;rdquo; with an in-person audience. The first stop on my &amp;ldquo;Ruby&amp;rsquo;s Got You Covered&amp;rdquo; World Tour that didn&amp;rsquo;t stream from the office in my house.&lt;/p&gt;&lt;p&gt;You can now view &lt;a href=&#34;https://www.youtube.com/@BlueRidgeRuby/videos&#34;&gt;all the talks&lt;/a&gt; from the conference on YouTube! That includes &lt;a href=&#34;https://youtu.be/H4pBjWOMr_Y&#34;&gt;mine&lt;/a&gt;, which started off the events on day 1. Because I went first, they were still ironing out some kinks, like with the audio, but I hope you enjoy it nonetheless.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/H4pBjWOMr_Y?si=LuO1nsqTJRCMOOIk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
     </item>
   
     <item>
       <title>2023 Year-End Review</title>
       <link>https://kevinjmurphy.com/posts/2023-review/</link>
       <pubDate>Fri, 15 Dec 2023 20:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/2023-review/</guid>
       <description>&lt;p&gt;This isn&amp;rsquo;t a &amp;ldquo;real&amp;rdquo; post. This is a summary of all the things that made up my year in 2023 (almost all in a professional context). Thanks to all who were a part of it.&lt;/p&gt;&lt;h2 id=&#34;writing&#34;&gt;Writing &lt;a href=&#34;#writing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I published 11 articles about Ruby or software development in general this year. I started with changes to Ruby&amp;rsquo;s &lt;a href=&#34;https://kevinjmurphy.com/posts/evaluating-more-coverage-in-ruby-3-2/&#34;&gt;Coverage module&lt;/a&gt; in 3.2. My last post of the year covered what I saw at &lt;a href=&#34;https://kevinjmurphy.com/posts/rubyconf-2023-recap/&#34;&gt;RubyConf&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In between, I continued my &lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;Anyone Can Play Guitar Series&lt;/a&gt; and my &lt;a href=&#34;https://kevinjmurphy.com/posts/building-conference-talk-content/&#34;&gt;Conference Talk Preparation Series&lt;/a&gt;. I also published one-off articles about modifying &lt;a href=&#34;https://kevinjmurphy.com/posts/modify-frozen-hash/&#34;&gt;frozen hashes&lt;/a&gt;, &lt;a href=&#34;https://kevinjmurphy.com/posts/testing-inherited-behavior/&#34;&gt;testing inherited behavior&lt;/a&gt;, and more.&lt;/p&gt;&lt;p&gt;I continue sending my posts to &lt;a href=&#34;https://newsletter.kevinjmurphy.com/&#34;&gt;newslettersubscribers&lt;/a&gt;. You can still subscribe via &lt;a href=&#34;https://kevinjmurphy.com/index.xml&#34;&gt;RSS&lt;/a&gt; or try to keep up wherever I post on &lt;a href=&#34;https://kevinjmurphy.com/about/#elsewhere-on-the-internet&#34;&gt;social media&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;My most-read posts are those that end up in &lt;a href=&#34;https://kevinjmurphy.com/featured-writing/&#34;&gt;other newsletters&lt;/a&gt;. This year, my writing appeared in &lt;a href=&#34;https://rubyweekly.com/&#34;&gt;Ruby Weekly&lt;/a&gt; 6 times, &lt;a href=&#34;https://rubyradar.dev/&#34;&gt;Ruby Radar&lt;/a&gt; 3 times, &lt;a href=&#34;https://newsletter.shortruby.com/&#34;&gt;Short Ruby Newsletter&lt;/a&gt; 8 times, and &lt;a href=&#34;https://tinyletter.com/developeravocados/&#34;&gt;Developer Avacados Weekly&lt;/a&gt; once.&lt;/p&gt;&lt;p&gt;I intentionally cut down my publishing to once a month. That was always my minimum, but this year I forced myself to sit on anything I had written so I had a backlog. For example, the &lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;Anyone Can Play Guitar Series&lt;/a&gt; was written along with my RubyConf Mini 2022 talk. However, I held off on publishing it all at once. Instead, I dripped an article out each month.&lt;/p&gt;&lt;p&gt;That gave me freedom to write something new if I wanted, but if not, still have something to share every month. I liked not having the (self-imposed) monthly deadline to write. I&amp;rsquo;ll have more on that soon as I think about 2024.&lt;/p&gt;&lt;h2 id=&#34;speaking&#34;&gt;Speaking &lt;a href=&#34;#speaking&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I made it the entire year without submitting a single CFP. However, I did present one talk. I spoke at &lt;a href=&#34;https://kevinjmurphy.com/posts/blue-ridge-ruby-2023-recap/&#34;&gt;Blue Ridge Ruby&lt;/a&gt;, which was great. The &amp;ldquo;Ruby&amp;rsquo;s Got You Covered&amp;rdquo; tour finally had an in-person date.&lt;/p&gt;&lt;p&gt;That didn&amp;rsquo;t stop me from finding other ways to speak this year. I run an internal knowledge sharing session at work, which went through some iteration this year and where I presented regularly.&lt;/p&gt;&lt;p&gt;I helped conference speakers more this year. I was a coach for the RubyCentral CFP coaching sessions for both RailsConf and RubyConf. I was a speaker mentor at RubyConf for the first time. I helped friends prepare their proposals and talks when asked.&lt;/p&gt;&lt;p&gt;I also podcasted more this year. I was a guest on &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-on-rails-podcast-appearance/&#34;&gt;The Ruby on Rails Podcast&lt;/a&gt;. Then a co-host on &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-on-rails-podcast-cohost/&#34;&gt;The Ruby on Rails Podcast&lt;/a&gt;. Lastly, I joined &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-for-all-guest-2023/&#34;&gt;Ruby for All&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you have an event you&amp;rsquo;d like me to speak at, or a podcast you&amp;rsquo;d like me to guest on, let me know!&lt;/p&gt;&lt;h2 id=&#34;reading&#34;&gt;Reading &lt;a href=&#34;#reading&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was a technical reviewer for Noel Rappin and The Pragmatic Bookshelf again. Noel is bringing back the &amp;ldquo;Pickaxe book&amp;rdquo;. I reviewed &lt;a href=&#34;https://pragprog.com/titles/ruby5/programming-ruby-3-3-5th-edition/&#34;&gt;Programming Ruby 3.3&lt;/a&gt; this year. I can&amp;rsquo;t wait to see the final version.&lt;/p&gt;&lt;p&gt;I also reviewed Andrew Atkinson&amp;rsquo;s &lt;a href=&#34;https://pragprog.com/titles/aapsql/high-performance-postgresql-for-rails/&#34;&gt;High Performance PostgreSQL for Rails&lt;/a&gt;. It&amp;rsquo;s a helpful companion into the depths of Postgres functionality. If you&amp;rsquo;re looking to step out of the comfort of a Rails console and into a psql console, I recommend taking this with you.&lt;/p&gt;&lt;h2 id=&#34;employer&#34;&gt;Employer &lt;a href=&#34;#employer&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve been at &lt;a href=&#34;https://www.pubmark.com/&#34;&gt;Pubmark&lt;/a&gt; all year. I enjoy the work that I do, and the people I do it with. I&amp;rsquo;ve been comfortable in my work this year, which has been really helpful in my personal life. Maybe I&amp;rsquo;ll try to intentionally be a little less comfortable next year.&lt;/p&gt;&lt;h2 id=&#34;new-to-me-in-2023&#34;&gt;New (to me) in 2023 &lt;a href=&#34;#new-to-me-in-2023&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s where I take a break to step out of work and talk about things (mostly music) I got into this year.&lt;/p&gt;&lt;h3 id=&#34;history-books&#34;&gt;History Books &lt;a href=&#34;#history-books&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Gaslight Anthem got back together and released a new record this year, featuring a song with the one and only Bruce Springsteen. History Books as an album is a great fall-time listen with its moody textures.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/mXs1n2bL0oE?si=Dds7Lr1y_c3KFOEO&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;strong-female-character&#34;&gt;Strong Female Character &lt;a href=&#34;#strong-female-character&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Maybe you know Fern Brady from &lt;a href=&#34;https://kevinjmurphy.com/posts/2021-review/#taskmaster&#34;&gt;Taskmaster&lt;/a&gt;. Maybe you don&amp;rsquo;t (and if you don&amp;rsquo;t, you should). Her &lt;a href=&#34;https://www.bookbub.com/books/strong-female-character-by-fern-brady-2023-04-24&#34;&gt;memoir&lt;/a&gt; is the most impactful book I read this year.&lt;/p&gt;&lt;h3 id=&#34;jared-james-nichols&#34;&gt;Jared James Nichols &lt;a href=&#34;#jared-james-nichols&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Driving riffs, dynamic leads, and a simple guitar rig. I was first introduced to Jared this year, and I&amp;rsquo;m better for it.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/zNE4P_sW_Gw?si=l8pQqmI-qzjGq8nv&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;electric-cargo-bike&#34;&gt;Electric Cargo Bike &lt;a href=&#34;#electric-cargo-bike&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I joined the e-bike crew with my &lt;a href=&#34;https://bennobikes.com/e-bikes/boost/&#34;&gt;Benno Boost&lt;/a&gt; this year. It took a few rides to get used to the pedal assist, but now it feels natural. My daughter loves hopping in back and riding to the playground, library, or wherever else. Every morning, we take the bike to drop her off at kindergarten.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/benno_boost.jpg&#34;    alt=&#34;My Benno Boost Cargo Bike&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;toucher-and-rich-no-more&#34;&gt;Toucher and Rich (no more) &lt;a href=&#34;#toucher-and-rich-no-more&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Hey guys, hey! This one is a downer, but for the first time since 2006, I don&amp;rsquo;t have the &lt;a href=&#34;https://985thesportshub.com/shows/toucher-rich/&#34;&gt;Toucher and Rich&lt;/a&gt; radio program to listen to. I was a daily listener. I&amp;rsquo;m not surprised, but still disappointed, that the show split up. It ending without the chance for a proper good-bye was particularly jarring. I&amp;rsquo;m hoping for good things for everyone previously involved with the show.&lt;/p&gt;&lt;h2 id=&#34;thank-you&#34;&gt;Thank You &lt;a href=&#34;#thank-you&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks for reading, watching, or listening. I hope your 2024 is better than 2023.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Site Search Now Available</title>
       <link>https://kevinjmurphy.com/posts/search-functionality/</link>
       <pubDate>Sun, 10 Dec 2023 07:30:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/search-functionality/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m no stranger to &lt;a href=&#34;https://kevinjmurphy.com/posts/searching-for-a-reason/&#34;&gt;search&lt;/a&gt;. Give me &lt;a href=&#34;https://kevinjmurphy.com/posts/browser-history/&#34;&gt;25 minutes&lt;/a&gt; and I&amp;rsquo;ll tell you my thoughts on how and why we search for things. All that said, one thing you couldn&amp;rsquo;t do on this site for a long time was search. I&amp;rsquo;m proud to announce on behalf of the entire team responsible for this site (me) that an innovative new feature is now available: &lt;a href=&#34;https://kevinjmurphy.com/search/&#34;&gt;search&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Any questions?&lt;/p&gt;&lt;h2 id=&#34;what-took-so-long&#34;&gt;What took so long? &lt;a href=&#34;#what-took-so-long&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Two main reasons: self-esteem and laziness. I don&amp;rsquo;t think anyone else will use this functionality. I don&amp;rsquo;t think people will read &lt;em&gt;this&lt;/em&gt;. Many times, I write for myself. So I want to reference my own posts on occasion. And for myself, I know what I&amp;rsquo;m looking for and when I published it in comparison to other posts. So I&amp;rsquo;ve just been paginating through my results until I find the post.&lt;/p&gt;&lt;p&gt;The other piece is that I don&amp;rsquo;t want to spend a lot of time working on my website design/layout/features. That&amp;rsquo;s time I could be writing for my website, or doing literally anything else. My site is intentionally in Hugo, because while I&amp;rsquo;ve written Golang, I&amp;rsquo;m not apt to change code in there. The templating engine is easy enough to do what I want, but I&amp;rsquo;ve long resisted the urge to revamp the theme I chose when starting the site.&lt;/p&gt;&lt;h2 id=&#34;why-now&#34;&gt;Why now? &lt;a href=&#34;#why-now&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was inspired by Justin Searls, who &lt;a href=&#34;https://justin.searls.co/links/2023-11-29-shout-out-to-pagefind-static-search/&#34;&gt;recently wrote&lt;/a&gt; about adding search to his site. If Justin is actually trumpeting some tech and not sharing cursed bugs with it, then it&amp;rsquo;s worth my attention.&lt;/p&gt;&lt;p&gt;And as a side-benefit, maybe I wouldn&amp;rsquo;t have to page through my own site as often.&lt;/p&gt;&lt;h2 id=&#34;how-did-the-implementation-process-go&#34;&gt;How did the implementation process go? &lt;a href=&#34;#how-did-the-implementation-process-go&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Just like Justin, I&amp;rsquo;m using &lt;a href=&#34;https://pagefind.app/&#34;&gt;Pagefind&lt;/a&gt;. The process of implementing the index was really straightforward. I followed their &lt;a href=&#34;https://pagefind.app/docs/&#34;&gt;Quick Start guide&lt;/a&gt; and the indexing was done.&lt;/p&gt;&lt;p&gt;With a one-line change to my deploy script, I was set to have this indexing process update for each change to my site. Great work Pagefind!&lt;/p&gt;&lt;p&gt;The part that took time was my inability to know how my own site works and how to make it look nice. My theme has a light and dark mode. After adding Pagefind, I had to wrap up the initial implementation by turning off dark mode, otherwise the Pagefind results were illegible. This felt like a fine trade-off on a Friday night, as I imagine it would only affect me - and I was going to sleep.&lt;/p&gt;&lt;p&gt;The Pagefind docs clearly suggest how to &lt;a href=&#34;https://pagefind.app/docs/ui-usage/#customising-the-styles&#34;&gt;change the Pagefind styles&lt;/a&gt;, even including recommendations for a dark mode. Well done, Pagefind!&lt;/p&gt;&lt;p&gt;The trouble was I needed to understand how my site even implements dark mode. Through this, I learned about CSS&amp;rsquo;s &lt;code&gt;prefers-color-scheme&lt;/code&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&#34;&gt;feature&lt;/a&gt;. I told you, I don&amp;rsquo;t really want to know implementation details in my site so I&amp;rsquo;m not tempted to change them. I also revisited CSS &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&#34;&gt;custom properties&lt;/a&gt; and styling input &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder&#34;&gt;placeholder values&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Did you know Firefox&amp;rsquo;s inspector has the ability to &lt;a href=&#34;https://www.linuxadictos.com/en/firefox-87-adds-an-option-to-its-inspector-that-allows-us-to-switch-between-light-and-dark-mode-if-the-web-allows-it.html&#34;&gt;toggle light mode and dark mode&lt;/a&gt; for a site? I didn&amp;rsquo;t, but now I do!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/firefox_inspector_light_dark.png&#34;    alt=&#34;The Firefox inspector with arrows pointing to how to change to light and dark mode&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;how-do-you-feel-now&#34;&gt;How do you feel now? &lt;a href=&#34;#how-do-you-feel-now&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m satisfied. I can &lt;a href=&#34;https://kevinjmurphy.com/search/&#34;&gt;search&lt;/a&gt; my site. All with very little effort on my behalf. Again, thanks Pagefind! And Justin for the suggestion. I could dig into &lt;a href=&#34;https://pagefind.app/docs/weighting/&#34;&gt;modifying&lt;/a&gt; my index, or &lt;a href=&#34;https://pagefind.app/docs/sorts/&#34;&gt;sorting&lt;/a&gt; results, but I&amp;rsquo;m going to stick with the default experience for now. Those incremental improvements wouldn&amp;rsquo;t have the value add compared to what this already provides. Before there was no search, and now there is!&lt;/p&gt;&lt;p&gt;Is it my greatest work? Something I would put into production at work? Not the way I wrote it. This is not a reflection on Pagefind. I &lt;em&gt;would&lt;/em&gt; recommend that for a static site. However, I&amp;rsquo;ve committed some &lt;a href=&#34;https://github.com/kevin-j-m/kjm-blog/commit/a36f1cbcc6b665ce69c281addd8e31a90fb56b50&#34;&gt;terrible atrocities&lt;/a&gt; to HTML and CSS to fit it into my site&amp;rsquo;s theme.&lt;/p&gt;&lt;p&gt;But, I did that styling while &lt;a href=&#34;https://www.netflix.com/TITLE/81128389&#34;&gt;Emily&amp;rsquo;s Wonder Lab&lt;/a&gt; was playing on TV. And they were making a tornado. So I wanted to wrap this up and watch it with my daughter. So, it&amp;rsquo;s good enough for me, for now. I hope you enjoy it too.&lt;/p&gt;&lt;p&gt;Happy &lt;a href=&#34;https://kevinjmurphy.com/search/&#34;&gt;searching&lt;/a&gt;!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>RubyConf 2023 Recap</title>
       <link>https://kevinjmurphy.com/posts/rubyconf-2023-recap/</link>
       <pubDate>Fri, 17 Nov 2023 21:00:24 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubyconf-2023-recap/</guid>
       <description>&lt;h2 id=&#34;rubyconf-2023&#34;&gt;RubyConf 2023 &lt;a href=&#34;#rubyconf-2023&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RubyConf recently wrapped up in San Diego, California. This post is meant to highlight the great work from all involved. I hope you&amp;rsquo;ll seek out the full videos of all the sessions that interest you once they are available. Unfortunately, I couldn&amp;rsquo;t be everywhere, so this covers what I saw.&lt;/p&gt;&lt;h2 id=&#34;preparing&#34;&gt;Preparing &lt;a href=&#34;#preparing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;d prefer, you can &lt;a href=&#34;#community-day&#34;&gt;skip&lt;/a&gt; right to my commentary on the start of the conference.&lt;/p&gt;&lt;p&gt;This is a weird brag, but this is the first conference I&amp;rsquo;ve attended in a long time as an attendee. It&amp;rsquo;s been a while since I haven&amp;rsquo;t been a speaker or on the speaker waiting list. Being a wait-listed speaker means you prep and have a talk ready. You only get to give it if you need to substitute for another speaker on short notice.&lt;/p&gt;&lt;p&gt;This left me with a lot more free time during the conference. More importantly, I had more time before the conference. I still had the &amp;ldquo;conference season&amp;rdquo; itch though. So I channeled that energy in a few different directions.&lt;/p&gt;&lt;h3 id=&#34;cfp-coaching&#34;&gt;CFP Coaching &lt;a href=&#34;#cfp-coaching&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;First, just as I did for RailsConf, I joined Ruby Central members for the CFP coaching sessions. We helped others with their proposals in small groups. This was a great opportunity to meet with prospective speakers and workshop ideas to submit for the conference. I&amp;rsquo;m glad that Ruby Central has started organizing these events. I hope they continue.&lt;/p&gt;&lt;h3 id=&#34;podcasting-about-rubyconf&#34;&gt;Podcasting about RubyConf &lt;a href=&#34;#podcasting-about-rubyconf&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;After the CFP process wound down, I joined Brittany Martin as a temporary &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-on-rails-podcast-cohost/&#34;&gt;co-host&lt;/a&gt; of The Ruby On Rails podcast. We talked with Allison McMillan and Chelsea Kaufman about the plan for RubyConf 2023. I hope that it helped get people excited about the conference. Even better if it helped convince someone to come after listening.&lt;/p&gt;&lt;p&gt;I also joined Julie and Andrew on the &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-for-all-guest-2023/&#34;&gt;Ruby for All&lt;/a&gt; podcast. The discussion centered around conference speaking.&lt;/p&gt;&lt;h3 id=&#34;writing&#34;&gt;Writing &lt;a href=&#34;#writing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I expanded on my blog post from last year where I shared &lt;a href=&#34;https://kevinjmurphy.com/posts/sharing-past-conference-proposals/&#34;&gt;past proposals&lt;/a&gt;. I turned it into a series on preparing for conferences. I wrote about &lt;a href=&#34;https://kevinjmurphy.com/posts/building-conference-talk-content/&#34;&gt;my process&lt;/a&gt; for turning an accepted proposal into a talk. I followed that up with &lt;a href=&#34;https://kevinjmurphy.com/posts/preparing-conference-talk-delivery/&#34;&gt;how I practice&lt;/a&gt; and prepare for the stage.&lt;/p&gt;&lt;h3 id=&#34;helping-speakers&#34;&gt;Helping Speakers &lt;a href=&#34;#helping-speakers&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Lastly, I had more time to help friends who were speaking with their talk preparation. Notably, I was a speaker mentor for the first time. I&amp;rsquo;ve been hesitant to do it in the past when I&amp;rsquo;ve had a talk of my own to prepare. I was really happy to have the time to devote to this. I paired with &lt;a href=&#34;https://ruby.social/@paulreece_&#34;&gt;Paul Reece&lt;/a&gt;. Paul gave a great talk about &lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/530118&#34;&gt;Ruby Polars&lt;/a&gt;. Paul was very prepared and definitely made the process easy for me. It was super fun to see the evolution of the talk over time from an outsider&amp;rsquo;s perspective.&lt;/p&gt;&lt;h2 id=&#34;community-day&#34;&gt;Community Day &lt;a href=&#34;#community-day&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Even after talking about this on &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-on-rails-podcast-cohost/&#34;&gt;The Ruby on Rails podcast&lt;/a&gt;, I&amp;rsquo;ll admit that I was still pretty unsure how this would all go. I didn&amp;rsquo;t attend any of the workshops as I wanted to see the implementation of the hack space events.&lt;/p&gt;&lt;p&gt;After an introduction from Allison McMillan and Chelsea Kaufman, the group separated into workshops and the hack space. I spent my day in the hack space. In the morning I spent time at the Hanami table. I&amp;rsquo;ll be honest, I didn&amp;rsquo;t do much of any Hanami work, but I had a great conversation there.&lt;/p&gt;&lt;p&gt;After lunch, I parked at the Ruby LSP table. I worked with &lt;a href=&#34;https://codewithjulie.com/&#34;&gt;Julie&lt;/a&gt; and &lt;a href=&#34;https://www.drbragg.dev/&#34;&gt;Drew&lt;/a&gt; on &lt;a href=&#34;https://github.com/Shopify/ruby-lsp/pull/1181&#34;&gt;HEREDOC endings&lt;/a&gt;. We also found an &lt;a href=&#34;https://github.com/Shopify/ruby-lsp/issues/1182&#34;&gt;issue&lt;/a&gt; that we spent some time digging into, but ran out of time before we had a solution. It was fun spelunking through the code with friends. &lt;a href=&#34;https://ufuk.dev/&#34;&gt;Ufuk&lt;/a&gt; joined us in looking at the cursor indentation issue. His sage wisdom helped us navigate through an unfamiliar codebase.&lt;/p&gt;&lt;p&gt;I enjoyed my time at Community Day. For me, I&amp;rsquo;m not sure if it&amp;rsquo;s worth removing a full day of talks. I&amp;rsquo;m a person that really enjoys talks at conferences. I&amp;rsquo;m a person who will gladly join talks in person. But, I have a difficult time committing to watching recorded talks after. I&amp;rsquo;m also biased, because I&amp;rsquo;m a potential speaker (I did not submit to RubyConf this year). One fewer day and fewer tracks means less opportunity for people to have an accepted talk.&lt;/p&gt;&lt;p&gt;That said, I talked to a handful of people who organized sessions after. And the vibe I got from them was that it was a positive time. They were happy to work with the community directly, in-person, on their project. They liked meeting new people interested in helping and giving them a starting push. They enjoyed the experience and what it meant for their project.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m not sure what the right mix is here. At the least, I think moving Community Day to later in the conference makes sense. That way the organizers can communicate in person with attendees on expectations. Any talks about subjects that will be at Community Day can turn into a call to action to join the hack space.&lt;/p&gt;&lt;p&gt;Could there be a hack space throughout the conference that people could  join? That would have a similar cost that workshops have in the past, where people need to miss other sessions to join. It would mean having another room at the conference that Ruby Central needs to rent. Maybe having it spread out throughout the conference would mean a smaller room? It would be a bit like the hallway track, but structured towards particular goals.&lt;/p&gt;&lt;p&gt;Like I said, unfortunately, I have no solid answers here. And I recognize that the way I enjoy conferences is different from many others. I heard resounding praise for Community Day at the conference!&lt;/p&gt;&lt;p&gt;I do like that Ruby Central is responding to feedback and trying out new experiences. I&amp;rsquo;m interested to hear a retrospective from them. How do they feel about Community Day and what form(s) it might take going forward?&lt;/p&gt;&lt;h2 id=&#34;day-2&#34;&gt;Day 2 &lt;a href=&#34;#day-2&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;opening-keynote&#34;&gt;Opening Keynote &lt;a href=&#34;#opening-keynote&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/560574&#34;&gt;Yukihiro &amp;ldquo;Matz&amp;rdquo; Matsumoto&lt;/a&gt; started the conference after the opening remarks. This was a pre-recorded message. He talked about learning from the history of language design and evolution, to inform the future of Ruby.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf_2023_matz.jpg&#34;    alt=&#34;Matz at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;which-time-is-it&#34;&gt;Which Time Is It? &lt;a href=&#34;#which-time-is-it&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/531537&#34;&gt;Joël Quenneville&lt;/a&gt; started the talk sessions. He provided a distinction between looking at a moment in time versus a duration of time. He cautions to think through what types of time can interact with each other (the way that you want or expect). Consider the operator you&amp;rsquo;re using and what it means. Catch the full session to learn more about why you can&amp;rsquo;t add two time instances together.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_joel_stage.jpg&#34;    alt=&#34;Joël Quenneville at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;get-your-data-prod-ready-fast-with-ruby-polars&#34;&gt;Get your Data prod ready, Fast, with Ruby Polars! &lt;a href=&#34;#get-your-data-prod-ready-fast-with-ruby-polars&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/530118&#34;&gt;Paul Reece&lt;/a&gt; gave an introduction to the Polars library. This started with an introduction to the Series and Data Frame data structures. Paul then walked through data cleaning operations available in Polars. He shared a &lt;a href=&#34;https://github.com/paulreece/polars_resources&#34;&gt;repository&lt;/a&gt; of resources and code samples at the end of his session.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_paul_stage.jpg&#34;    alt=&#34;Paul Reece at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;ruby-content-creators&#34;&gt;Ruby Content Creators &lt;a href=&#34;#ruby-content-creators&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;During Community Day, Peter Cai asked me to participate in this &lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/186fce40-218a-4d5b-a3f5-01d133b1f7c5&#34;&gt;open space session&lt;/a&gt;. I sat at the written content table with other bloggers and authors. There were other tables for podcasts, live streaming, and pre-recorded videos. The written content table talked through our processes. We lamented over the difficulties in getting feedback. We shared how to build sustainable writing habits.&lt;/p&gt;&lt;h3 id=&#34;the-future-of-understanding-ruby-code&#34;&gt;The Future of Understanding Ruby Code &lt;a href=&#34;#the-future-of-understanding-ruby-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/531482&#34;&gt;Kevin Newton&lt;/a&gt; talked about &lt;a href=&#34;https://github.com/ruby/prism&#34;&gt;Prism&lt;/a&gt;, a new Ruby parser. He discussed the challenges that come with parsing Ruby. He shared what&amp;rsquo;s next, and what we can and should expect from our Ruby tooling in the future. He ended with an impassioned discussion about building a contributor community around a single tool.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_kevin_newton.jpg&#34;    alt=&#34;Kevin Newton at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;the-unbreakable-code-whose-breaking-won-wwii&#34;&gt;The Unbreakable Code Whose Breaking Won WWII &lt;a href=&#34;#the-unbreakable-code-whose-breaking-won-wwii&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/529111&#34;&gt;Aji Slater&lt;/a&gt; took us back to Bletchley Park to model an Enigma machine with object-oriented principles. This session features monumentally brilliant illustrations and fantastic storytelling.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_aji.jpg&#34;    alt=&#34;Aji Slater at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;closing-keynote&#34;&gt;Closing Keynote &lt;a href=&#34;#closing-keynote&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/560579&#34;&gt;Sharon Steed&lt;/a&gt; ended the first day of talks with a keynote on actionable empathy. We heard about its relationship with vulnerability and how trust is the bedrock to empathy.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_sharon.jpg&#34;    alt=&#34;Sharon Steed at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;day-3&#34;&gt;Day 3 &lt;a href=&#34;#day-3&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;opening-keynote-1&#34;&gt;Opening Keynote &lt;a href=&#34;#opening-keynote-1&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/560580&#34;&gt;Saron Yitbarek&lt;/a&gt; opened the last day of RubyConf discussing our superpower. Loving what we do is an underrated source of competitive advantage for us to wield.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_saron.jpg&#34;    alt=&#34;Saron Yitbarek at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;meet-the-pragmatic-bookshelf&#34;&gt;Meet the Pragmatic Bookshelf &lt;a href=&#34;#meet-the-pragmatic-bookshelf&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/560583&#34;&gt;Noel Rappin&lt;/a&gt; joined Dave Thomas and Dave Copeland for a panel discussion on writing. This particularly focused on books with Pragmatic Programmers. We heard about the entire process, from proposal to publication.&lt;/p&gt;&lt;p&gt;One note I found interesting was how the voice of their books changes over time. It intentionally starts with an authoritative tone, telling the reader what to do. As the book progresses and the reader is more familiar with the domain, the tone shifts. Now the tone is more collaborative. The author consults with the reader and uses &amp;ldquo;we&amp;rdquo; more.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_prag_prog.jpg&#34;    alt=&#34;Noel Rappin, Dave Thomas, and Dave Copeland at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;the-secret-ingredient-how-to-understand-and-resolve-just-about-any-flaky-test&#34;&gt;The Secret Ingredient: How To Understand and Resolve Just About Any Flaky Test &lt;a href=&#34;#the-secret-ingredient-how-to-understand-and-resolve-just-about-any-flaky-test&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/527141&#34;&gt;Alan Ridlehoover&lt;/a&gt; walked through a progression of steps to resolve tests failing due to non-determinism, order dependence, and race conditions. With an eye to keeping specs to have one, and only one, reason to exist, he proposes tools and methodologies to trace down these test failures.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_alan.jpg&#34;    alt=&#34;Alan Ridlehoover at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;livin-la-vida-hanami&#34;&gt;Livin’ La Vida Hanami &lt;a href=&#34;#livin-la-vida-hanami&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/518035&#34;&gt;Tim Riley&lt;/a&gt; introduced Hanami as the everything framework. The framework is not our app, but enables our application logic through its layers. While it has support for web essentials, you can choose to not include them and still benefit from the underlying framework benefits.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_tim_stage.jpg&#34;    alt=&#34;Tim Riley at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;open-source-ruby&#34;&gt;Open Source Ruby &lt;a href=&#34;#open-source-ruby&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In this &lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/decd439d-f9ec-45be-b016-49ea2f99cd3c&#34;&gt;open space session&lt;/a&gt; I sat at the Sidekiq table. Mike Perham held an informal chat. We discussed open source sustainability and succession planning. There were tables representing other projects, but I&amp;rsquo;m not sure what they covered.&lt;/p&gt;&lt;h3 id=&#34;closing&#34;&gt;Closing &lt;a href=&#34;#closing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/3298cf7c-e3ad-4ade-bb53-61ae24e97b2c&#34;&gt;Adarsh Pandit&lt;/a&gt; wrapped up RubyConf. We learned that RubyConf 2024 will be in Chicago in the fall. That&amp;rsquo;s following a visit to Detroit in the spring for RailsConf.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf2023_adarsh.jpg&#34;    alt=&#34;Adarsh Pandit at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;appreciation&#34;&gt;Appreciation &lt;a href=&#34;#appreciation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thank you to my employer, &lt;a href=&#34;https://www.pubmark.com/&#34;&gt;Pubmark&lt;/a&gt;, for supporting my attendance this year.&lt;/p&gt;&lt;p&gt;Thank you &lt;a href=&#34;https://rubycentral.org&#34;&gt;Ruby Central&lt;/a&gt; for your work to organize these events and supporting the Ruby community all year round.&lt;/p&gt;&lt;p&gt;Thank you to the Program Committee, Scholarship Committee, volunteers, and venue staff for bringing this conference to life.&lt;/p&gt;&lt;p&gt;Thank you sponsors for supporting the Ruby community and making it possible for us to come together.&lt;/p&gt;&lt;p&gt;Thank you Jonan Scheffler and Marty Haught for your years of service and dedication on the Ruby Central board.&lt;/p&gt;&lt;p&gt;Thanks to all the &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-friends-rubyconf-2023/&#34;&gt;#RubyFriends&lt;/a&gt;, old and new, that I met in San Diego.&lt;/p&gt;&lt;p&gt;Thank you for reading to the end. Maybe we met at RubyConf 2023. Maybe we didn&amp;rsquo;t. I hope to see you in 2024. I hear Chicago is lovely in November.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ruby Friends at RubyConf 2023</title>
       <link>https://kevinjmurphy.com/posts/ruby-friends-rubyconf-2023/</link>
       <pubDate>Wed, 15 Nov 2023 19:00:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-friends-rubyconf-2023/</guid>
       <description>&lt;h2 id=&#34;ruby-friends-at-rubyconf-2023&#34;&gt;Ruby Friends at RubyConf 2023 &lt;a href=&#34;#ruby-friends-at-rubyconf-2023&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RubyConf 2023 just wrapped up. It was a pleasure meeting everyone and learning from you all. I took far too few photos, and mostly remembered to take pictures with people on the last day. With no further ado, here are the #RubyFriends pictures I took in San Diego.&lt;/p&gt;&lt;p&gt;In any pictures that feature more than one other person, I&amp;rsquo;ll list them from left to right as they appear in the photo. Also, I&amp;rsquo;m terrible at taking pictures. Sorry everyone.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf_2023_Joel.jpg&#34;    alt=&#34;Joël Quenneville and me at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;p&gt;Joël Quenneville gave a &lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/531537&#34;&gt;great talk&lt;/a&gt; right after the keynote to start the conference talk sessions. It&amp;rsquo;s so great to see him. More often than not we have to travel across the country to do so.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf_2023_Dan_Paul.jpg&#34;    alt=&#34;Daniel Magliola, Paul Reece, and me at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&#34;https://ruby.social/@dmagliola&#34;&gt;Daniel Magliola&lt;/a&gt; is a friend I&amp;rsquo;m so delighted to see at conferences. Whether he&amp;rsquo;s speaking or attending, conferences are better when he&amp;rsquo;s there.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://ruby.social/@paulreece_&#34;&gt;Paul Reece&lt;/a&gt; shared a &lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/530118&#34;&gt;fantastic talk&lt;/a&gt; about Ruby Polars. I had the pleasure to see the talk in advance as it was being built. It was a real treat to witness the evolution.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf_2023_Ufuk_Drew.jpg&#34;    alt=&#34;Me, Ufuk Kayserilioglu, and Drew Bragg at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&#34;https://ruby.social/@ufuk&#34;&gt;Ufuk Kayserilioglu&lt;/a&gt; is a pillar of our community. I&amp;rsquo;m so pleased to see that he was recently named to the Ruby Central board. I&amp;rsquo;m excited to see what the organization will accomplish with his stewardship. Ufuk gives the most tremendous feedback and is so engaging in conversation.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://ruby.social/@DRBragg&#34;&gt;Drew Bragg&lt;/a&gt; is a podcaster, game show host, and terrific human being. I&amp;rsquo;m extremely fortunate to ride the coattails of his conference energy.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf_2023_Noel.jpg&#34;    alt=&#34;Noel Rappin and me at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&#34;https://ruby.social/@noelrap&#34;&gt;Noel Rappin&lt;/a&gt; is an author and personal inspiration. I love reading his words and was so glad to talk with him in person.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/rubyconf_2023_Tim.jpg&#34;    alt=&#34;Tim Riley and me at RubyConf 2023&#34;&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&#34;https://ruby.social/@timriley&#34;&gt;Tim Riley&lt;/a&gt; is on the core team at Hanami, dry-rb, and rom-rb. He &lt;a href=&#34;https://rubyconf-2023.sessionize.com/session/518035&#34;&gt;spoke&lt;/a&gt; about Hanami and led a Community Day table working on Hanami. It was a real treat to meet and explore San Diego a bit with him this week.&lt;/p&gt;&lt;h2 id=&#34;until-next-time-ruby-friends&#34;&gt;Until Next Time Ruby Friends &lt;a href=&#34;#until-next-time-ruby-friends&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks to all the #RubyFriends I met at RubyConf 2023, whether we got a picture or not. I hope everyone had a great conference.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ruby for All Podcast Guest Appearance</title>
       <link>https://kevinjmurphy.com/posts/ruby-for-all-guest-2023/</link>
       <pubDate>Thu, 02 Nov 2023 20:00:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-for-all-guest-2023/</guid>
       <description>&lt;h2 id=&#34;ruby-for-all-podcast&#34;&gt;Ruby for All Podcast &lt;a href=&#34;#ruby-for-all-podcast&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was a guest on &lt;a href=&#34;https://www.rubyforall.com/s2/50&#34;&gt;episode 50&lt;/a&gt; of the Ruby forAll podcast. I joined Julie and Andrew to talk about conference speaking (and attending).&lt;/p&gt;&lt;p&gt;From the episode description:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;In this episode of Ruby for All, join Andrew and Julie as they welcome Kevin Murphy, a software developer at Pubmark, to discuss the fascinating world of speaking at conferences.  Kevin shares his journey as a speaker and describes his experiences at conferences. The conversation dives into the nuances of submitting conference talk proposals, the challenges in the review process, and the importance of feedback.  They also explore of the dynamics of attending and presenting at conferences, both virtually and in person, and they share some valuable advice for those interested in sharing their expertise through speaking engagements. Don’t miss this insightful and supportive discussion about the Ruby community and the art of conference talks.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Give it a &lt;a href=&#34;https://www.rubyforall.com/s2/50&#34;&gt;listen&lt;/a&gt; and let me know what youthink!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Preparing Conference Talk Delivery</title>
       <link>https://kevinjmurphy.com/posts/preparing-conference-talk-delivery/</link>
       <pubDate>Sat, 14 Oct 2023 18:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/preparing-conference-talk-delivery/</guid>
       <description>&lt;h2 id=&#34;conference-talk-preparation-series&#34;&gt;Conference Talk Preparation Series &lt;a href=&#34;#conference-talk-preparation-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/sharing-past-conference-proposals/&#34;&gt;Sharing Past Conference Proposals&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/building-conference-talk-content/&#34;&gt;Building Conference Talk Content&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Preparing Conference Talk Delivery&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A conference accepted my proposal and I&amp;rsquo;ve built a slide deck. I still have a lot to do before hitting the stage!&lt;/p&gt;&lt;h2 id=&#34;practice&#34;&gt;Practice &lt;a href=&#34;#practice&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At this point, I have a continual routine to get more familiar and comfortable with the material. It&amp;rsquo;s also an opportunity to exercise the content on a continuous basis. The editing process isn&amp;rsquo;t over here. However, it&amp;rsquo;s more constrained and specific. I may be toying with the layout of a specific slide. Fighting with exactly the right word to describe a concept. Determining how to best highlight one aspect of what I&amp;rsquo;m saying.&lt;/p&gt;&lt;p&gt;I get the hint to make those targeted edits through practicing. I close the door to my office, stand up, and deliver the talk to an empty room. No more than once a day, and not every day, starting about a month out from the conference. And I time it, just like before.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/Anyone_Can_Play_Guitar_Practice_Timing.png&#34;    alt=&#34;A spreadsheet keeping track of how long sections of my presentation are taking when practicing.&#34;&gt;&lt;/figure&gt;&lt;p&gt;I keep track of those times. That helps me reflect on knowing if I&amp;rsquo;m struggling to get through one section and need to tighten it up. It helps me know if I&amp;rsquo;m giving each section its appropriate focus. And looking back over the last few practices, it helps me see where I&amp;rsquo;ve gotten into a comfortable groove.&lt;/p&gt;&lt;p&gt;Each practice will have a bit of variation, because I don&amp;rsquo;t follow an exact script. Over time, I&amp;rsquo;ll see that I&amp;rsquo;m being more consistent in how long each area is taking (plus/minus 10 seconds or so per section). That tells me that I&amp;rsquo;m able to repeatedly deliver.&lt;/p&gt;&lt;p&gt;The stage &lt;em&gt;is&lt;/em&gt; a different experience, but this preparation lets me draw from all the practice. It&amp;rsquo;s not like I black out or go on auto-pilot mode, but I&amp;rsquo;m able to leverage all that work on stage. No one else in the audience knows what I&amp;rsquo;m going to say next as well as me, and that gives me comfort. People may be smarter than me. People may be more familiar with the topic. No one is going to say it the same way as I am right now, and that gives me confidence.&lt;/p&gt;&lt;p&gt;For the talk from the spreadsheet above, I logged 20 practice sessions.&lt;/p&gt;&lt;h2 id=&#34;practice-1&#34;&gt;Practice &lt;a href=&#34;#practice-1&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I find other places to practice separated from my slides. When I would commute to work, I would practice (in my head) on the train ride in or back from work. I practice the full talk or sections while on walks. Some times, I run through ideas for my intro or conclusion as I&amp;rsquo;m drifting off to sleep.&lt;/p&gt;&lt;p&gt;I tell myself I want to be able to deliver my talk without the help of the slides. In case the power goes out and I need to entertain everyone in the dark, or outside, I can. Note that almost happened at RubyConf Mini 2022, when my laptop &lt;a href=&#34;https://kevinjmurphy.com/posts/rubyconf-mini-2022-recap/#appreciation&#34;&gt;wouldn&amp;rsquo;t connect&lt;/a&gt; to the projector.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When I’m practicing, I tell myself I need to prepare enough to give my talk without any slides or notes. I practice on walks, away from my material. I practice looking the other direction (checking occasionally to make sure I’m clicking to the right slide). In those moments on stage, I was wondering if my preparation would become necessary. Would I have to give my full talk without any slides?&lt;/p&gt;&lt;p&gt;Thanks Drew Bragg for unflinchingly handing me his laptop from the front row, letting me git clone the repo that has my slides on it. I ran the presentation from his computer, having never used it before.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Even without that dramatic scenario coming to light, practicing without slides helps me. I&amp;rsquo;m not tied to my slides. I don&amp;rsquo;t need to read them. I can focus on the audience.&lt;/p&gt;&lt;h2 id=&#34;practice-2&#34;&gt;Practice &lt;a href=&#34;#practice-2&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I find a real audience before the conference to practice with. Most times, that ends up being at work. There are also local meetup groups I could request to speak at. I could gather a group of friends.&lt;/p&gt;&lt;p&gt;My main goal is to give me the experience of delivering the talk for other people. It can help me know what beats might get laughs (rare, but I try). I might be able to see where people are more or less interested. I&amp;rsquo;ll admit, that&amp;rsquo;s hard for me to focus on while I&amp;rsquo;m also delivering the talk. It&amp;rsquo;s to help &lt;em&gt;me&lt;/em&gt; get more comfortable.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s also a natural place for feedback, if you want it. Feedback can be very helpful &lt;strong&gt;and&lt;/strong&gt; very dangerous. You&amp;rsquo;re putting yourself out there and are being vulnerable. You may not like, or want, the feedback. That&amp;rsquo;s something you need to decide for yourself. I &lt;em&gt;consider&lt;/em&gt; the feedback I get, but I do not &lt;strong&gt;incorporate&lt;/strong&gt; all of it. That doesn&amp;rsquo;t mean it&amp;rsquo;s bad - it may be objectively right. But if I can&amp;rsquo;t find a way to incorporate it in a way that makes me comfortable on stage, I ignore it. If it takes away from my goals of what I want the presentation to deliver, I leave it be. I&amp;rsquo;ve given it the time and consideration, and thoughtfully chosen to do something else. That&amp;rsquo;s &lt;strong&gt;hard&lt;/strong&gt; to do, but I&amp;rsquo;ve gotten better at it, as I&amp;rsquo;ve gotten more comfortable knowing what my style is on stage.&lt;/p&gt;&lt;h2 id=&#34;final-preparation&#34;&gt;Final Preparation &lt;a href=&#34;#final-preparation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I store my slides in a GitHub repo, even while I&amp;rsquo;m developing it. That repo is public, which has the added benefit of being shareable, should I need to use another computer. I prefer using Keynote to any online tools, but that does limit the ease of access. Something new, given my RubyConf Mini issue, is to have a buddy with the slide deck on their laptop PRIOR. That may be a conference organizer. That way it&amp;rsquo;s already set up, and I can confirm it looks exactly how I want. I use custom fonts and colors, and I want to make sure those get installed and are available too.&lt;/p&gt;&lt;p&gt;Going back to RubyConf Mini, I was very relieved to use Drew&amp;rsquo;s computer, but it wasn&amp;rsquo;t the experience I wanted it to be. We were installing it live on stage. I didn&amp;rsquo;t have the time (or foresight) to install the fonts and colors I built the deck with. It&amp;rsquo;s a touch that only I could have noticed, and didn&amp;rsquo;t take away too much (I hope) from the experience. But it was still frustrating. It wasn&amp;rsquo;t the exact visual presentation I had spent the time preparing for the audience.&lt;/p&gt;&lt;p&gt;I build a page on my website about each of my talks now. At the end of the presentation, I share that link. That can provide information about the talk. I include the proposal, the slides, code examples, and related blog posts. Some times I put details about the slides themselves, like photo credits and fonts used.&lt;/p&gt;&lt;p&gt;Once I&amp;rsquo;m confident they won&amp;rsquo;t change, I publish my slides for the audience to access. I use &lt;a href=&#34;https://speakerdeck.com/kevinmurphy/&#34;&gt;Speaker Deck&lt;/a&gt; to host my slides.&lt;/p&gt;&lt;h2 id=&#34;packing&#34;&gt;Packing &lt;a href=&#34;#packing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here are some things I bring to a conference in service of the talk. Even if I&amp;rsquo;m not speaking, I carry these with me, in case another speaker could use them. So, if you&amp;rsquo;re at a conference I&amp;rsquo;m at and you&amp;rsquo;re looking for one of these, come find me!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A button-up shirt - I wear these shirts so the wire of the lav mic can hide inside the shirt. Then I don&amp;rsquo;t hit it if I&amp;rsquo;m waving my hands around or something.&lt;/li&gt;&lt;li&gt;Water bottle - Water is good. You should drink some before and during the talk&amp;hellip;but not too much.&lt;/li&gt;&lt;li&gt;Clear plastic cup - I usually take this from my hotel room. I may not want to fumble with taking the cap on and off my water bottle, so I pour some water in the cup on stage.&lt;/li&gt;&lt;li&gt;Slide advancer - I like to walk a bit away from the podium in a small box. Holding this gives me the freedom to do that without needing to hop back to the computer to get to the next slide.&lt;/li&gt;&lt;li&gt;Extra batteries - It&amp;rsquo;d be a real shame if I couldn&amp;rsquo;t advance the slides from my fancy slide advancer because I used up the batteries with all my practicing.&lt;/li&gt;&lt;li&gt;Laptop power cable - Especially if you practice with your laptop plugged in, give the talk with your laptop plugged in. You don&amp;rsquo;t want some unexpected power saver setting surprising you on stage.&lt;/li&gt;&lt;li&gt;A/V connection or cables - The venue or organizers may say they&amp;rsquo;ll have some, and you may need to use them, but better to have one of your own in case.&lt;/li&gt;&lt;li&gt;Throat lozenges - I put one in my mouth about an hour before I&amp;rsquo;m on stage, whether I need it or not.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;at-the-conference&#34;&gt;At The Conference &lt;a href=&#34;#at-the-conference&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I find the room I&amp;rsquo;m speaking in well before my time. Ideally a day before. At the very least, it resolves the immediate stress of needing to know where to go. I also ask to plug in my computer and make sure it works. This is a great chance to meet the A/V team that&amp;rsquo;ll be helping you. I introduce myself and ask their names. I ask them if there&amp;rsquo;s anything I can do to make their jobs easier. I let them know if I&amp;rsquo;m playing any audio on my computer. I tell them I&amp;rsquo;m likely to walk around (a little) on stage, and ask if that&amp;rsquo;s any concern for them.&lt;/p&gt;&lt;p&gt;I go to the slide that has the smallest font, or most dense visuals on it, and then run (ok, walk) to the back of the room. I ensure it looks legible to me.&lt;/p&gt;&lt;p&gt;That is the &lt;em&gt;only&lt;/em&gt; time I would consider making &lt;strong&gt;any&lt;/strong&gt; changes to my slides, content, or delivery this late. Anything else would be detrimental to the experience. I&amp;rsquo;ve already practiced so much with it another way I do not feel comfortable making any other changes.&lt;/p&gt;&lt;p&gt;It may turn out there&amp;rsquo;s a giant chandelier that obscures some of the projection. It&amp;rsquo;s probably a good idea to take that into account for your audience.&lt;/p&gt;&lt;p&gt;If the schedule allows, I also see a talk in that room before my session. I sit in the back.&lt;/p&gt;&lt;p&gt;I practice the night before, by myself, in my hotel room. And only once. That rule still applies. Other speakers may form groups to do a run through or practice. I&amp;rsquo;m happy to attend those and support others, but it doesn&amp;rsquo;t work for me to practice that way. It&amp;rsquo;s a lot of energy for me to speak in front of a crowd, so I save it for the stage.&lt;/p&gt;&lt;h2 id=&#34;day-of&#34;&gt;Day Of &lt;a href=&#34;#day-of&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As hard as it is, I try not to think too much about my talk before I give it. I&amp;rsquo;ve already practiced dozens of times. At this point, it is as good as it&amp;rsquo;s going to be. This is easier said than done, but the goal is to not focus on it.&lt;/p&gt;&lt;p&gt;Be mindful of the schedule. Is there a short break before the talk? If so, then I stay in that room for the prior session, even if there&amp;rsquo;s somewhere else I&amp;rsquo;d rather be. Whether there&amp;rsquo;s a long or short break before, plan on people opening the door(s) and coming in late. That makes it less surprising when it happens.&lt;/p&gt;&lt;p&gt;If given the choice, I do not take questions from the large group. I&amp;rsquo;m happy to talk to anyone and everyone afterwards individually. I let the audience know where I&amp;rsquo;ll be right after the talk. That&amp;rsquo;s usually right next to the stage, but again, I&amp;rsquo;m mindful of the schedule. Is there&amp;rsquo;s another talk right after? I want to cede that space to the next speaker to not interrupt their preparation.&lt;/p&gt;&lt;p&gt;After you&amp;rsquo;re done, listen to your body. Do you need to go disappear and be by yourself? Do that! Do you need the affirmation of others? Find someone in the audience and go talk to them! You did it! Think about the special dessert you&amp;rsquo;ll get at dinner to celebrate, even if that&amp;rsquo;s alone in your hotel room.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ruby on Rails Podcast Co-Host?!?</title>
       <link>https://kevinjmurphy.com/posts/ruby-on-rails-podcast-cohost/</link>
       <pubDate>Thu, 21 Sep 2023 08:00:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-on-rails-podcast-cohost/</guid>
       <description>&lt;h2 id=&#34;the-ruby-on-rails-podcast&#34;&gt;The Ruby on Rails Podcast &lt;a href=&#34;#the-ruby-on-rails-podcast&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I co-hosted &lt;a href=&#34;https://www.therubyonrailspodcast.com/488&#34;&gt;episode 488&lt;/a&gt; of The Ruby on Rails Podcast. Brittany and I talked with Allison McMillan and Chelsea Kaufman about all the plans for RubyConf 2023.&lt;/p&gt;&lt;p&gt;All the thanks to Brittany Martin for asking me to join. I didn&amp;rsquo;t have podcast hosting on my career bingo card.&lt;/p&gt;&lt;iframe src=&#34;https://player.fireside.fm/v2/3OC19MC9+EypbCECp?theme=dark&#34; width=&#34;740&#34; height=&#34;200&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;</description>
     </item>
   
     <item>
       <title>Building Conference Talk Content</title>
       <link>https://kevinjmurphy.com/posts/building-conference-talk-content/</link>
       <pubDate>Fri, 15 Sep 2023 18:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/building-conference-talk-content/</guid>
       <description>&lt;h2 id=&#34;conference-talk-preparation-series&#34;&gt;Conference Talk Preparation Series &lt;a href=&#34;#conference-talk-preparation-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/sharing-past-conference-proposals/&#34;&gt;Sharing Past Conference Proposals&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Building Conference Talk Content&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/preparing-conference-talk-delivery/&#34;&gt;Preparing Conference Talk Delivery&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Have you recently had a conference proposal accepted? Congratulations! Are you wondering, &amp;ldquo;what do I do &lt;em&gt;now&lt;/em&gt;?&amp;rdquo; Here is the process I follow to turn my proposal into a full-length talk.&lt;/p&gt;&lt;h2 id=&#34;content-generation&#34;&gt;Content Generation &lt;a href=&#34;#content-generation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My first step is to gather all the content I want to talk about as quickly as possible. I know that sounds reductive. Oh, the first step is JUST to put together all your content? How easy! I might as well tell you &lt;a href=&#34;https://knowyourmeme.com/photos/572078-how-to-draw-an-owl&#34;&gt;how to draw an owl&lt;/a&gt; next.&lt;/p&gt;&lt;p&gt;But, here&amp;rsquo;s the thing - for a conference talk, I&amp;rsquo;m not starting from scratch. I&amp;rsquo;ve already put a lot of time, and thinking, into the &lt;a href=&#34;https://kevinjmurphy.com/posts/sharing-past-conference-proposals/&#34;&gt;proposal&lt;/a&gt;. For me, that almost always includes a full outline. So I start by revisiting that and see what I need to add.&lt;/p&gt;&lt;p&gt;I completed most of my research in the proposal, but I may need to brush up on some details. There may be a book or research paper that I skimmed that I need to go back to and dig into.&lt;/p&gt;&lt;p&gt;Will I be using code examples to demonstrate some points? I&amp;rsquo;ll start writing some code samples, in my usual code editor, that show what I want. I&amp;rsquo;ll make sure they run. At this point, I&amp;rsquo;m not concerned about how terse or verbose they are. I&amp;rsquo;m not worried what the domain is. I need something that shows the point I want to make. I will admit that sometimes this code generation process is procrastination. I try to call myself out on that and not put too much effort into them at this point.&lt;/p&gt;&lt;h2 id=&#34;shameless-green&#34;&gt;Shameless Green &lt;a href=&#34;#shameless-green&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My next step is to put my thoughts together on slides. I use the default theme. White background with black text. Whatever the default font is. I do not care about slide design &lt;strong&gt;at all&lt;/strong&gt; at this point.&lt;/p&gt;&lt;p&gt;Some slides are one word. Some are an emoji. Some are a dense block of code. Some start as bullet points. Sometimes it&amp;rsquo;s a thought about what I &lt;em&gt;want&lt;/em&gt; the slide to eventually be, like, &amp;ldquo;insert picture of an owl&amp;rdquo;. Everything is a placeholder at this point.&lt;/p&gt;&lt;p&gt;I call this process &amp;ldquo;Shameless Green&amp;rdquo;. I borrowed this term from the book &lt;a href=&#34;https://sandimetz.com/99bottles-sample-ruby#_shameless_green&#34;&gt;&amp;ldquo;99 Bottles of OOP&amp;rdquo;&lt;/a&gt; by Sandi Metz, Katrina Owen, and TJ Stankus. It doesn&amp;rsquo;t match exactly, but it&amp;rsquo;s stuck in my head, so I continue to use it. Intentionally reminding myself to be shameless gives me more license to do that. There&amp;rsquo;s no polish here. This isn&amp;rsquo;t even a first draft; it&amp;rsquo;s only for me - there&amp;rsquo;s no chance of another human seeing this.&lt;/p&gt;&lt;h2 id=&#34;first-delivery&#34;&gt;First Delivery &lt;a href=&#34;#first-delivery&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After this, I deliver the talk. No, I don&amp;rsquo;t get on stage with it. I don&amp;rsquo;t have an audience. I close the door to my office, stand up, and speak out loud as if I were on a stage - with my slides in front of me on my computer.&lt;/p&gt;&lt;p&gt;This will be &lt;em&gt;rough&lt;/em&gt;. I&amp;rsquo;ll feel uncomfortable. I stop to write down when those feelings hit. Not enough to pull me out of my rhythm, but I don&amp;rsquo;t want to forget it.&lt;/p&gt;&lt;p&gt;Some things I might write:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Slide 7 - awkward intro&lt;/li&gt;&lt;li&gt;Slide 13 - example doesn&amp;rsquo;t work&lt;/li&gt;&lt;li&gt;Slide 16 - missing context&lt;/li&gt;&lt;li&gt;Slide 32 - repeating info from earlier&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After I&amp;rsquo;ve gone through everything, I take a few minutes to review my notes. Only to make sure everything is legible and makes sense. I take the time to add more details where needed.&lt;/p&gt;&lt;p&gt;And then I walk away. I&amp;rsquo;ll revisit it later with a fresh perspective.&lt;/p&gt;&lt;h2 id=&#34;editing&#34;&gt;Editing &lt;a href=&#34;#editing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I take a few hours to a day away from my initial attempt. I then review the notes while iterating through the slides. What I&amp;rsquo;m looking for here is any &lt;em&gt;structural&lt;/em&gt; changes I need to make.&lt;/p&gt;&lt;p&gt;Is there a different order I should present information in? Maybe the section in Slide 32 needs to happen closer to Slide 16. That&amp;rsquo;ll add more context immediately and eliminate the need to repeat myself later on.&lt;/p&gt;&lt;p&gt;If there are any transitions that feel awkward, I dig into why. Am I missing information? Do I have unnecessary information? Do I need to reorder the content? Is there a connection that I need to make more explicit, for myself and the audience?&lt;/p&gt;&lt;p&gt;These changes likely don&amp;rsquo;t get done in one sitting. I revisit a section, or a transition, at a time. Then I review everything in total again. That might spark another round of smaller sections to focus on.&lt;/p&gt;&lt;h2 id=&#34;theme&#34;&gt;Theme &lt;a href=&#34;#theme&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now I&amp;rsquo;m comfortable with the general flow of information I want to share with the audience. Next, I build my &lt;strong&gt;theme&lt;/strong&gt;. I still don&amp;rsquo;t mean slide design here. I mean the real or imaginary &lt;a href=&#34;https://kevinjmurphy.com/posts/sharing-past-conference-proposals/#go-all-in-with-a-theme&#34;&gt;world&lt;/a&gt; that my talk will be about. Some talks have a theme as part of their proposal. For others, I need to develop it at this point.&lt;/p&gt;&lt;p&gt;A theme is important for me in a talk because it turns my presentation into a story. I have a hard time delivering information over that period of time in hard, technical terms. Other people can, and that&amp;rsquo;s great! It doesn&amp;rsquo;t work for me. I need to have some real or imaginary scenario that the content relates to. Most of the time, this involves creating an imaginary product or company. That will illustrate the topics I&amp;rsquo;m sharing with the audience.&lt;/p&gt;&lt;p&gt;I may need to change all my examples to match the theme. The code samples now should reflect that theme. Let&amp;rsquo;s say a talk is using a theme of managing scientific study participants. Code that was using ActiveRecord callbacks to send an email is now sending an &lt;a href=&#34;https://en.wikipedia.org/wiki/Informed_consent&#34;&gt;informed consent&lt;/a&gt; document.&lt;/p&gt;&lt;h2 id=&#34;second-delivery&#34;&gt;Second Delivery &lt;a href=&#34;#second-delivery&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve reworked my transitions, moved sections around, and built up a story around my content. Now it&amp;rsquo;s time to run through the presentation again. This time, I take fewer notes, but I also add something.&lt;/p&gt;&lt;p&gt;In this practice session, I start timing the presentation. Where I have discernible sections, I track those as splits/laps (depending on your timer of choice). Talks need to fit within a defined schedule. This is nowhere near polished. Still, the timing gives me a helpful sign of how far off I am from where I need to be.&lt;/p&gt;&lt;p&gt;Most of the time, I discover I&amp;rsquo;m way over on time.&lt;/p&gt;&lt;h2 id=&#34;editing-1&#34;&gt;Editing &lt;a href=&#34;#editing-1&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In this editing session, I&amp;rsquo;m incorporating the same process from the first edit, but I&amp;rsquo;m adding to it. What am I going to cut entirely? Usually at this point I know what I want to say will take too long and I need to remove pieces. Even if I&amp;rsquo;m on time, I may recognize that there are pieces that don&amp;rsquo;t complement my goal.&lt;/p&gt;&lt;p&gt;This is why I focus on &amp;ldquo;shameless green&amp;rdquo; to start. I haven&amp;rsquo;t invested in picking colors or graphics for my slides. I haven&amp;rsquo;t pored over detailed animations and visuals. Getting rid of content isn&amp;rsquo;t &lt;em&gt;easy&lt;/em&gt;, but it&amp;rsquo;s harder (for me) the more work I&amp;rsquo;ve put into it.&lt;/p&gt;&lt;p&gt;This doesn&amp;rsquo;t mean you&amp;rsquo;ve lost all that work you cut forever. First off, it was &lt;strong&gt;necessary&lt;/strong&gt; to get what remains to where it is now. You learned something as part of putting that together that&amp;rsquo;ll help you.&lt;/p&gt;&lt;p&gt;You can also reuse it elsewhere. I&amp;rsquo;ve turned sections of presentations I&amp;rsquo;ve had to cut into entirely different talks. Some have become blog posts. If you&amp;rsquo;re not willing to let it go, but it doesn&amp;rsquo;t fit in this format, it doesn&amp;rsquo;t need to be the end. It needs to go somewhere else.&lt;/p&gt;&lt;h2 id=&#34;slide-design&#34;&gt;Slide Design &lt;a href=&#34;#slide-design&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I am by no means a designer, but I do my best to deliver pleasant slides. Here are some things I look for.&lt;/p&gt;&lt;p&gt;Does the slide complement what I&amp;rsquo;m saying? My speech and the slide should work together, but not be the same. They should highlight what&amp;rsquo;s important without being repetitive. How can I replace words with visuals? I&amp;rsquo;ve turned sentences of text into a single emoji. I&amp;rsquo;ve replaced them with a picture. I try to limit the text on the screen. I want my audience mostly listening to what I&amp;rsquo;m saying, not reading what&amp;rsquo;s behind me.&lt;/p&gt;&lt;p&gt;Are the slides cohesive? I use slide templates to use consistent fonts, color schemes, and layouts. This also makes incorporating large design changes easier later on. Rather than needing to change 80 slides individually, I change the template.&lt;/p&gt;&lt;p&gt;Are my slides accessible? I run my color scheme through a &lt;a href=&#34;https://webaim.org/resources/contrastchecker/&#34;&gt;contrast checker&lt;/a&gt;. I strive for a WCAG AAA level of contrast between my colors. I typically pick no more than four colors. A consistent background color. A consistent text color. No more than two colors for highlighting or drawing attention to parts of the slide.&lt;/p&gt;&lt;p&gt;Are my slides readable to the audience? I avoid putting any information you need the audience to see on the bottom third of the slides. Someone&amp;rsquo;s head might be in the way. I distill code down to the essentials, even if that means it isn&amp;rsquo;t syntactically valid or complete. I use as large of a font size and as few words as necessary.&lt;/p&gt;&lt;p&gt;I have what&amp;rsquo;s showing on the slide be what you want the audience to focus on. Not what you&amp;rsquo;re going to tell them in two more minutes. To help me have more control over this, if I ever use any slide builds, each build is a separate slide. I don&amp;rsquo;t use an animation that happens within one slide. It makes it easier to go back and forth between slides, if  necessary.&lt;/p&gt;&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps &lt;a href=&#34;#next-steps&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I have my slides built at this point, but my work isn&amp;rsquo;t over. Next I go through the laborious, repetitive process to provide a &lt;a href=&#34;https://kevinjmurphy.com/posts/preparing-conference-talk-delivery/&#34;&gt;consistent delivery&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Keeping Up With Ruby News All Week Long</title>
       <link>https://kevinjmurphy.com/posts/keeping-up-with-ruby-news/</link>
       <pubDate>Sat, 19 Aug 2023 15:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/keeping-up-with-ruby-news/</guid>
       <description>&lt;p&gt;I read a lot of Ruby news throughout the week. When someone asks me what they should follow, I first suggest that they not follow exactly the same blogs I do. Then I share the RSS feeds I follow just in case. But what I do suggest is starting with the following places. These highlight the work of others on a weekly basis. I then suggest they keep up with what resonates with them inside these round-ups.&lt;/p&gt;&lt;h2 id=&#34;sunday&#34;&gt;Sunday &lt;a href=&#34;#sunday&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As you get ready to start your work week, what&amp;rsquo;s new out there that can get you excited to write some code? Check out the &lt;a href=&#34;https://www.rubyradar.com/&#34;&gt;Ruby Radar&lt;/a&gt; newsletter. The format shows two social media posts, two articles, two podcasts, two videos, and two code updates (commits, releases, projects).&lt;/p&gt;&lt;h2 id=&#34;monday&#34;&gt;Monday &lt;a href=&#34;#monday&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Waiting in your inbox as you start your week is the &lt;a href=&#34;https://newsletter.shortruby.com/&#34;&gt;Short Ruby Newsletter&lt;/a&gt;. Naming is hard, and this is the most comprehensive round-up of information I follow. Lucian curates a highlighted list of information about our community, events, code and Ruby, gems and libraries, and related (not Ruby specific) updates.&lt;/p&gt;&lt;p&gt;If that&amp;rsquo;s not enough for you, there&amp;rsquo;s more. That&amp;rsquo;s followed with a list of other newsletters, podcasts, videos, and articles of the week. You&amp;rsquo;ll likely have a lot of tabs open after getting through a full edition of Short Ruby.&lt;/p&gt;&lt;h2 id=&#34;tuesday&#34;&gt;Tuesday &lt;a href=&#34;#tuesday&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After all that, you might need a break from reading. Instead, catch up with the newest episode of &lt;a href=&#34;https://www.bikeshed.fm/&#34;&gt;The Bike Shed&lt;/a&gt; podcast. While not Ruby-specific, the current hosts Joël Quenneville and Stephanie Minn frequently discuss Ruby topics. This thoughtbot podcast discusses what&amp;rsquo;s new in these consultant&amp;rsquo;s worlds from week to week.&lt;/p&gt;&lt;h2 id=&#34;wednesday&#34;&gt;Wednesday &lt;a href=&#34;#wednesday&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can continue with a podcast today with a new episode of &lt;a href=&#34;https://www.therubyonrailspodcast.com/&#34;&gt;The Ruby On Rails Podcast&lt;/a&gt;. It&amp;rsquo;s hosted by Brittany Martin and a rotating panel of co-hosts. This is typically structured as an interview with a guest.&lt;/p&gt;&lt;h2 id=&#34;thursday&#34;&gt;Thursday &lt;a href=&#34;#thursday&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thursday is a big day for Ruby news. The &lt;a href=&#34;https://rubyweekly.com/&#34;&gt;Ruby Weekly&lt;/a&gt; newsletter comes out on this day. On top of the hottest news and updates of the week, this highly-curated newsletter provides a sample of tutorials, articles, videos, code, and tools that updated throughout the week.&lt;/p&gt;&lt;p&gt;Later in the day, dig in to the &lt;a href=&#34;https://ruby.libhunt.com/&#34;&gt;Awesome Ruby&lt;/a&gt; newsletter with more popular news and articles, followed with trending projects.&lt;/p&gt;&lt;p&gt;There is also the &lt;a href=&#34;https://www.rubyforall.com/&#34;&gt;Ruby for All&lt;/a&gt; podcast. The topics can sometimes seem targeted to early-career developers. I&amp;rsquo;ve found that makes it an engaging conversation for everyone to follow and learn from.&lt;/p&gt;&lt;h2 id=&#34;friday&#34;&gt;Friday &lt;a href=&#34;#friday&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can check out a summary of commits and PRs specific to Rails with the &lt;a href=&#34;https://world.hey.com/this.week.in.rails&#34;&gt;This Week In Rails&lt;/a&gt; newsletter.&lt;/p&gt;&lt;p&gt;Entertain yourself at the end of the week with the &lt;a href=&#34;https://remoteruby.com/&#34;&gt;Remote Ruby&lt;/a&gt; podcast. Andrew Mason, Chris Oliver, and Jason Charnes discuss the latest in what they&amp;rsquo;re working on or interested in. Occasionally there are guests. Other times the panel of hosts are conversing amongst themselves.&lt;/p&gt;&lt;h2 id=&#34;saturday&#34;&gt;Saturday &lt;a href=&#34;#saturday&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Take a break if you need to. Or use the time to catch up on what you&amp;rsquo;ve missed from these places throughout the week.&lt;/p&gt;&lt;h2 id=&#34;weekly-reflection&#34;&gt;Weekly Reflection &lt;a href=&#34;#weekly-reflection&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After taking in the information, decide what sources from these curated experiences to keep up with. If you enjoyed what someone had to say, their latest won&amp;rsquo;t always be in these round-ups. Follow podcast guests on social media. Add blogs you enjoy to your RSS reader. Join writer&amp;rsquo;s newsletters. This is how I&amp;rsquo;ve cultivated my list of sources that I follow, whether they end up highlighted in a weekly review or not.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Testing Inherited Behavior</title>
       <link>https://kevinjmurphy.com/posts/testing-inherited-behavior/</link>
       <pubDate>Fri, 14 Jul 2023 19:00:24 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/testing-inherited-behavior/</guid>
       <description>&lt;h2 id=&#34;getting-it-on-record&#34;&gt;Getting It On Record &lt;a href=&#34;#getting-it-on-record&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Recently I asked on &lt;a href=&#34;https://ruby.social/@kevin_j_m/110668925217643586&#34;&gt;Mastodon&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;How do you prefer to see methods that are inherited from another class unit tested?&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m applying this to #ruby code, but this question is meant to be language-agnostic to cover how you test inherited behavior in OO languages.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is something that I&amp;rsquo;ve waffled on, and changed my opinion on, seemingly each time I have to deal with this. For me, a lot of the tension comes from choosing why I&amp;rsquo;m testing. Am I testing to verify the correctness of the code, or am I testing to document expected behavior?&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;re managing a record collection.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VinylAlbum&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shape&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:circle&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;audio_technology&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:analog&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max_minutes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This all works until we get our first &lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_play&#34;&gt;extended play&lt;/a&gt; (EP) record. To model that, we inherit from our &lt;code&gt;VinylAlbum&lt;/code&gt; and override &lt;code&gt;max_minutes&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VinylAlbum&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max_minutes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want to test our new &lt;code&gt;Ep&lt;/code&gt; class. What do we do? Here&amp;rsquo;s what respondents to my poll said.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/mastodon_test_inherited_behavior_poll.png&#34;    alt=&#34;A poll on Mastodon asking how people unit test inherited behavior. 67% say don&amp;#39;t test it. 21% say something fancy (like a shared example). 13% say duplicate the test. 24 responses&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;duplicate-the-test&#34;&gt;Duplicate The Test &lt;a href=&#34;#duplicate-the-test&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This was the least popular response (holding aside &amp;ldquo;Other&amp;rdquo;, which no one answered with). In this case, you can consider the inheritance to be an implementation detail. &lt;code&gt;Ep&lt;/code&gt; responds to three methods, so I&amp;rsquo;m going to test how it behaves to receiving those three messages.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#shape&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is a circle&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      album &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#e6db74&#34;&gt;:circle&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;audio_technology&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is analog&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      album &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;audio_technology)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#e6db74&#34;&gt;:analog&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#max_minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is 30 minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      album &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_minutes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is documenting the public API surface of the unit under test. I&amp;rsquo;m signaling when reading or running these tests that &lt;code&gt;Ep&lt;/code&gt; has these methods and responds in this way to them.&lt;/p&gt;&lt;p&gt;The cost here is in maintaining these tests. Any changes to &lt;code&gt;VinylRecord&lt;/code&gt; will mean changing not only its tests, but also &lt;code&gt;Ep&lt;/code&gt;&amp;rsquo;s tests. These tests also run in the regression suite forever. That contributes time to run tests that you might consider to be testing the same thing twice.&lt;/p&gt;&lt;h3 id=&#34;testing-inherited-behavior-creates-an-integration-test&#34;&gt;Testing Inherited Behavior Creates An Integration Test &lt;a href=&#34;#testing-inherited-behavior-creates-an-integration-test&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I also received &lt;a href=&#34;https://ruby.social/@acute_distress/110672196493618303&#34;&gt;feedback&lt;/a&gt; to consider testing in this way an integration test. And my question was specifically about &lt;em&gt;unit testing&lt;/em&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;only test what YOUR UNIT does and nothing else&amp;hellip;Otherwise you are writing integration tests. It’s a grey area especially if you have added a private method to the child. Then you’ve got to ask yourself is your design correct.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I don&amp;rsquo;t think this opinion is wrong. It may be a little at odds with how free I &lt;em&gt;tend&lt;/em&gt; to see people be with the term &amp;ldquo;unit test&amp;rdquo;. Particularly in the Ruby, and especially Rails, community. I&amp;rsquo;ve seen more than my share of what we call unit tests of models in a Rails app that hit the database. That test is not &lt;strong&gt;technically&lt;/strong&gt; a unit test. It&amp;rsquo;s not only collaborating with another class. It&amp;rsquo;s working with a whole other &lt;em&gt;external dependency&lt;/em&gt;. Testing the behavior we&amp;rsquo;re inheriting doesn&amp;rsquo;t seem that out of line in comparison.&lt;/p&gt;&lt;h3 id=&#34;wheres-the-line&#34;&gt;Where&amp;rsquo;s The Line? &lt;a href=&#34;#wheres-the-line&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s take this to the extreme though and look at a class that has no behavior defined in Ruby.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; foo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;public_methods&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Are you writing tests for those 64 methods you get from &lt;code&gt;BasicObject&lt;/code&gt; and wherever else? I know I&amp;rsquo;m not.&lt;/p&gt;&lt;p&gt;Maybe instead we say we&amp;rsquo;ll only test behavior that we explicitly inherit.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ApplicationRecord&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; foo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;public_methods&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;466&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m not writing tests for all the behavior I get from Active Record either.&lt;/p&gt;&lt;p&gt;So why duplicate the tests? It seems here that the decision is to test behavior inherited from code that I own, or that&amp;rsquo;s defined in my codebase. I&amp;rsquo;m trusting that Active Record is testing its behavior. I don&amp;rsquo;t trust &lt;em&gt;my&lt;/em&gt; behavior I inherit from &lt;code&gt;VinylRecord&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;dont-test&#34;&gt;Don&amp;rsquo;t Test &lt;a href=&#34;#dont-test&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This was the most popular option. We trust Ruby to test the methods it defines. And we trust Active Record to test the methods it defines. As opposed to the duplication section, here we &lt;em&gt;also&lt;/em&gt; trust &lt;code&gt;VinylAlbum&lt;/code&gt; to test the methods it defines.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#max_minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is 30 minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      album &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_minutes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;VinylAlbum&lt;/code&gt; tests are already testing &lt;code&gt;shape&lt;/code&gt; and &lt;code&gt;audio_technology&lt;/code&gt;. &lt;code&gt;max_minutes&lt;/code&gt; is different, and defined in the implementation of the &lt;code&gt;Ep&lt;/code&gt; class, so we only test that.&lt;/p&gt;&lt;h2 id=&#34;something-fancy-shared-examples&#34;&gt;Something Fancy (Shared Examples) &lt;a href=&#34;#something-fancy-shared-examples&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This was the second most popular response. I suggested a &lt;a href=&#34;https://rspec.info/features/3-12/rspec-core/example-groups/shared-examples/&#34;&gt;shared example&lt;/a&gt; as an implementation of something fancy. I received no responses explaining another fancy method. So I&amp;rsquo;m assuming that all the respondents meant a shared example.&lt;/p&gt;&lt;p&gt;For this, we document the behavior that makes up a vinyl album.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shared_examples &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#shape&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is a circle&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#e6db74&#34;&gt;:circle&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;audio_technology&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is analog&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;audio_technology)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#e6db74&#34;&gt;:analog&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#max_minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is 30 minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_minutes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then each of the classes that have this behavior include this shared example in their tests.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;VinylAlbum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it_behaves_like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it_behaves_like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This tests the full API surface of the classes inheriting this behavior. That may satisfy a need you feel where you&amp;rsquo;d otherwise duplicate the test. All that without actually having to write the tests over again.&lt;/p&gt;&lt;p&gt;There&amp;rsquo;s just one problem: the &lt;code&gt;Ep&lt;/code&gt; tests don&amp;rsquo;t pass. That&amp;rsquo;s because of the &lt;code&gt;max_minutes&lt;/code&gt; method, which is overridden. An EP can&amp;rsquo;t be 46 minutes; it can be no more than 30.&lt;/p&gt;&lt;p&gt;Now, we can get around that a couple of ways.&lt;/p&gt;&lt;h3 id=&#34;passing-parameters-to-the-shared-example&#34;&gt;Passing Parameters To The Shared Example &lt;a href=&#34;#passing-parameters-to-the-shared-example&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can pass a parameter to the shared example.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shared_examples &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;max_minutes&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#max_minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;max_minutes&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_minutes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq max_minutes&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then specify that in each of our usages of the shared example.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;VinylAlbum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it_behaves_like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it_behaves_like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The tests now pass. However, I&amp;rsquo;d argue this is a bit confusing. Read the invocation of the shared example in a vacuum. You have no idea what that number has to do with the shared example. It causes the test to pass, but it&amp;rsquo;s lacking explanatory information. You need to read the shared example to see what 46 or 30 refers to.&lt;/p&gt;&lt;h3 id=&#34;passing-context-to-the-shared-example&#34;&gt;Passing Context To The Shared Example &lt;a href=&#34;#passing-context-to-the-shared-example&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can provide it a name by instead passing the context of that number to the shared example. The shared example will implicitly use an &lt;code&gt;expected_max_minutes&lt;/code&gt; reference.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shared_examples &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#max_minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;has a maximum number of minutes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      expect(album&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_minutes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq expected_max_minutes&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each of the tests will define &lt;code&gt;expected_max_minutes&lt;/code&gt; in a block.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;VinylAlbum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it_behaves_like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    let(&lt;span style=&#34;color:#e6db74&#34;&gt;:expected_max_minutes&lt;/span&gt;) { &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe &lt;span style=&#34;color:#66d9ef&#34;&gt;Ep&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it_behaves_like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an album&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    let(&lt;span style=&#34;color:#e6db74&#34;&gt;:expected_max_minutes&lt;/span&gt;) { &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This adds clarity about what the number refers to when we call the shared example. However, the test description had to become more vague. We can&amp;rsquo;t use it to say how many minutes it should be. Instead, we just say it has a maximum number of minutes, whatever that may be.&lt;/p&gt;&lt;h3 id=&#34;customizing-the-shared-example&#34;&gt;Customizing The Shared Example &lt;a href=&#34;#customizing-the-shared-example&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In either case, we needed to take some action to get our tests to pass. That&amp;rsquo;s because behavior was overridden - the &lt;code&gt;max_minutes&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;That can get unwieldy over time if you have a large inheritance tree. Whether that be with long branches or a large number of leaves on one branch. Any time there&amp;rsquo;s a customization of the default behavior, we need to account for it. The base shared example needs to change and every use of the shared example needs to handle it.&lt;/p&gt;&lt;p&gt;We could use the shared example to test only the behavior that&amp;rsquo;s consistent in all classes. Here that would mean &lt;code&gt;max_minutes&lt;/code&gt; isn&amp;rsquo;t in the shared example. Instead we&amp;rsquo;d test that within the implementations of both the classes. That can become difficult as more classes inherit and customize behavior. We&amp;rsquo;ll continue pulling items from the shared example. We need to have the discipline to remember to test them in all the implementing classes.&lt;/p&gt;&lt;p&gt;We could also build multiple shared examples. There could be one that tests all the behavior that is common. Anything overridden could then move into a separate shared example. All the existing inheriting classes would use that new shared example. The new class that overrides it would test its customization itself. That again requires discipline to manage as the inheritance structure grows and changes.&lt;/p&gt;&lt;h2 id=&#34;setting-the-record-straight&#34;&gt;Setting The Record Straight &lt;a href=&#34;#setting-the-record-straight&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ll admit - I&amp;rsquo;m drawn to duplicating the tests. I like using my tests as documentation. I like showing what to expect it to respond to, and how it will react.&lt;/p&gt;&lt;p&gt;I also don&amp;rsquo;t think that stands up to logical scrutiny when compared to a lot of &lt;strong&gt;other&lt;/strong&gt; values I hold dear. That&amp;rsquo;s where the tension comes from that led me to make this poll.&lt;/p&gt;&lt;p&gt;I don&amp;rsquo;t test code that I don&amp;rsquo;t own or control. As an aside, there&amp;rsquo;s always an exception. But, in general, as already mentioned, I&amp;rsquo;m not testing the methods that come along &amp;ldquo;for free&amp;rdquo; on any Ruby object. Or testing the full API surface of a class inheriting from &lt;code&gt;ApplicationRecord&lt;/code&gt;. For some reason, I&amp;rsquo;m called to test inherited behavior that&amp;rsquo;s defined in the codebase.&lt;/p&gt;&lt;p&gt;I care very deeply about maintenance. I care about minimizing the negative impact that code today will have on my team tomorrow and next year. Those duplicated tests have a big cost the team needs to manage over the life of that code.&lt;/p&gt;&lt;p&gt;In that light, a shared example may feel like a welcome compromise. With a one liner, I&amp;rsquo;ve tested all those methods and no one&amp;rsquo;s the wiser. Except - we are. We &lt;em&gt;still&lt;/em&gt; need to maintain them. And those tests are still running, testing the same behavior, multiple times. That makes the feedback loop from our test suite slower.&lt;/p&gt;&lt;p&gt;Not adding the tests sounds like the choice I should make, in light of what I value. However, my interest in using tests to document behavior tells me otherwise. Perhaps thinking of those tests as integration tests will help tamp down the feeling. I&amp;rsquo;ll keep it in mind going forward.&lt;/p&gt;&lt;p&gt;Thanks to everyone who responded to my poll. Are there more topics you&amp;rsquo;d like to see a poll about and have me write up my thoughts on? &lt;a href=&#34;https://ruby.social/@kevin_j_m&#34;&gt;Let me know&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Available on Bluesky</title>
       <link>https://kevinjmurphy.com/posts/joining-bluesky/</link>
       <pubDate>Tue, 11 Jul 2023 15:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/joining-bluesky/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve created an account on Bluesky. You can follow along and connect with me &lt;a href=&#34;https://bsky.app/profile/kevinjm.bsky.social&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;At the time of this writing, I have no invite codes available to share.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Blue Ridge Ruby 2023 Recap</title>
       <link>https://kevinjmurphy.com/posts/blue-ridge-ruby-2023-recap/</link>
       <pubDate>Sun, 11 Jun 2023 14:00:24 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/blue-ridge-ruby-2023-recap/</guid>
       <description>&lt;h2 id=&#34;blue-ridge-ruby-2023&#34;&gt;Blue Ridge Ruby 2023 &lt;a href=&#34;#blue-ridge-ruby-2023&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Blue Ridge Ruby recently wrapped up in Asheville, North Carolina. This post is not intended as a review of any of the talks, but to highlight the variety of great work from all involved. I hope you&amp;rsquo;ll seek out the full videos of all the sessions that interest you once they are available.&lt;/p&gt;&lt;h2 id=&#34;day-1&#34;&gt;Day 1 &lt;a href=&#34;#day-1&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;welcome&#34;&gt;Welcome &lt;a href=&#34;#welcome&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Jeremy Smith gave an intro that I hope to see expanded into a full conference talk one day. Maybe after he&amp;rsquo;s not so busy organizing a conference.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_jeremy_smith.jpg&#34;    alt=&#34;Jeremy Smith at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;enough-coverage-to-beat-the-band&#34;&gt;Enough Coverage To Beat The Band &lt;a href=&#34;#enough-coverage-to-beat-the-band&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/kevin-murphy/&#34;&gt;I&lt;/a&gt; had the pleasure to bring the &amp;ldquo;Ruby&amp;rsquo;s Got You Covered&amp;rdquo; &lt;a href=&#34;https://kevinjmurphy.com/posts/coverage/&#34;&gt;world tour&lt;/a&gt; to Asheville. This was my first time sharing this with an in-person audience.&lt;/p&gt;&lt;p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_kevin_murphy.jpeg&#34;    alt=&#34;Kevin Murphy at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;Photo Credit: Drew Bragg&lt;/p&gt;&lt;h3 id=&#34;empathetic-pair-programming-with-nonviolent-communication&#34;&gt;Empathetic Pair Programming with Nonviolent Communication &lt;a href=&#34;#empathetic-pair-programming-with-nonviolent-communication&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/stephanie-minn/&#34;&gt;Stephanie Minn&lt;/a&gt; shared a way we can reframe our mindsets and statements in pairing situations and beyond. We reviewed observations, feelings, needs, and requests within the NVC (Nonviolent Communication) framework.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_stephanie_minn.jpg&#34;    alt=&#34;Stephanie Minn at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;forecasting-the-future-an-introduction-to-machine-learning-for-weather-prediction-in-native-ruby&#34;&gt;Forecasting the Future: An Introduction to Machine Learning for Weather Prediction in Native Ruby &lt;a href=&#34;#forecasting-the-future-an-introduction-to-machine-learning-for-weather-prediction-in-native-ruby&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/landon-gray/&#34;&gt;Landon Gray&lt;/a&gt; gave us an appreciation for all the work that goes in to prepare, manipulate, and clean the training data used in machine learning models.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_landon_gray.jpg&#34;    alt=&#34;Landon Gray at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;who-wants-to-be-a-ruby-engineer&#34;&gt;Who Wants To Be A Ruby Engineer? &lt;a href=&#34;#who-wants-to-be-a-ruby-engineer&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Drew Bragg, to the surprise of everyone only paying attention to the schedule on the website, hosted a small version of his popular game show after lunch.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_drew_bragg.jpg&#34;    alt=&#34;Drew Bragg at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;rspec-the-bad-parts&#34;&gt;RSpec: The Bad Parts &lt;a href=&#34;#rspec-the-bad-parts&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/caleb-hearth/&#34;&gt;Caleb Hearth&lt;/a&gt; demonstrated how we can use test structures that promote obviousness. Test examples should show what&amp;rsquo;s being tested and how it is being used.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_caleb_hearth.jpeg&#34;    alt=&#34;Caleb Hearth at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;maintenance-matters-maintaining-your-rails-app-and-your-sanity&#34;&gt;Maintenance Matters: Maintaining Your Rails App and Your Sanity &lt;a href=&#34;#maintenance-matters-maintaining-your-rails-app-and-your-sanity&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/annie-kiley/&#34;&gt;Annie Kiley&lt;/a&gt; shared 10 suggestions to keep maintenance at the forefront of your application development process. I liked their ethos to make it easier to do the better thing, and that standards are not standards unless they&amp;rsquo;re enforced.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_annie_kiley.jpg&#34;    alt=&#34;Annie Kiley at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;making-ruby-faster&#34;&gt;Making Ruby Fast(er) &lt;a href=&#34;#making-ruby-faster&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/kevin-menard/&#34;&gt;Kevin Menard&lt;/a&gt; ended the day of talks, just as a different Kevin started them. This talk starts with a discussion on Instruction Set Architectures (ISA) on silicon and transitions to YARV optimizations of Ruby code on a virtual machine (VM). Interpreters, parsers, and compilers - oh my!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_kevin_menard.jpg&#34;    alt=&#34;Kevin Menard at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;day-2&#34;&gt;Day 2 &lt;a href=&#34;#day-2&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;whats-your-type-generating-type-signatures-with-sorbet-and-tapioca&#34;&gt;What’s your type? Generating type signatures with Sorbet and Tapioca &lt;a href=&#34;#whats-your-type-generating-type-signatures-with-sorbet-and-tapioca&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/emily-samp/&#34;&gt;Emily Samp&lt;/a&gt; reflected on her reflection experience. Through this we learned how Tapioca generates RBI files for Sorbet to use. Give this one a watch for her beautiful slide design and expert animations and transitions.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_emily_samp.jpg&#34;    alt=&#34;Emily Samp at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;digital-identity-or-how-i-learned-to-stop-worrying-and-love-web3&#34;&gt;Digital Identity or: How I Learned to Stop Worrying and Love Web3 &lt;a href=&#34;#digital-identity-or-how-i-learned-to-stop-worrying-and-love-web3&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/thomas-carr/&#34;&gt;Thomas Carr&lt;/a&gt; discussed the concept of a self-sovereign identity. This enables a user to manage their own data.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_thomas_carr.jpg&#34;    alt=&#34;Thomas Carr at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;go-pro-with-poros&#34;&gt;Go Pro with POROs &lt;a href=&#34;#go-pro-with-poros&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/ifat-ribon/&#34;&gt;Ifat Ribon&lt;/a&gt; discussed encapsulation, clarity and simplicity. Starting with a primer on database wrappers and modules, we moved into exploring different patterns where Plain Old Ruby Objects (POROs) apply: services, API wrappers, virtual domain models, and request/presentation objects.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_ifat_ribon.jpg&#34;    alt=&#34;Ifat Ribon at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h3 id=&#34;lightning-talks&#34;&gt;Lightning Talks &lt;a href=&#34;#lightning-talks&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Fishing, stewardship, CLI tools for generating licenses and CI results, Rails tips, hiring, 1:1s with managers, and accessibility were just a few of the topics covered in these five minute sessions.&lt;/p&gt;&lt;h3 id=&#34;how-can-i-move-forward-when-i-dont-know-where-i-want-to-go&#34;&gt;How can I move forward when I don’t know where I want to go? &lt;a href=&#34;#how-can-i-move-forward-when-i-dont-know-where-i-want-to-go&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://blueridgeruby.com/speakers/mo-oconnor/&#34;&gt;Mo O’Connor&lt;/a&gt; introduced tools to guide decisions on moving forward. Individual Development Plans, applying/interviewing, somatics, pros/cons lists, mentorship, and building relationships were the topics covered.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_mo_oconnor.jpg&#34;    alt=&#34;Mo O&amp;#39;Connor at Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;appreciation&#34;&gt;Appreciation &lt;a href=&#34;#appreciation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thank you to Jeremy Smith for putting this idea into the world and making it a reality.&lt;/p&gt;&lt;p&gt;Thank you to Mark Locklear, Karl McCollester, and Joe Peck for helping to organize.&lt;/p&gt;&lt;p&gt;Thank you to the entire Blue Ridge Ruby Team:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Mark Locklear&lt;/li&gt;&lt;li&gt;Joe Peck&lt;/li&gt;&lt;li&gt;Karl McCollester&lt;/li&gt;&lt;li&gt;Johnathon Wright&lt;/li&gt;&lt;li&gt;Bryce Senz&lt;/li&gt;&lt;li&gt;Daniel Bradley&lt;/li&gt;&lt;li&gt;Jeremy Smith&lt;/li&gt;&lt;li&gt;Kristy Smith&lt;/li&gt;&lt;li&gt;Porter Smith&lt;/li&gt;&lt;li&gt;Jade Smith&lt;/li&gt;&lt;li&gt;Thomas Carr&lt;/li&gt;&lt;li&gt;Jay Sanders&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you to the sponsors for supporting a fledgling event. Particular thanks to Pubmark for helping support my participation.&lt;/p&gt;&lt;p&gt;Thank you to everyone who I met there. A conference doesn&amp;rsquo;t work unless people show up, and you all made it the event it became. Thanks to everyone for the kind words about my talk. I really appreciate it. Speaking is a lot of work - hearing from people afterwards is what makes it worth it.&lt;/p&gt;&lt;p&gt;Congrats Jeremy; you did it.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/blue_ridge_ruby_jeremy_smith_close.jpg&#34;    alt=&#34;Jeremy Smith closing Blue Ridge Ruby&#34;&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>Flog-Driven Development</title>
       <link>https://kevinjmurphy.com/posts/flog-driven-development/</link>
       <pubDate>Sat, 13 May 2023 07:20:24 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/flog-driven-development/</guid>
       <description>&lt;h2 id=&#34;anyone-can-play-guitar-series&#34;&gt;Anyone Can Play Guitar Series &lt;a href=&#34;#anyone-can-play-guitar-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/enumerating-musical-notes/&#34;&gt;Enumerating Musical Notes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/&#34;&gt;Revisiting Calling Sonic Pi From Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;Programming Guitar Greatness&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/composing-our-own-guitar-amps-from-inherited-gear/&#34;&gt;Composing Our Own Guitar Amps From Inherited Gear&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Flog-Driven Development&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;remembering-refactoring&#34;&gt;Remembering Refactoring &lt;a href=&#34;#remembering-refactoring&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In a &lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;prior post&lt;/a&gt;, we extracted the details of how to tune a guitar out of the &lt;code&gt;Guitar&lt;/code&gt; class. We &lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/#tune-low&#34;&gt;moved it&lt;/a&gt; to a separate &lt;code&gt;Tuner&lt;/code&gt; class. In that telling, we did so because it spoke to our sensibilities. It afforded us more space in the &lt;code&gt;Guitar&lt;/code&gt; class to focus on other responsibilities. It gave a central location to focus on tuning.&lt;/p&gt;&lt;p&gt;What if those justifications weren&amp;rsquo;t enough? What if we needed metrics to give an explanation for our refactoring? Let&amp;rsquo;s use the guidance from a tool called &lt;a href=&#34;https://github.com/seattlerb/flog&#34;&gt;flog&lt;/a&gt; to guide our changes.&lt;/p&gt;&lt;h2 id=&#34;flog&#34;&gt;Flog &lt;a href=&#34;#flog&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Flog &lt;a href=&#34;https://github.com/seattlerb/flog#label-DESCRIPTION-3A&#34;&gt;describes itself&lt;/a&gt; as a tool that:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;reports the most tortured code in an easy to read pain report. The higher the score, the more pain the code is in.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You point flog to a file, or directory, and it provides you with a score. The higher the score, the more attention you might want to pay to it. As for how flog calculates the number, I&amp;rsquo;ll let flog &lt;a href=&#34;https://ruby.sadi.st/Flog.html&#34;&gt;summarize itself&lt;/a&gt; again:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Flog essentially scores an ABC metric: Assignments, Branches, Calls, with particular attention placed on calls.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;rsquo;s look at the flog score of our &lt;code&gt;Guitar&lt;/code&gt; class with all the tuning details inside the class:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ flog guitar_with_tuning.rb -a&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;65.6: flog total&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9.4: flog/method average&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;16.8: Guitar#standard_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;16.8: Guitar#down_half_step_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;13.0: Guitar#tune&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6.6: Guitar#pick&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5.2: Guitar#initialize&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4.3: Guitar#restring&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3.0: Guitar#none&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s investigate the method with the biggest flog score.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standard_tuning&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We know that flog is particularly attuned to looking for calls. Each line in this method has a call to access an element in an array, and then another call to the &lt;code&gt;tune&lt;/code&gt; method. That&amp;rsquo;s two calls per line, with six lines in the method.&lt;/p&gt;&lt;h2 id=&#34;what-do-we-do-with-the-number&#34;&gt;What do we do with the number? &lt;a href=&#34;#what-do-we-do-with-the-number&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, bigger is worse, but how big is bad? At what number should you take action? Thoughtbot&amp;rsquo;s &lt;a href=&#34;https://github.com/thoughtbot/ruby-science&#34;&gt;Ruby Science&lt;/a&gt; book suggests a method is long or complex with a flog score above 10. It also posits that a class is long or complex with a flog score above 50.&lt;/p&gt;&lt;p&gt;With those heuristics in mind, our &lt;code&gt;Guitar&lt;/code&gt; class is long, and all the methods related to tuning are long as well. Let&amp;rsquo;s start by looking at the public method in that class, the method to tune the guitar:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tune&lt;/span&gt;(tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    standard_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:down_half_step&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    down_half_step_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:drop_d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    drop_d_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown tuning&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The technique I&amp;rsquo;d start with to simplify a complex method is to extract smaller methods from it. However, there doesn&amp;rsquo;t seem to be much gained from that here. This happens to be a really long case statement, each branch of which calls another method.&lt;/p&gt;&lt;p&gt;In an attempt to achieve a lower flog score, I&amp;rsquo;m going to rely on the similar naming of each of these tuning methods. I&amp;rsquo;ll reach for a different tool: metaprogramming.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tune&lt;/span&gt;(tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown tuning&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALID_TUNINGS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(tuning)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;tuning&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_tuning&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What does flog think about this change?&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ flog guitar_tuning_metaprogramming.rb&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;58.1: flog total&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;8.3: flog/method average&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5.6: Guitar#tune&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The flog score decreased from 13 to 5.6. A clear improvement - in the eyes of the metric. Is it better though? I&amp;rsquo;d argue that&amp;rsquo;s still a matter of taste. How do you feel about the metaprogramming? How comfortable will you and your team be maintaining this? What pressure does the required naming scheme for any of the tuning methods place on your system? Consider these questions to decide whether to make this change, regardless of the flog score.&lt;/p&gt;&lt;h2 id=&#34;extract-class&#34;&gt;Extract Class &lt;a href=&#34;#extract-class&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Even with this change, we still have a class that has a flog score over 50. That puts it in the &amp;ldquo;too long&amp;rdquo; category, according to Ruby Science. So, let&amp;rsquo;s do what we did in the prior post and move everything related to tuning into a &lt;code&gt;Tuner&lt;/code&gt; class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tuner&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(guitar)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tune&lt;/span&gt;(tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standard_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;down_half_step_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;drop_d_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open_a_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modal_c_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;all_fourths_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;all_fifths_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We still need to tune our guitar. We achieve that by delegating this responsibility to our &lt;code&gt;Tuner&lt;/code&gt; class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tune&lt;/span&gt;(tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Tuner&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tune(tuning)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What does that mean for our flog score?&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ flog guitar_separate_tuner.rb&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;18.9: flog total&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3.8: flog/method average&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unsurprisingly, deleting most of the code in a class reduces the complexity of that class. We didn&amp;rsquo;t get rid of the complexity though. We just moved it somewhere else. Let&amp;rsquo;s check the flog score of our new &lt;code&gt;Tuner&lt;/code&gt; class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ flog tuner.rb&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;58.6: flog total&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;11.7: flog/method average&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;25.2: Tuner#standard_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;25.2: Tuner#down_half_step_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5.3: Tuner#tune&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The complexity of our tuning methods actually got &lt;em&gt;worse&lt;/em&gt;, increasing from 16.8 to 25.2. That&amp;rsquo;s because we added another call on each of our lines.&lt;/p&gt;&lt;p&gt;Tuning one string used to look like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But now we need to find the string from the guitar that&amp;rsquo;s passed into the tuner.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;extracting-new-concepts&#34;&gt;Extracting new concepts &lt;a href=&#34;#extracting-new-concepts&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To handle the complexity, we&amp;rsquo;re going to reshuffle the responsibility of these ideas. Right now the methods for the different tunings tune each string of the guitar. Instead, let&amp;rsquo;s have the tunings only know what notes to tune the strings to.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll also extract each of these tunings out to a separate module.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; StandardTuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pitches&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      { &lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      { &lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      { &lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      { &lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      { &lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      { &lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we want to add a new tuning, we add a new module, rather than another method on the &lt;code&gt;Tuner&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;The act of tuning is now isolated into the &lt;code&gt;Tuner#tune&lt;/code&gt; method.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tuner&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tune&lt;/span&gt;(tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown tuning&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;VALID_TUNINGS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(tuning)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pitches_for(tuning)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each_with_index &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;pitch, index&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;tune(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;pitch)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pitches_for&lt;/span&gt;(tuning)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;const_get(tuning_class_name(tuning))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pitches&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tuning_class_name&lt;/span&gt;(tuning)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;tuning&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_tuning&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:capitalize&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Keeping with our original refactor, this still uses metaprogramming. This time we use it to recall the appropriate module to get the pitches from.&lt;/p&gt;&lt;p&gt;What does flog think about this?&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ flog tuner_without_tunings.rb&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21.9: flog total&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4.4: flog/method average&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;8.5: Tuner#tune&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6.8: Tuner#tuning_class_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3.6: Tuner#pitches_for&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;Tuner&lt;/code&gt; class has a flog score under 50, and all the methods are under 10. But, like last time, did we just shift the complexity into our extracted tuning modules?&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ flog standard_tuning.rb -a&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.5: flog total&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.5: flog/method average&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.5: StandardTuning::pitches&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ flog down_half_step_tuning.rb -a&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.5: flog total&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.5: flog/method average&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.5: DownHalfStepTuning::pitches&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each of these is lightweight - a single method returning an array of hashes. According to Ruby Science&amp;rsquo;s heuristics, we no longer have complex methods or classes!&lt;/p&gt;&lt;h2 id=&#34;flog-as-a-forcing-function&#34;&gt;Flog as a forcing function &lt;a href=&#34;#flog-as-a-forcing-function&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At the time I didn&amp;rsquo;t refer to flog when making these changes. But it was interesting to reconstruct them with a dedicated focus on their flog scores. When you don&amp;rsquo;t have any intuition around the complexity of a piece of code, it can help as an objective source.&lt;/p&gt;&lt;p&gt;Choosing to lean on some of these changes would require more than only the score. Introducing the metaprogramming would depend on my team&amp;rsquo;s attitude towards that language feature.&lt;/p&gt;&lt;p&gt;Those high flog numbers may have driven me to explore different options. I may not have gotten to the point of building separate modules for the tunings. That freed any given class to know about &lt;em&gt;every&lt;/em&gt; different tuning. Paying attention to the flog score pushed me in ways I may not have otherwise considered.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Composing Our Own Guitar Amps From Inherited Gear</title>
       <link>https://kevinjmurphy.com/posts/composing-our-own-guitar-amps-from-inherited-gear/</link>
       <pubDate>Sat, 15 Apr 2023 15:00:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/composing-our-own-guitar-amps-from-inherited-gear/</guid>
       <description>&lt;h2 id=&#34;anyone-can-play-guitar-series&#34;&gt;Anyone Can Play Guitar Series &lt;a href=&#34;#anyone-can-play-guitar-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/enumerating-musical-notes/&#34;&gt;Enumerating Musical Notes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/&#34;&gt;Revisiting Calling Sonic Pi From Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;Programming Guitar Greatness&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Composing Our Own Guitar Amps From Inherited Gear&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/flog-driven-development/&#34;&gt;Flog-Driven Development&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;getting-amped-up&#34;&gt;Getting Amped Up &lt;a href=&#34;#getting-amped-up&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I &lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/#power-amp&#34;&gt;previously proposed&lt;/a&gt; a simplified description of an amplifier. They amplify sounds with the help of two components: a pre amp and a power amp. The sound changes as it progresses through the pre amp and power amp. Finally, it projects through the speaker.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amplify&lt;/span&gt;(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pre_amp_stage(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    power_amp_stage(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this in place, our system can output sound. That&amp;rsquo;d make a pretty short blog post - but we&amp;rsquo;re not done. Guitarists like fiddling with gear. There are many different kinds of amplifiers they may use.&lt;/p&gt;&lt;h2 id=&#34;tube-amp&#34;&gt;Tube Amp &lt;a href=&#34;#tube-amp&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A tube amp uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Vacuum_tube&#34;&gt;vacuum tubes&lt;/a&gt; to output sound, which is how it gets its name. Guitarists love these amps because of the way they modify the sound of a guitar. The tone that comes out of a tube amp is often described as warm. And as you push the amp to higher volumes, it sounds even warmer.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TubeAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pre_amp_tone&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; low_volume? &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; mid_volume?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;💡&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; high_volume?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;🔥&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately, these vacuum tubes are relatively &lt;strong&gt;heavy&lt;/strong&gt; electrical components. It&amp;rsquo;s a good thing they sound so good. So good that a guitarist is willing to risk the health of their back lugging them on and off stage.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TubeAmp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weight&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:heavy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Right now, our amp can change the sound to provide its signature warmth. It can also put you at risk of months of physical therapy. One thing it can&amp;rsquo;t do yet is output that sound. We already built that functionality with our &lt;code&gt;Amplifier&lt;/code&gt; class. We&amp;rsquo;ll add it into our tube amp by inheriting from the amplifier we&amp;rsquo;ve already built.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TubeAmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TubeAmp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;respond_to?(&lt;span style=&#34;color:#e6db74&#34;&gt;:amplify&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;solid-state-amp&#34;&gt;Solid State Amp &lt;a href=&#34;#solid-state-amp&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Solid state amps have a different tone profile than tube amps. They&amp;rsquo;re described as having a clean sound - as clear as glass. That tone persists no matter how much you push the amp past breakup. It maintains its relative clarity, as opposed to tube amps that get even warmer.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SolidStateAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pre_amp_tone&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;🫙&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A solid state amp uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Transistor&#34;&gt;transistors&lt;/a&gt; to send signals to the speaker. These are much lighter than vacuum tubes, and easier on your back.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SolidStateAmp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weight&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:light&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A solid state amp also needs to amplify sound like a tube amp. Let&amp;rsquo;s do the same thing and inherit from the &lt;code&gt;Amplifier&lt;/code&gt; class to gain that behavior.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SolidStateAmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SolidStateAmp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;respond_to?(&lt;span style=&#34;color:#e6db74&#34;&gt;:amplify&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;inheritance&#34;&gt;Inheritance &lt;a href=&#34;#inheritance&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;With both our tube amp and solid state amp, we inherited from an amplifier class. The &lt;code&gt;Amplifier&lt;/code&gt; has all the behavior that&amp;rsquo;s consistent between different types of amps. By inheriting from it, the amps gain that behavior and structure without having to rewrite it. Those amps then apply their specialization on top of it. Both amps produce a different tone. The different electrical components they use result in different weights.&lt;/p&gt;&lt;p&gt;Inheritance works well here because each of these amplifiers &lt;strong&gt;are&lt;/strong&gt; still an amplifier. They share the same basic data and behavior, and should continue to have that in common. They have pieces that make their interaction with, or use of, that data or behavior special.&lt;/p&gt;&lt;p&gt;We encode that specialization in that class, and still use the original behavior. &lt;code&gt;Amplifier#amplify&lt;/code&gt; pushes our sound through its &lt;code&gt;pre_amp_stage&lt;/code&gt; method. That stage modifies the sound with the amp&amp;rsquo;s &lt;code&gt;pre_amp_tone&lt;/code&gt;. That allows a tube amp to have its characteristic warmth and a solid state amp to apply its clarity.&lt;/p&gt;&lt;h2 id=&#34;hybrid-amp&#34;&gt;Hybrid Amp &lt;a href=&#34;#hybrid-amp&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s build one more type of amp - one that aims to be the best of both worlds. A hybrid amp takes parts of a tube amp and other parts from a solid state amp and combines them.&lt;/p&gt;&lt;p&gt;We want both tube and solid state behavior. Let&amp;rsquo;s attempt the same inheritance approach we&amp;rsquo;ve used so far.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HybridAmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TubeAmp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;SolidStateAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we load up our console we&amp;rsquo;ll see an error about our class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(irb):&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: syntax error, unexpected &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, expecting &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SyntaxError&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ruby doesn&amp;rsquo;t support &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_inheritance&#34;&gt;multiple inheritance&lt;/a&gt;. We can only have a single class that we inherit from. But we know our &lt;code&gt;HybridAmp&lt;/code&gt; needs behavior that&amp;rsquo;s the same as each of these other classes. To consider a different approach, let&amp;rsquo;s revisit our definition of an amplifier.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amplify&lt;/span&gt;(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pre_amp_stage(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    power_amp_stage(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each amplifier has a pre amp and a power amp. Let&amp;rsquo;s build separate modules for each of these components&amp;rsquo; behavior.&lt;/p&gt;&lt;p&gt;A hybrid amp has a tube amp pre amp to replicate its warmth.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; TubePreAmp&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pre_amp_tone&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; low_volume? &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; mid_volume?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;💡&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; high_volume?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;🔥&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By including this module in our amp, any &lt;code&gt;HybridAmp&lt;/code&gt; instances will gain all the behavior in the module.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HybridAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TubePreAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;HybridAmp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;volume&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_amp_tone&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;🔥&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A hybrid amp uses the same power amp as solid state amps to save some weight.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; SolidStatePowerAmp&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;power_amp_weight&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:light&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike inheritance, we can include as many modules as we&amp;rsquo;d like. Let&amp;rsquo;s also include the &lt;code&gt;SolidStatePowerAmp&lt;/code&gt; behavior in our &lt;code&gt;HybridAmp&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HybridAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TubePreAmp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;SolidStatePowerAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;HybridAmp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;volume&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;power_amp_weight&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:light&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A hybrid amp is still a kind of amplifier, and it still needs the ability to amplify sound. As such, we are &lt;em&gt;also&lt;/em&gt; going to use inheritance here. Our hybrid amp is a specialization of &lt;code&gt;Amplifier&lt;/code&gt;, just like a tube or solid state amp. Its specializations come from the modules it includes.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HybridAmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TubePreAmp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;SolidStatePowerAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;HybridAmp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;volume&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; amp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;respond_to?(&lt;span style=&#34;color:#e6db74&#34;&gt;:amplify&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;composition&#34;&gt;Composition &lt;a href=&#34;#composition&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We are unable to pull behavior from multiple places with inheritance. We couldn&amp;rsquo;t apply our initial strategy to build our hybrid amp. We didn&amp;rsquo;t want to duplicate the behavior. They are &lt;strong&gt;intentionally&lt;/strong&gt; the same. We needed a different approach.&lt;/p&gt;&lt;p&gt;We can combine sets of related behavior in modules, and share them between classes. We compose those modules together in our classes to use the behavior they provide.&lt;/p&gt;&lt;p&gt;With this composition approach, our tube and solid state amps become pretty small.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TubeAmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TubePreAmp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;TubePowerAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SolidStateAmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SolidStatePreAmp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;SolidStatePowerAmp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The special behavior for each of the amps lives in the modules so that different amp types can use them. We use modules to share that behavior across classes. That allows our hybrid amp to operate the same way as parts of our other amps.&lt;/p&gt;&lt;p&gt;Next let&amp;rsquo;s dig into a &lt;a href=&#34;https://kevinjmurphy.com/posts/flog-driven-development/&#34;&gt;tool&lt;/a&gt; that can help guide some of the code organization decisions we&amp;rsquo;ve made while building our guitar and amps.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Programming Guitar Greatness</title>
       <link>https://kevinjmurphy.com/posts/programming-guitar-greatness/</link>
       <pubDate>Sat, 18 Mar 2023 07:00:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/programming-guitar-greatness/</guid>
       <description>&lt;h2 id=&#34;anyone-can-play-guitar-series&#34;&gt;Anyone Can Play Guitar Series &lt;a href=&#34;#anyone-can-play-guitar-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/enumerating-musical-notes/&#34;&gt;Enumerating Musical Notes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/&#34;&gt;Revisiting Calling Sonic Pi From Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Programming Guitar Greatness&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/composing-our-own-guitar-amps-from-inherited-gear/&#34;&gt;Composing Our Own Guitar Amps From Inherited Gear&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/flog-driven-development/&#34;&gt;Flog-Driven Development&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;I use heavy strings, tune low, play hard, and floor it. Floor it. That&amp;rsquo;s technical talk.&amp;ndash; &lt;a href=&#34;https://twitter.com/srvofficial/status/836589348489424896?lang=en&#34;&gt;Stevie Ray Vaughan&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Stevie Ray Vaughan is one of my favorite guitarists. Unfortunately, I can&amp;rsquo;t play anything like he can. To make up for it, let&amp;rsquo;s teach a computer to play guitar like him and see what we can learn.&lt;/p&gt;&lt;p&gt;Hit play for some background music or inspiration, and let&amp;rsquo;s get started.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KC5H9P4F5Uk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;use-heavy-strings&#34;&gt;Use Heavy Strings &lt;a href=&#34;#use-heavy-strings&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Guitars have many strings (typically six) that you manipulate to make different sounds. To build a system to play guitar, it needs to know about strings. To avoid any &lt;a href=&#34;https://ruby-doc.org/3.1.2/String.html&#34;&gt;potential confusion&lt;/a&gt;, we&amp;rsquo;ll build a &lt;code&gt;GuitarString&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;Different strings on a guitar are different thicknesses. Thicker strings play notes at a lower frequency than thinner strings. We measure this string thickness in thousands of an inch.&lt;/p&gt;&lt;p&gt;A set of standard strings is a set of nines. The thinnest string in the set is 0.009 inches thick. Stevie Ray Vaughan played a set of 13s that were even thicker on the low end than a stock set of 13s.&lt;/p&gt;&lt;p&gt;These strings are hard to bend, hard to move, and hard to play with. Stevie called them &amp;ldquo;heavy&amp;rdquo;. We&amp;rsquo;ll know if a string is heavy by comparing it to a standard set.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GuitarString&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heavy?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gauge_number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; common_gauge_number&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;use-domain-terms&#34;&gt;Use Domain Terms &lt;a href=&#34;#use-domain-terms&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We taught our computer about guitar strings using the language of a guitarist. I would typically refer to a wire as having a particular thickness. Stevie referred to his strings as being &amp;ldquo;heavy&amp;rdquo;. To represent his description, we&amp;rsquo;ll use words that resonate in the world our system models. Our guitar strings are &amp;ldquo;heavy&amp;rdquo;, not &amp;ldquo;thick&amp;rdquo;.&lt;/p&gt;&lt;h2 id=&#34;tune-low&#34;&gt;Tune Low &lt;a href=&#34;#tune-low&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We tune each string on a guitar to a note. The most common combination of string tunings is standard tuning. Stevie didn&amp;rsquo;t play in standard tuning. He tuned down a half step. Each string is tuned to a slightly lower pitch than you&amp;rsquo;d regularly expect.&lt;/p&gt;&lt;p&gt;To support this, we need to be able to to tune the guitar. We need to be able to tune the guitar to standard tuning, and down a half step. We&amp;rsquo;ll accept which tuning to use for our guitar as an argument to a &lt;code&gt;tune&lt;/code&gt; method. We&amp;rsquo;ll switch on that argument to implement that tuning.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tune&lt;/span&gt;(tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      standard_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:down_half_step&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      down_half_step_tuning&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These aren&amp;rsquo;t the only tunings possible for a guitar. There are a &lt;strong&gt;lot&lt;/strong&gt; of them. Supporting more will mean this method gets more complex. Our guitar class gets more complex.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tune&lt;/span&gt;(tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standard_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;down_half_step_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;drop_d_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open_a_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modal_c_tuning&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we handle more and more tunings, our guitar grows in complexity. It starts to look like an instrument primarily responsible for tuning itself. The number of methods that have to do with tuning takes away from the more exciting things you can do with a guitar.&lt;/p&gt;&lt;p&gt;To focus on a guitar&amp;rsquo;s other responsibilities, let&amp;rsquo;s extract this logic. A &lt;code&gt;Tuner&lt;/code&gt; class will take a guitar as a dependency and know how to tune it to a variety of tunings. That changes the implementation in our &lt;code&gt;Guitar&lt;/code&gt; class to look like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tune&lt;/span&gt;(tuning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:standard&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Tuner&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tune(tuning)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All the complexity of different guitar tunings is still in our system. It&amp;rsquo;s in the &lt;code&gt;Tuner&lt;/code&gt; class now, not &lt;code&gt;Guitar&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&#34;extract-related-behavior&#34;&gt;Extract Related Behavior &lt;a href=&#34;#extract-related-behavior&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In a system responsible for playing the guitar, that class attracts a lot of behavior. That can make understanding all the responsibilities that the class has difficult. When we can identify a set of related behaviors, we should explore moving it into a separate class.&lt;/p&gt;&lt;p&gt;An early indicator of this can be when related methods are physically grouped together in a class. Especially when those methods don&amp;rsquo;t have anything to do with other parts of a class. Our guitar had a lot of different methods for each of the different tunings. We moved those out of the class and into another that&amp;rsquo;s responsible for all possible tunings.&lt;/p&gt;&lt;p&gt;Even if this class isn&amp;rsquo;t reused or composed in other classes, there&amp;rsquo;s value here. We&amp;rsquo;ve freed up complexity inside the &lt;code&gt;Guitar&lt;/code&gt; class, while not taking away any of its ability. We can still tune the guitar to any number of tunings. We don&amp;rsquo;t need to worry ourselves with the implementation details of &lt;em&gt;how&lt;/em&gt; most of the time. And when we do need to dig into how a guitar gets tuned, we know where to look. We don&amp;rsquo;t need to dig into the depths of various private methods in &lt;code&gt;Guitar&lt;/code&gt;. We can start with our aptly-named &lt;code&gt;Tuner&lt;/code&gt; class.&lt;/p&gt;&lt;h2 id=&#34;play-hard&#34;&gt;Play Hard &lt;a href=&#34;#play-hard&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We make sounds on our guitar by plucking the strings with one hand. The other hand presses down on the strings on the neck of the guitar. The neck has many sections called frets. Pressing down on each of these plays a higher frequency as you move up the neck towards your other hand.&lt;/p&gt;&lt;p&gt;Our &lt;code&gt;GuitarString&lt;/code&gt; knows which note we play, based on what note it&amp;rsquo;s tuned to and which fret our hand is on. But we don&amp;rsquo;t say we play the guitar strings - we play the guitar.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;string&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: fret)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this implementation, we get back the note of the sound the guitar makes.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;guitar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Guitar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tune&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick(&lt;span style=&#34;color:#e6db74&#34;&gt;string&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compose-collaborators&#34;&gt;Compose Collaborators &lt;a href=&#34;#compose-collaborators&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Much like with our tuning, our public interface is through the guitar. Again, the majority of our work isn&amp;rsquo;t done by the &lt;code&gt;Guitar&lt;/code&gt; class. Its responsibility is taking the input and passing it off to a collaborating class. Here, it figures out which of the strings is being played, and sends it the &lt;code&gt;pluck&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;GuitarString&lt;/code&gt; handles the hard work of which musical note comes out of the guitar. The &lt;code&gt;Guitar&lt;/code&gt; knows how to work with its strings to achieve the result that the caller asked for.&lt;/p&gt;&lt;h2 id=&#34;floor-it&#34;&gt;Floor It &lt;a href=&#34;#floor-it&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s not enough to know which note we&amp;rsquo;re playing. It&amp;rsquo;s a start, but doesn&amp;rsquo;t tell the full story about how what we play sounds. We also need to know which &lt;em&gt;octave&lt;/em&gt; of the note we&amp;rsquo;re playing.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll change our &lt;code&gt;GuitarString&lt;/code&gt; class to return not only the note, but also the octave. We return both elements in an &lt;a href=&#34;https://ruby-doc.org/3.1.2/Array.html&#34;&gt;array&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GuitarString&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pluck&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;note, octave&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s display all this data.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;note &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick(hand_position)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We know that the first element is the note, and the last element is the octave. We know that because we just wrote it, and it&amp;rsquo;s sitting right above our use of it. However, it&amp;rsquo;s not obvious in other cases what each of these elements refers to.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll address that by building a &lt;a href=&#34;https://kevinjmurphy.com/posts/enumerating-musical-notes/&#34;&gt;custom Note class&lt;/a&gt; and returning it in &lt;code&gt;GuitarString#pluck&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GuitarString&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pluck&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: @tuning_note,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;: @tuning_octave,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: fret,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That will change our display logic.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;note &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick(hand_position)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;octave&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s clear what the data is that we&amp;rsquo;re displaying. It&amp;rsquo;s not the first element, it&amp;rsquo;s the note value. It&amp;rsquo;s not the last element, it&amp;rsquo;s the note octave.&lt;/p&gt;&lt;p&gt;We could achieve a similar result by using a &lt;a href=&#34;https://ruby-doc.org/3.1.2/Hash.html&#34;&gt;Hash&lt;/a&gt;. That will allow us to name the data elements we refer to in our display logic.&lt;/p&gt;&lt;p&gt;By moving to a separate class, we can also associate behavior with this data.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Note&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;octave&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;upcase&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flat?&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;octave&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our display logic doesn&amp;rsquo;t even need to know about the internals of the &lt;code&gt;Note&lt;/code&gt; class. Instead, it just needs to ask it to display itself.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick(hand_position)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;elevate-primitives-to-objects&#34;&gt;Elevate Primitives to Objects &lt;a href=&#34;#elevate-primitives-to-objects&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We needed to return a collection of information out of our &lt;code&gt;GuitarString#pluck&lt;/code&gt; method. Callers need both the note and octave to know what our output sounds like. We started with a primitive data structure from Ruby, an Array.&lt;/p&gt;&lt;p&gt;That worked, but wasn&amp;rsquo;t very clear what all the data elements represented. We can bring clarity to that with another primitive, a Hash. Later on, we wanted to exercise custom behavior on top of this collection of data. To do that, we made a separate class that encapsulates this data &lt;strong&gt;and&lt;/strong&gt; related behavior.&lt;/p&gt;&lt;h2 id=&#34;thats-technical-talk&#34;&gt;That&amp;rsquo;s Technical Talk &lt;a href=&#34;#thats-technical-talk&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We now have a system that knows how to play guitar &lt;em&gt;just like&lt;/em&gt; Stevie Ray Vaughan did. Except for all the talent, the feeling, the creativity, and the humanity that went into his playing.&lt;/p&gt;&lt;p&gt;Along the way, we reinforced concepts by using domain terminology. We identified related behavior within a class and extracted it to a separate class. We collaborated with those extractions to build up our system. Our public interfaces (like the &lt;code&gt;Guitar#pick&lt;/code&gt; method) don&amp;rsquo;t need to house the complexity. And we built more classes to replace primitive data structures. When we identified behavior related to that data, we had a natural landing place for it.&lt;/p&gt;&lt;p&gt;I hope this Texas-sized flood of information helps in your next domain modeling exercise.&lt;/p&gt;&lt;p&gt;We can go a step further. Now that we know how to play guitar, let&amp;rsquo;s &lt;a href=&#34;https://kevinjmurphy.com/posts/composing-our-own-guitar-amps-from-inherited-gear/&#34;&gt;build some amps&lt;/a&gt; so people can hear us play.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Speaking at Blue Ridge Ruby</title>
       <link>https://kevinjmurphy.com/posts/blue-ridge-ruby-2023/</link>
       <pubDate>Wed, 15 Mar 2023 17:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/blue-ridge-ruby-2023/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m thrilled to be part of the &lt;a href=&#34;https://blueridgeruby.com/#program&#34;&gt;program&lt;/a&gt; for Blue Ridge Ruby 2023 in Asheville, North Carolina.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ll be &lt;a href=&#34;https://blueridgeruby.com/speakers/kevin-murphy/&#34;&gt;speaking&lt;/a&gt; about Ruby&amp;rsquo;s Coverage module. I hope you can join us!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Duped into modifying a frozen hash</title>
       <link>https://kevinjmurphy.com/posts/modify-frozen-hash/</link>
       <pubDate>Fri, 17 Feb 2023 19:00:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/modify-frozen-hash/</guid>
       <description>&lt;h2 id=&#34;flash-freeze&#34;&gt;Flash Freeze &lt;a href=&#34;#flash-freeze&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can freeze a hash to prevent modifying its contents. The effect of freezing the hash is only one level deep. The values in the hash aren&amp;rsquo;t frozen. As expected, I can&amp;rsquo;t change the entire value of a key.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;four&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(irb):&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;lt;main&amp;gt;&amp;#39;: can&amp;#39;t modify frozen Hash: {:c=&amp;gt;&amp;#34;three&amp;#34;} (FrozenError)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, I can modify a string value in the frozen hash.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;upcase!&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;THREE&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;THREE&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can also modify a hash inside the frozen hash.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: { &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; } }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And modify an array inside the frozen hash.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;map!(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:even?&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can modify an instance of an object inside a frozen hash.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&amp;lt;User:0x000000010b50f8c8 @first_name=&amp;#34;Alice&amp;#34;&amp;gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&amp;lt;User:0x000000010b50f8c8 @first_name=&amp;#34;Alice&amp;#34;&amp;gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Carol&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Carol&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&amp;lt;User:0x000000010b50f8c8 @first_name=&amp;#34;Carol&amp;#34;&amp;gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The immutability isn&amp;rsquo;t &amp;ldquo;deep&amp;rdquo;. It&amp;rsquo;s shallow. It doesn&amp;rsquo;t nest down to lower levels. Adding deep freezing to Ruby itself has been &lt;a href=&#34;https://bugs.ruby-lang.org/issues/2509&#34;&gt;discussed&lt;/a&gt;. There are also gems that you can use to recursively freeze objects.&lt;/p&gt;&lt;p&gt;The affect of freeze only being shallow isn&amp;rsquo;t specific to a hash. It applies to other data structures and objects as well. However, I specifically want to talk about hashes because&amp;hellip;&lt;/p&gt;&lt;h2 id=&#34;frozen-rails-shot&#34;&gt;Frozen Rail(s) Shot &lt;a href=&#34;#frozen-rails-shot&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Rails includes a &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; &lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveSupport/HashWithIndifferentAccess.html&#34;&gt;class&lt;/a&gt;. That class considers the keys &lt;code&gt;:a&lt;/code&gt; and &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; to be the same key. It&amp;rsquo;s part of &lt;code&gt;ActiveSupport&lt;/code&gt;, and that also includes a &lt;a href=&#34;https://github.com/rails/rails/blob/7-0-stable/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb#L9-L11&#34;&gt;core extension&lt;/a&gt; to the hash class. That lets you call &lt;code&gt;.with_indifferent_access&lt;/code&gt; on a hash to transform it into a hash with indifferent access.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Hash&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;with_indifferent_access&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveSupport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HashWithIndifferentAccess&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(self)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use a &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; like this.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_indifferent_access&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;005&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;006&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also freeze a hash with indifferent access. It&amp;rsquo;s like freezing a hash in the ways described above. It still only applies one level deep.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;c&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_indifferent_access&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;four&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;can&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t modify frozen &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveSupport&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HashWithIndifferentAccess&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;} (&lt;span style=&#34;color:#66d9ef&#34;&gt;FrozenError&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;005&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;upcase!&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;THREE&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;006&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;THREE&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-cold-never-bothered-me-anyway&#34;&gt;The Cold Never Bothered Me Anyway &lt;a href=&#34;#the-cold-never-bothered-me-anyway&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; provides another way you can accidentally allow changes to a frozen hash.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(irb):&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: can&amp;#39;&lt;/span&gt;t modify frozen &lt;span style=&#34;color:#e6db74&#34;&gt;Hash&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;} (&lt;span style=&#34;color:#66d9ef&#34;&gt;FrozenError&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_indifferent_access&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;005&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here I created a frozen hash and could not modify it. I then called &lt;code&gt;with_indifferent_access&lt;/code&gt; on it. The resulting &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; &lt;em&gt;could&lt;/em&gt; change - even with the original hash frozen.&lt;/p&gt;&lt;h2 id=&#34;brain-freeze&#34;&gt;Brain Freeze &lt;a href=&#34;#brain-freeze&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Originally I guessed that maybe &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; is using the &lt;code&gt;dup&lt;/code&gt; &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Object.html#method-i-dup&#34;&gt;method&lt;/a&gt;. That does not preserve the frozen status of what it&amp;rsquo;s duplicating.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frozen?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; duplicated &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dup&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; duplicated&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frozen?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As an aside, &lt;code&gt;clone&lt;/code&gt; &lt;em&gt;will&lt;/em&gt; preserve the frozen status.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frozen?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cloned &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clone&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cloned&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frozen?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, my intuition was wrong. &lt;code&gt;dup&lt;/code&gt; doesn&amp;rsquo;t play a role in the source code. The constructor for &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; takes an argument. In our case it&amp;rsquo;s our original frozen hash. It will &lt;a href=&#34;https://github.com/rails/rails/blob/7-0-stable/activesupport/lib/active_support/hash_with_indifferent_access.rb#L71&#34;&gt;pass that argument&lt;/a&gt; to its &lt;code&gt;update&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;That will eventually &lt;a href=&#34;https://github.com/rails/rails/blob/7-0-stable/activesupport/lib/active_support/hash_with_indifferent_access.rb#L412-L417&#34;&gt;iterate&lt;/a&gt; through each key, value pair in the original hash and write it to the &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;other_hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each_pair &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;key, value&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; block &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; key?(key)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; block&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(convert_key(key), self&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, value)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regular_writer(convert_key(key), convert_value(value))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;regular_writer&lt;/code&gt; method is an &lt;a href=&#34;https://github.com/rails/rails/blob/7-0-stable/activesupport/lib/active_support/hash_with_indifferent_access.rb#L87&#34;&gt;alias&lt;/a&gt; for &lt;code&gt;[]=&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; is also indifferent about the original hash&amp;rsquo;s frozen status. It constructs a new hash, or hash-like object, setting its keys and values based on the original hash. Whether that original hash is frozen or not doesn&amp;rsquo;t matter. The new hash-like object is not.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frozen?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_indifferent_access&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frozen?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The frozen status of the &lt;em&gt;values&lt;/em&gt; do carry over though.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; frozen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not changing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;freeze&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not changing&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; frozen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_indifferent_access&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not changing&amp;#34;&lt;/span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; indifferent&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;upcase!&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(irb):&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`upcase!&amp;#39;: can&amp;#39;t modify frozen String: &amp;#34;not changing&amp;#34; (FrozenError)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The string in the value of &lt;code&gt;:a&lt;/code&gt; is still frozen, even after making it a hash with indifferent access.&lt;/p&gt;&lt;h2 id=&#34;things-got-real-quiet-real-fast-tenth-avenue-freeze-out&#34;&gt;Things Got Real Quiet Real Fast (Tenth Avenue Freeze-out) &lt;a href=&#34;#things-got-real-quiet-real-fast-tenth-avenue-freeze-out&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Calling &lt;code&gt;freeze&lt;/code&gt; on an object does give you certain (limited) immutability guarantees. Be particularly mindful of how you&amp;rsquo;re interacting with a frozen object. In my case, calling &lt;code&gt;h.freeze.with_indifferent_access&lt;/code&gt; left me &lt;em&gt;thinking&lt;/em&gt; I was working with a frozen hash with indifferent access. I was wrong. Flipping the order, and calling &lt;code&gt;h.with_indifferent_access.freeze&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; give me what I was expecting.&lt;/p&gt;&lt;p&gt;Stay cool!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ruby on Rails Podcast Appearance</title>
       <link>https://kevinjmurphy.com/posts/ruby-on-rails-podcast-appearance/</link>
       <pubDate>Wed, 08 Feb 2023 18:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-on-rails-podcast-appearance/</guid>
       <description>&lt;h2 id=&#34;the-ruby-on-rails-podcast&#34;&gt;The Ruby on Rails Podcast &lt;a href=&#34;#the-ruby-on-rails-podcast&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was a guest on &lt;a href=&#34;https://www.therubyonrailspodcast.com/456&#34;&gt;episode 456&lt;/a&gt; of The Ruby on Rails Podcast. We talked about BookBub, coverage, contributing to Ruby, and conference speaking.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m really thankful Brittany Martin asked me to come on. It&amp;rsquo;s a big honor for me to have appeared on the show.&lt;/p&gt;&lt;iframe src=&#34;https://player.fireside.fm/v2/3OC19MC9+n3dxA1IW?theme=dark&#34; width=&#34;740&#34; height=&#34;200&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;</description>
     </item>
   
     <item>
       <title>Anyone Can Play Guitar (With Ruby) Video Released</title>
       <link>https://kevinjmurphy.com/posts/rubyconf-mini-2022-video-released/</link>
       <pubDate>Mon, 06 Feb 2023 18:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubyconf-mini-2022-video-released/</guid>
       <description>&lt;h2 id=&#34;rubyconf-2022-videos-released&#34;&gt;RubyConf 2022 Videos Released &lt;a href=&#34;#rubyconf-2022-videos-released&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RubyCentral has released the videos from RubyConf and RubyConf Mini 2022 ontheir YouTube page. That includes my talk, &lt;a href=&#34;https://youtu.be/t0C75Z0LX20&#34;&gt;&amp;ldquo;Anyone Can Play Guitar (With Ruby)&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;My slides, proposal, code examples, and related blog posts are &lt;a href=&#34;https://kevinjmurphy.com/posts/play-guitar/&#34;&gt;available to accompany the talk&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;re curious for other talks to check out, you can see my &lt;a href=&#34;https://kevinjmurphy.com/posts/rubyconf-mini-2022-recap/&#34;&gt;RubyConf Mini recap&lt;/a&gt; for some ideas.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/t0C75Z0LX20&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
     </item>
   
     <item>
       <title>Evaluating More Coverage in Ruby 3.2</title>
       <link>https://kevinjmurphy.com/posts/evaluating-more-coverage-in-ruby-3-2/</link>
       <pubDate>Sat, 14 Jan 2023 16:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/evaluating-more-coverage-in-ruby-3-2/</guid>
       <description>&lt;h2 id=&#34;measuring-coverage-of-eval&#34;&gt;Measuring Coverage of Eval &lt;a href=&#34;#measuring-coverage-of-eval&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As I mentioned in my &lt;a href=&#34;https://kevinjmurphy.com/posts/my-first-code-commit-in-ruby/&#34;&gt;prior post&lt;/a&gt;, Ruby 3.2.0 has some changes to the &lt;code&gt;Coverage&lt;/code&gt; module. Now the module can measure the coverage of a Ruby expression in a string passed to the &lt;a href=&#34;https://ruby-doc.org/3.2.0/Kernel.html#method-i-eval&#34;&gt;eval&lt;/a&gt; method.&lt;/p&gt;&lt;p&gt;This is important because of templates. ERB, when we ask for the template through the &lt;a href=&#34;https://docs.ruby-lang.org/en/master/ERB.html#method-i-result&#34;&gt;result method&lt;/a&gt;, calls &lt;code&gt;eval&lt;/code&gt;. When Rails is rendering a view, that &lt;a href=&#34;https://github.com/rails/rails/blob/2f36f0a2bb9d6244035f37e62c978ac11ef88411/actionview/lib/action_view/template.rb#L368-L372&#34;&gt;also calls&lt;/a&gt; &lt;code&gt;eval&lt;/code&gt;. More specifically, Rails calls the &lt;code&gt;module_eval&lt;/code&gt; &lt;a href=&#34;https://ruby-doc.org/3.2.0/Module.html#method-i-module_eval&#34;&gt;method&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Have you wondered how much of the logic in your views is exercised in your test suite? Thanks to this change, now you can see that in tools like &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/pull/1037&#34;&gt;SimpleCov&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;feature-introduction&#34;&gt;Feature Introduction &lt;a href=&#34;#feature-introduction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s walk through an example demonstrating this functionality.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(eval: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;lines&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 &amp;gt; 2 ? &amp;#39;not reached&amp;#39; : &amp;#39;covered&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:lines&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(irb)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:lines&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to require the Coverage module first. After that, we ask coverage to start measuring with the &lt;code&gt;start&lt;/code&gt; method. Here we explicitly ask it to measure &lt;code&gt;eval&lt;/code&gt;. We&amp;rsquo;re using lines coverage to answer how many times each line is run.&lt;/p&gt;&lt;p&gt;We call &lt;code&gt;eval&lt;/code&gt;, passing a string with a ternary statement. We also pass in the optional filename and line number parameters as well. We check our measurement with the &lt;code&gt;result&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;The keys of that hash are file names, or places, where Ruby measures coverage. Because we passed in the filename parameter in our &lt;code&gt;eval&lt;/code&gt; call, the &lt;code&gt;eval&lt;/code&gt; coverage has a key of the filename passed to &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Lines coverage provides an array of numbers. Each number tells us how many times each line was executed. The first item in the array, at index 0, is how many times the first line was executed. Here we see our first line of our single-line &lt;code&gt;eval&lt;/code&gt; statement was executed once, as we&amp;rsquo;d expect.&lt;/p&gt;&lt;h2 id=&#34;opting-in-to-eval&#34;&gt;Opting in to eval &lt;a href=&#34;#opting-in-to-eval&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In Ruby 3.2.0, measuring coverage of &lt;code&gt;eval&lt;/code&gt; statements is optional. By default,coverage will &lt;em&gt;not&lt;/em&gt; measure &lt;code&gt;eval&lt;/code&gt; coverage. You must explicitly tell it to bypassing &lt;code&gt;eval: true&lt;/code&gt; to &lt;code&gt;Coverage.start&lt;/code&gt;. Notice how we have no coverage resultswithout passing &lt;code&gt;eval: true&lt;/code&gt;. That&amp;rsquo;s because otherwise, Coverage is looking tomeasure loaded files.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;lines&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 &amp;gt; 2 ? &amp;#39;not reached&amp;#39; : &amp;#39;covered&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the &lt;code&gt;:all&lt;/code&gt; option will also measure the coverage of &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;:all&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 &amp;gt; 2 ? &amp;#39;not reached&amp;#39; : &amp;#39;covered&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(irb)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:lines&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:branches&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{}, &lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{}},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;span style=&#34;color:#e6db74&#34;&gt;:lines&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:branches&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:if&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:then&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}}, &lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{}}}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setting-the-mode&#34;&gt;Setting the Mode &lt;a href=&#34;#setting-the-mode&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I have unintentionally demonstrated this when showing the &lt;code&gt;:all&lt;/code&gt; option, but youcan measure coverage of &lt;code&gt;eval&lt;/code&gt; statements with the &lt;a href=&#34;https://kevinjmurphy.com/posts/rubys-got-you-covered/#coverage-modes&#34;&gt;different modes available&lt;/a&gt; in Coverage.&lt;/p&gt;&lt;p&gt;Our &lt;code&gt;eval&lt;/code&gt; statement has two code paths on a single line because it&amp;rsquo;s a ternary.Let&amp;rsquo;s measure the branches coverage of our statement.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(eval: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;branches&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 &amp;gt; 2 ? &amp;#39;not reached&amp;#39; : &amp;#39;covered&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:branches&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:if&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:then&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}}}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(irb)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:branches&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{}}}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we see that we&amp;rsquo;ve executed the &lt;code&gt;else&lt;/code&gt; statement of our if test, but not the other side (the &lt;code&gt;then&lt;/code&gt;) of our conditional. A more in-depth explanation of this output is available &lt;a href=&#34;https://kevinjmurphy.com/posts/rubys-got-you-covered/#branches-coverage&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;mode-required&#34;&gt;Mode Required &lt;a href=&#34;#mode-required&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Generally&lt;/em&gt;, Coverage will start in lines mode when provided no options in &lt;code&gt;start&lt;/code&gt;. However, I&amp;rsquo;ve noticed that when you ask Coverage to start and measure eval coverage, you &lt;strong&gt;must&lt;/strong&gt; also specify the mode(s) you want to measure.&lt;/p&gt;&lt;p&gt;As you can see, starting Coverage with eval on and no mode gives us no coverageresults.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(eval: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 &amp;gt; 2 ? &amp;#39;not reached&amp;#39; : &amp;#39;covered&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filename.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(irb)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{}}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;credit&#34;&gt;Credit &lt;a href=&#34;#credit&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thank you to &lt;a href=&#34;https://github.com/ioquatix&#34;&gt;Samuel Williams&lt;/a&gt; for introducing this functionality into the Rubycodebase. Thank you to &lt;a href=&#34;https://github.com/mame&#34;&gt;Yusuke Endoh&lt;/a&gt; for adding it to SimpleCov, and also forwriting and maintaining &lt;em&gt;most&lt;/em&gt; of the Coverage functionality available in Ruby&amp;rsquo;sstandard library.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>My First Code Commit in Ruby</title>
       <link>https://kevinjmurphy.com/posts/my-first-code-commit-in-ruby/</link>
       <pubDate>Thu, 29 Dec 2022 12:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/my-first-code-commit-in-ruby/</guid>
       <description>&lt;h2 id=&#34;kevin-murphy-ruby-committer&#34;&gt;Kevin Murphy: Ruby Committer &lt;a href=&#34;#kevin-murphy-ruby-committer&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I recently had my first &lt;a href=&#34;https://github.com/ruby/ruby/commit/b3d330c39ebbf27cefc2d83109dad9e0b3b0e94f&#34;&gt;code change&lt;/a&gt; accepted to the Ruby programming language! Ruby&amp;rsquo;s &lt;code&gt;Coverage&lt;/code&gt; module now responds that it supports oneshot_lines mode.&lt;/p&gt;&lt;p&gt;Though it may be a small change, I&amp;rsquo;m more excited at the symbolism of having committed to the Ruby code base. As a celebration, I figured I&amp;rsquo;d share what led to this.&lt;/p&gt;&lt;h2 id=&#34;covering-new-changes&#34;&gt;Covering New Changes &lt;a href=&#34;#covering-new-changes&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As I write this, we&amp;rsquo;re in that period between Christmas and New Year&amp;rsquo;s Day. In the past few years, I&amp;rsquo;ve taken that off of work. That also lines up with the release day for a new version of Ruby. This year, &lt;a href=&#34;https://www.ruby-lang.org/en/news/2022/12/25/ruby-3-2-0-released/&#34;&gt;3.2.0&lt;/a&gt; came out on Christmas day.&lt;/p&gt;&lt;p&gt;Having some time where I&amp;rsquo;m not working, I set some very healthy boundaries. Instead of working, I would instead &lt;em&gt;read&lt;/em&gt; about work-related things. While I was catching up on the changes in 3.2.0, something caught my eye - there were some changes to Ruby&amp;rsquo;s Coverage module.&lt;/p&gt;&lt;p&gt;Coverage can &lt;a href=&#34;https://github.com/ruby/ruby/pull/6396&#34;&gt;now support&lt;/a&gt; measuring code coverage of code in &lt;code&gt;eval&lt;/code&gt;. I&amp;rsquo;ve written more about that in a &lt;a href=&#34;https://kevinjmurphy.com/posts/evaluating-more-coverage-in-ruby-3-2/&#34;&gt;later post&lt;/a&gt;. As a follow-up to conversation in the &lt;a href=&#34;https://bugs.ruby-lang.org/issues/19008&#34;&gt;initial issue&lt;/a&gt;, &lt;a href=&#34;https://github.com/ruby/ruby/pull/6462&#34;&gt;another PR&lt;/a&gt; adds controls for whether &lt;code&gt;eval&lt;/code&gt; coverage is running.&lt;/p&gt;&lt;p&gt;Part of that change adds a &lt;a href=&#34;https://bugs.ruby-lang.org/issues/19026&#34;&gt;new method&lt;/a&gt; to the &lt;code&gt;Coverage&lt;/code&gt; API. &lt;code&gt;Coverage.supported?&lt;/code&gt; is a method that accepts a symbol as an argument. It tells you if the Coverage module supports the mode or type of coverage asked about.&lt;/p&gt;&lt;p&gt;I pulled up the &lt;a href=&#34;https://ruby-doc.org/3.2.0/exts/coverage/Coverage.html#method-c-supported-3F&#34;&gt;documentation&lt;/a&gt; for the method, and noticed this sentence:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The mode should be one of the following symbols: :lines, :branches, :methods, :eval.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I also happen to know another mode of coverage: &lt;a href=&#34;https://ruby-doc.org/3.2.0/exts/coverage/Coverage.html#module-Coverage-label-Oneshot+Lines+Coverage&#34;&gt;oneshot lines&lt;/a&gt;. More on why I know about that later. Wondering if there was an opportunity to update the documentation, I checked the &lt;a href=&#34;https://github.com/ruby/ruby/blob/a7d467a792c644a7260d6560ea2002fdb8ff6de3/ext/coverage/coverage.c#L40&#34;&gt;source code&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; VALUE&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rb_coverage_supported&lt;/span&gt;(VALUE self, VALUE _mode)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ID mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RB_SYM2ID&lt;/span&gt;(_mode);&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RBOOL&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_intern&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lines&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_intern&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;branches&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_intern&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;methods&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_intern&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eval&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It turns out, the source doesn&amp;rsquo;t mention oneshot lines either. I asked Samuel, who made these contributions, on &lt;a href=&#34;https://ruby.social/@kevin_j_m/109591612453458271&#34;&gt;Mastodon&lt;/a&gt; about it. After that, I wrote my &lt;a href=&#34;https://bugs.ruby-lang.org/issues/19279&#34;&gt;first issue&lt;/a&gt; on Ruby&amp;rsquo;s issue tracker, and had &lt;a href=&#34;https://github.com/ruby/ruby/pull/7040&#34;&gt;my PR&lt;/a&gt; merged in.&lt;/p&gt;&lt;p&gt;So how do I know about oneshot lines coverage? Or Ruby&amp;rsquo;s Coverage module at all? To answer that, we need to go back much further in time.&lt;/p&gt;&lt;h2 id=&#34;covering-my-history-with-coverage&#34;&gt;Covering My History With Coverage &lt;a href=&#34;#covering-my-history-with-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;rubyconf-2019&#34;&gt;RubyConf 2019 &lt;a href=&#34;#rubyconf-2019&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The year is 2019. I&amp;rsquo;m speaking at RubyConf for the first time. I&amp;rsquo;m very excited about this. It&amp;rsquo;ll be my second time speaking at a conference. Earlier that year I also spoke at RailsConf.&lt;/p&gt;&lt;p&gt;My talk is about different &lt;a href=&#34;https://kevinjmurphy.com/posts/rubyconf-2019/&#34;&gt;best practices&lt;/a&gt; - specifically when adhering to them breaks down. One of those best practices is high &lt;a href=&#34;https://kevinjmurphy.com/posts/rubyconf-2019/#code-coverage&#34;&gt;test coverage&lt;/a&gt;. I start to work on the content for my presentation by building the code samples that I want to use in the slides. For the code coverage section, I&amp;rsquo;m writing some code with some tests. I&amp;rsquo;m using &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov&#34;&gt;SimpleCov&lt;/a&gt; to generate code coverage results.&lt;/p&gt;&lt;p&gt;As I&amp;rsquo;m doing this, I find a perfect opportunity for a distraction: how does SimpleCov work? I do some quick investigation. The second sentence of the &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov/blob/216b2d530bee7c4b8a8fe2898684924bfccfa79a/README.md&#34;&gt;README&lt;/a&gt; states:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It uses Ruby&amp;rsquo;s built-in Coverage library to gather code coverage data&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That gave me a new distraction - what is this Coverage library that&amp;rsquo;s built in to Ruby? I started with the documentation, that at the time looked something like &lt;a href=&#34;https://ruby-doc.org/stdlib-2.6.5/libdoc/coverage/rdoc/Coverage.html&#34;&gt;this&lt;/a&gt;. Wanting to learn more, I pulled up Ruby&amp;rsquo;s source code, and pretended I knew how to read C well. In reviewing the &lt;code&gt;coverage.c&lt;/code&gt; file, which looked something like &lt;a href=&#34;https://github.com/ruby/ruby/blob/ruby_2_6/ext/coverage/coverage.c&#34;&gt;this&lt;/a&gt;, I learned that it supports &lt;a href=&#34;https://github.com/ruby/ruby/blob/ruby_2_6/ext/coverage/coverage.c#L42-L48&#34;&gt;different modes&lt;/a&gt; of coverage.&lt;/p&gt;&lt;p&gt;I spent an afternoon playing with the different modes. I built different examples that I could use in my presentation. None of it actually made the talk though - I didn&amp;rsquo;t have enough time, and it wasn&amp;rsquo;t the primary focus.&lt;/p&gt;&lt;p&gt;That doesn&amp;rsquo;t mean I wasted all that effort though.&lt;/p&gt;&lt;h3 id=&#34;rubyconf-2020&#34;&gt;RubyConf 2020 &lt;a href=&#34;#rubyconf-2020&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;At least with the people I knew, there wasn&amp;rsquo;t a lot of awareness of the Coverage module. People were very familiar with the concept of code coverage. No one I spoke with knew that Ruby has a built-in facility to measure it or how it worked.&lt;/p&gt;&lt;p&gt;Because of that, I submitted a &lt;a href=&#34;https://kevinjmurphy.com/posts/enough-coverage-to-beat-the-band-proposal/&#34;&gt;proposal&lt;/a&gt; to talk about Coverage at RubyConf 2020. I already had some code samples documenting how to use it. I thought it would be a unique proposal. I had a ready-made theme to tie everything together. I had a lot of time in my house to work on it. If you&amp;rsquo;re wondering why, consult some resource about what was going on in the world then.&lt;/p&gt;&lt;p&gt;The result is, as of this writing, my &lt;a href=&#34;https://kevinjmurphy.com/posts/coverage/&#34;&gt;favorite talk&lt;/a&gt; I&amp;rsquo;ve put together. I had so much fun with it, that I brought it back out in 2021, still at home, for a &amp;ldquo;Ruby&amp;rsquo;s Got You Covered&amp;rdquo; &lt;a href=&#34;https://kevinjmurphy.com/speaking/#enough-coverage-to-beat-the-band&#34;&gt;world tour&lt;/a&gt;. I&amp;rsquo;m very thankful to all those groups for accepting a virtual, not local, speaker at their event.&lt;/p&gt;&lt;h3 id=&#34;documentation&#34;&gt;Documentation &lt;a href=&#34;#documentation&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;At the beginning of this post, I was very specific in my wording to say this is my first &amp;ldquo;code change&amp;rdquo; accepted to Ruby. That&amp;rsquo;s because it&amp;rsquo;s not my first &lt;strong&gt;commit&lt;/strong&gt; to Ruby.&lt;/p&gt;&lt;p&gt;At RubyConf 2020, &lt;a href=&#34;https://github.com/mame&#34;&gt;mame&lt;/a&gt; was in the audience for my talk. Another benefit of a virtual conference: I couldn&amp;rsquo;t see that, so I had no idea. As a result, I couldn&amp;rsquo;t be nervous about it. They just so happen to have been the person that wrote most of the Coverage module&amp;rsquo;s code.&lt;/p&gt;&lt;p&gt;We talked afterwards in the conference&amp;rsquo;s chat platform, and that led to my &lt;a href=&#34;https://github.com/ruby/ruby/commit/0026f644d739efed0d69911b434a1012ad55c393&#34;&gt;first commit&lt;/a&gt; into Ruby. I added what I learned in preparing that talk into the documentation of the module. Now people don&amp;rsquo;t have to look into the source code to discover the different modes.&lt;/p&gt;&lt;p&gt;In preparation for that 2021 world tour, I also created a &lt;a href=&#34;https://kevinjmurphy.com/posts/rubys-got-you-covered/&#34;&gt;blog post&lt;/a&gt; explaining coverage.&lt;/p&gt;&lt;h2 id=&#34;covering-why-this-matters&#34;&gt;Covering Why This Matters &lt;a href=&#34;#covering-why-this-matters&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;And &lt;em&gt;that&lt;/em&gt; is the very long explanation about how I&amp;rsquo;m interested in the Ruby 3.2.0 Coverage changes. And more specifically, how I noticed oneshot lines was missing as a supported mode.&lt;/p&gt;&lt;p&gt;Beyond my excitement about having a change (admittedly small) accepted into Ruby, I hope this inspires you to think about what you have to share. That may sound daunting. I know I never expected to commit anything to Ruby.&lt;/p&gt;&lt;p&gt;It started with me reading a lot of code and playing around in my terminal. Telling some friends turned into a talk. The talk led to an encounter with a Ruby committer that resulted in a documentation commit. Turning that into a blog post got me thinking about how much fun that talk was. That became a whole tour (where I stayed in my office the whole time). Now, I have a small modification to that area of the code in Ruby itself.&lt;/p&gt;&lt;p&gt;What&amp;rsquo;s something neat you&amp;rsquo;ve been playing with? What&amp;rsquo;s the smallest step in your mind you could take to comfortably share that - even with one person? Years later, who knows what that might lead to.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>2022 Year-End Review</title>
       <link>https://kevinjmurphy.com/posts/2022-review/</link>
       <pubDate>Sat, 17 Dec 2022 08:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/2022-review/</guid>
       <description>&lt;p&gt;This isn&amp;rsquo;t a &amp;ldquo;real&amp;rdquo; post. This is a summary of all the things that made up my year in 2022. Thanks to all that were a part of it.&lt;/p&gt;&lt;h2 id=&#34;writing&#34;&gt;Writing &lt;a href=&#34;#writing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I published 16 articles about Ruby or software development in general this year. I started with a series about what we as developers can apply from a &lt;a href=&#34;https://kevinjmurphy.com/posts/situational-leadership/&#34;&gt;MBA curriculum&lt;/a&gt;. My last post of the year covered what I saw at &lt;a href=&#34;https://kevinjmurphy.com/posts/rubyconf-mini-2022-recap/&#34;&gt;RubyConf Mini&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In between, I wrote about &lt;a href=&#34;https://kevinjmurphy.com/posts/find-or-initialize-by-block/&#34;&gt;find_or_initialize_by&lt;/a&gt;, RSpec &lt;a href=&#34;https://kevinjmurphy.com/posts/request-spec-realistic-error-response/&#34;&gt;request specs&lt;/a&gt;, released my &lt;a href=&#34;https://kevinjmurphy.com/posts/sharing-past-conference-proposals/&#34;&gt;past conference proposals&lt;/a&gt;, and more.&lt;/p&gt;&lt;p&gt;Mid-way through the year, I started a &lt;a href=&#34;https://newsletter.kevinjmurphy.com/&#34;&gt;newsletter&lt;/a&gt; that I&amp;rsquo;ve been sending out monthly. I&amp;rsquo;m still not sure how I best want to structure that or what people want to read. If you subscribed, let me know what you like and what changes you might suggest. And if you&amp;rsquo;re not subscribed? You can &lt;a href=&#34;https://newsletter.kevinjmurphy.com/&#34;&gt;change that&lt;/a&gt; for next month!&lt;/p&gt;&lt;p&gt;My most-read posts are those that end up in other newsletters. This year, my writing appeared in &lt;a href=&#34;https://rubyweekly.com/&#34;&gt;Ruby Weekly&lt;/a&gt; 4 times, &lt;a href=&#34;https://rubyradar.dev/&#34;&gt;Ruby Radar&lt;/a&gt; 3 times, and &lt;a href=&#34;https://ruby.libhunt.com/&#34;&gt;Awesome Ruby&lt;/a&gt; 4 times. I appeared in the &lt;a href=&#34;https://newsletter.shortruby.com/&#34;&gt;Short Ruby Newsletter&lt;/a&gt; and &lt;a href=&#34;https://tinyletter.com/developeravocados/&#34;&gt;Developer Avacados Weekly&lt;/a&gt; each once, which were both new for me this year.&lt;/p&gt;&lt;p&gt;This is down from last year, but I&amp;rsquo;m not sure what to take away from that. It&amp;rsquo;s possible that my writing this year wasn&amp;rsquo;t as good as last year. My topics may not have been as good of a match for sharing in newsletters. It could be that there&amp;rsquo;s a lot more content to choose from and more competition. It could be none of those things! What do you think?&lt;/p&gt;&lt;h2 id=&#34;speaking&#34;&gt;Speaking &lt;a href=&#34;#speaking&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I ventured back out into the real, physical, world this year for conference speaking.&lt;/p&gt;&lt;p&gt;At RailsConf 2022, I opened up my &lt;a href=&#34;https://kevinjmurphy.com/posts/browser-history/&#34;&gt;browser history&lt;/a&gt; to discuss how, and why, we search for things in our day-to-day job as developers.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/R7LkHjJdH9o&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;It&amp;rsquo;s always an honor to present at Ruby Central conferences, and it was great to see so many people. But, I was pretty overwhelmed by the whole experience. Enough that I told myself I was going to take a while off from speaking.&lt;/p&gt;&lt;p&gt;And then RubyConf Mini came around in the fall. This seemed like a unique opportunity to support the community, and was very close to me in Providence, RI. I felt like I had to try to be a part of it, so I submitted. And I ended up presenting in the first slot of day 1, where we taught a computer how to &lt;a href=&#34;https://kevinjmurphy.com/posts/play-guitar/&#34;&gt;play guitar&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Last year I shared how many proposals I submitted to how many conferences. I did not keep track of that this year. Without those numbers, I&amp;rsquo;ll provide this general assessment. You can (and I did) submit more than one proposal to conferences. I had many more proposals rejected than accepted.&lt;/p&gt;&lt;p&gt;I was a guest on one podcast in 2022, but for two episodes - and one you never heard. I recorded an episode of &lt;a href=&#34;https://www.buzzsprout.com/1927628&#34;&gt;Code and the Coding Coders who Code it&lt;/a&gt; with Drew Bragg that we lost at the hands of bad audio. But, we persevered and re-recorded a &lt;a href=&#34;https://www.buzzsprout.com/1927628/10596923&#34;&gt;different episode&lt;/a&gt;, which split into a &lt;em&gt;bonus&lt;/em&gt; ep about &lt;a href=&#34;https://www.buzzsprout.com/1927628/10597043-bonus-hockey-episode&#34;&gt;hockey&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;reading&#34;&gt;Reading &lt;a href=&#34;#reading&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was a technical reviewer for two books. Both for Noel Rappin and The Pragmatic Bookshelf again. I provided feedback on the second edition of &lt;a href=&#34;https://pragprog.com/titles/tailwind2/modern-css-with-tailwind-second-edition/&#34;&gt;Modern CSS with Tailwind&lt;/a&gt;, as I did for the first edition last year. That continues to be funny to me. It may be funny to you if you know my relative ability (or lack thereof) at accomplishing &lt;em&gt;anything&lt;/em&gt; with CSS.&lt;/p&gt;&lt;p&gt;Noel is also bringing back the &amp;ldquo;Pickaxe book&amp;rdquo;. I reviewed part of &lt;a href=&#34;https://pragprog.com/titles/ruby5/programming-ruby-3-2-5th-edition/&#34;&gt;Programming Ruby 3.2&lt;/a&gt; this year as well.&lt;/p&gt;&lt;h2 id=&#34;employer&#34;&gt;Employer &lt;a href=&#34;#employer&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I had a public &lt;a href=&#34;https://kevinjmurphy.com/posts/available-for-hire-2022/&#34;&gt;job search&lt;/a&gt; for this first time this year. I&amp;rsquo;m very thankful to all the people who reached out, either with an opportunity, a helping hand, or both. I&amp;rsquo;m happy to have ended up at &lt;a href=&#34;https://www.bookbub.com/&#34;&gt;BookBub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;new-to-me-in-2022&#34;&gt;New (to me) in 2022 &lt;a href=&#34;#new-to-me-in-2022&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I don&amp;rsquo;t go out of my way to experience new things, instead retreating to known comforts. So, I don&amp;rsquo;t have much in the way of brand new things to me this year. Here&amp;rsquo;s some stuff that came out in 2022 that I, of course, was going to like.&lt;/p&gt;&lt;h3 id=&#34;dance-fever&#34;&gt;Dance Fever &lt;a href=&#34;#dance-fever&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Florence Welch&amp;rsquo;s voice is unmatched and the new Florence + The Machine album is a gem. &amp;ldquo;Free&amp;rdquo; is easily the best song I&amp;rsquo;ve heard all year, and maybe for the last few years.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/1Zh1uDf3Glo&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;impera&#34;&gt;Impera &lt;a href=&#34;#impera&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Ghost is a delight. It&amp;rsquo;s exactly the type of band that, if you described them to me, I would say I&amp;rsquo;m not interested. But their music is too good, and too fun, so I don&amp;rsquo;t care. Their new album is no exception.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/XHy1POIGkKM&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;normal-gossip&#34;&gt;Normal Gossip &lt;a href=&#34;#normal-gossip&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I already knew Kelsey McKinney from their writing on &lt;a href=&#34;https://defector.com/author/kelsey-mckinney/&#34;&gt;Defector&lt;/a&gt; and their &lt;a href=&#34;https://www.bookbub.com/books/god-spare-the-girls-by-kelsey-mckinney&#34;&gt;book&lt;/a&gt;. This year I got into Kelsey McKinney the podcast host of &lt;a href=&#34;https://audioboom.com/channels/5062384&#34;&gt;Normal Gossip&lt;/a&gt;, the show that&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;delivers juicy, strange, funny, and utterly banal gossip about people you’ll never know and never meet.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;thank-you&#34;&gt;Thank You &lt;a href=&#34;#thank-you&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks for reading, or listening. Thanks for being a friend. Thanks for doing your best to make the world around you as good as it can be. I hope there&amp;rsquo;s more of that next year.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>RubyConf Mini 2022 Recap</title>
       <link>https://kevinjmurphy.com/posts/rubyconf-mini-2022-recap/</link>
       <pubDate>Sun, 20 Nov 2022 20:00:24 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubyconf-mini-2022-recap/</guid>
       <description>&lt;h2 id=&#34;rubyconf-mini-2022&#34;&gt;RubyConf Mini 2022 &lt;a href=&#34;#rubyconf-mini-2022&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RubyConf Mini wrapped up last week in Providence, Rhode Island. This post documents the list of talks I saw. It&amp;rsquo;s not intended as a review of any of the talks, but to highlight the variety of great work from all involved. I hope you&amp;rsquo;ll seek out the full videos of all the sessions that interest you, once they are available.&lt;/p&gt;&lt;h2 id=&#34;day-1&#34;&gt;Day 1 &lt;a href=&#34;#day-1&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The day started with an opening address, which I&amp;rsquo;m sure was lovely, but I&amp;rsquo;ll admit I was a bit distracted. The reason being that I got on stage directly after. Thanks to everyone who attended &lt;a href=&#34;https://kevinjmurphy.com/posts/play-guitar/&#34;&gt;my session&lt;/a&gt;; it was great to see you all.&lt;/p&gt;&lt;p&gt;After that, I moved rooms to see Jeremy Smith&amp;rsquo;s talk, &lt;a href=&#34;https://www.rubyconfmini.com/program#Solo:-Building-Successful-Web-Apps-By-Your-Lonesome&#34;&gt;&amp;ldquo;Solo: Building Successful Web Apps By Your Lonesome&amp;rdquo;&lt;/a&gt;.  The perspective of this talk was from a place of working alone. But, no matter your team size, the conclusions in this session are valuable and relevant.&lt;/p&gt;&lt;p&gt;Next I attended Stephanie Minn&amp;rsquo;s &lt;a href=&#34;https://www.rubyconfmini.com/program#Empathetic-Pair-Programming-with-Nonviolent-Communication&#34;&gt;&amp;ldquo;Empathetic Pair Programming with NonviolentCommunication&amp;rdquo;&lt;/a&gt;. I appreciated how Stephanie showed how to re-word comments in more actionable and helpful ways.&lt;/p&gt;&lt;p&gt;Lindsay Kelly spoke next on &lt;a href=&#34;https://www.rubyconfmini.com/program#Knowing-When-To-Walk-Away&#34;&gt;&amp;ldquo;Knowing When To Walk Away&amp;rdquo;&lt;/a&gt;.  This talk provided good questions to consider when evaluating your current job satisfaction. Questions to ask whether you&amp;rsquo;re actively making a plan to leave a role or not.&lt;/p&gt;&lt;p&gt;We next heard from Barbara Tannenbaum in the first keynote on &amp;ldquo;Persuasive Communication&amp;rdquo;. The speakers I spoke with after were excitedly applying these tips in their sessions. Even if you&amp;rsquo;re not public speaking, there&amp;rsquo;s much to learn here.&lt;/p&gt;&lt;p&gt;The agenda for the day wrapped up with a Podcast Panel. All those voices you hear in your headphones are real people! Brittany Martin, Julie, Drew Bragg, Joël Quenneville and Andy Croll all took part in this conversation. I believe you should expect to hear it soon in your podcast feed, if you follow &lt;em&gt;any&lt;/em&gt; of their shows.&lt;/p&gt;&lt;h2 id=&#34;day-2&#34;&gt;Day 2 &lt;a href=&#34;#day-2&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I started the second day by throwing something out on social media that I want to highlight here. If you find yourself at a conference, and you see a speaker after a talk you were at, let them know that you were there. If there was something you liked about it (particularly if it&amp;rsquo;s specific), tell them!&lt;/p&gt;&lt;p&gt;I can be a great conversation starter. It can be &lt;strong&gt;super&lt;/strong&gt; meaningful to speakers. Being able to talk about my talk before and after the talk is my cheat code. It helps me feel more comfortable in social interactions in conferences. I&amp;rsquo;m not great at going up and talking to people. If you saw my talk, or see my badge that says I&amp;rsquo;m a speaker, maybe you&amp;rsquo;ll bring it up. Now we have something in common to talk about.&lt;/p&gt;&lt;p&gt;Speakers put a lot of time and effort into their preparation. Knowing that people were there, and even better that they got something out of it, can make a big difference in &lt;em&gt;their&lt;/em&gt; conference experience.&lt;/p&gt;&lt;p&gt;Nadia Odunayo started today&amp;rsquo;s program with A Ruby Mystery Story keynote. It&amp;rsquo;s a fun romp told in a delightful manner that&amp;rsquo;s a very entertaining watch.&lt;/p&gt;&lt;p&gt;I stayed in the ballroom for Aji Slater to introduce &lt;a href=&#34;https://www.rubyconfmini.com/program#Zen-and-the-Art-of-Incremental-Automation&#34;&gt;&amp;ldquo;Zen and the Art of Incremental Automation&amp;rdquo;&lt;/a&gt;. Beyond the theory of applying these changes, the fallout of practicing (or not) the tips provided a grounded perspective.&lt;/p&gt;&lt;p&gt;Vladimir Dementyev next took the stage for &lt;a href=&#34;https://www.rubyconfmini.com/program#Weaving-and-seaming-mocks&#34;&gt;&amp;ldquo;Weaving and seaming mocks&amp;rdquo;&lt;/a&gt;. Vladimir is always pushing improved tooling and support in so many different areas. This talk was no different, introducing a different way of verifying mocks in tests.&lt;/p&gt;&lt;p&gt;Kevin Newton discussed &lt;a href=&#34;https://www.rubyconfmini.com/program#Syntax-Tree&#34;&gt;&amp;ldquo;Syntax Tree&amp;rdquo;&lt;/a&gt; and how parsing code can lead to further inspection, debugging, and formatting opportunities.&lt;/p&gt;&lt;p&gt;Ernesto Tagwerker warned us that &lt;a href=&#34;https://www.rubyconfmini.com/program#Here-Be-Dragons:-The-Hidden-Gems-of-Tech-Debt&#34;&gt;&amp;ldquo;Here Be Dragons: The Hidden Gems of Tech Debt&amp;rdquo;&lt;/a&gt;. It provided a fun classification of tools to surface problem areas in your code. After identifying potential issues, it proposed strategies to handle them.&lt;/p&gt;&lt;p&gt;At the Transgender Issues Panel, we listened to their stories. I thank them for sharing.&lt;/p&gt;&lt;p&gt;Julia Evans closed the program for the day with a keynote around DNS. This proposes strategies for long-term learning, providing tangible steps to follow.&lt;/p&gt;&lt;h2 id=&#34;day-3&#34;&gt;Day 3 &lt;a href=&#34;#day-3&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Day 3 opened with a sponsor panel discussing how each of the sponsors provides an inclusive workspace, and what that means to them.&lt;/p&gt;&lt;p&gt;We then heard from a variety of speakers in Lightning Talks. We heard about what open source can learn from co-operatives, academic research about Ruby, and much more.&lt;/p&gt;&lt;p&gt;Andrea Fomera and Julie then spoke on &lt;a href=&#34;https://www.rubyconfmini.com/program#Inclusivity:-Hiring-is-just-the-beginning&#34;&gt;&amp;ldquo;Inclusivity: Hiring is just the beginning&amp;rdquo;&lt;/a&gt;. I aspire to their honesty on stage and at work.&lt;/p&gt;&lt;p&gt;Brittany Martin then came in strong on short notice off the wait list to present&lt;a href=&#34;https://www.rubyconfmini.com/program#We-Need-Someone-Technical-on-the-Call&#34;&gt;&amp;ldquo;We Need Someone Technical on the Call&amp;rdquo;&lt;/a&gt;. This provided a framework to prepare, execute, and follow up on a meeting.&lt;/p&gt;&lt;p&gt;Joël Quenneville then took the stage and started &lt;a href=&#34;https://www.rubyconfmini.com/program#Teaching-Ruby-to-Count&#34;&gt;&amp;ldquo;Teaching Ruby to Count&amp;rdquo;&lt;/a&gt;. Introducing different iteration mechanisms is great. Joël taking the next step about how to apply that to our own code (and why) was a pleasure to watch.&lt;/p&gt;&lt;p&gt;Jenny Shih explained how to incorporate functional principles in our Ruby code during &lt;a href=&#34;https://www.rubyconfmini.com/program#Functional-programming-for-fun-and-profit!!&#34;&gt;Functional programming for fun and profit!!&lt;/a&gt;. Jenny took great care to present these terms and philosophies in an approachable way that was immediately actionable.&lt;/p&gt;&lt;p&gt;Jared Norman next spoke of &lt;a href=&#34;https://www.rubyconfmini.com/program#TDD-on-the-Shoulders-of-Giants&#34;&gt;&amp;ldquo;TDD on the Shoulders of Giants&amp;rdquo;&lt;/a&gt;. This explored different TDD styles, leaving us with patterns to apply in our tests.&lt;/p&gt;&lt;p&gt;Budding game show host Drew Bragg next asked, &lt;a href=&#34;https://www.rubyconfmini.com/program#Who-Wants-to-be-a-Ruby-Engineer?&#34;&gt;&amp;ldquo;Who Wants to be a Ruby Engineer?&amp;rdquo;&lt;/a&gt;. Audience participants did their best on stage, battling with confusing and esoteric Ruby syntax. The energy in the room was buzzing.&lt;/p&gt;&lt;p&gt;Rose Wiegley closed the conference with a keynote on &amp;ldquo;Leading From Where You Are&amp;rdquo;. No matter your title at work, and whether you see yourself as a leader or not, I expect you&amp;rsquo;ll learn a lot from this session.&lt;/p&gt;&lt;h2 id=&#34;appreciation&#34;&gt;Appreciation &lt;a href=&#34;#appreciation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://jemma.dev/&#34;&gt;Jemma Issroff&lt;/a&gt;, without whom this conference wouldn&amp;rsquo;t exist. Without whom we wouldn&amp;rsquo;t have had this time together. After RailsConf, I told myself I was taking a break from speaking for a while. And then this opportunity came along, and it was too compelling to not TRY to be a part of. Thanks for the push.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.emilysamp.dev/&#34;&gt;Emily Samp&lt;/a&gt; who helped all the speakers learn what they needed to know in preparation for the event.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://andycroll.com/&#34;&gt;Andy Croll&lt;/a&gt; for offering his prior experience running conferences.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m not sure what to say to you, ballroom projector. You worked great during the A/V check on Monday, but you weren&amp;rsquo;t there for me in my time of need. You disappointed me. Thank you for playing nicer with the rest of the speakers.&lt;/p&gt;&lt;p&gt;Thank you to the &lt;a href=&#34;https://www.confreaks.com/&#34;&gt;Confreaks&lt;/a&gt; and hotel A/V staff, who professionally and calmly worked to troubleshoot the issue, while I blankly stared at the audience. When I&amp;rsquo;m practicing, I tell myself I need to prepare enough to give my talk without any slides or notes. I practice on walks, away from my material. I practice looking the other direction (checking occasionally to make sure I&amp;rsquo;m clicking to the right slide). In those moments on stage, I was wondering if my preparation would become necessary. Would I have to give my full talk without any slides?&lt;/p&gt;&lt;p&gt;Thanks &lt;a href=&#34;https://www.drbragg.dev/&#34;&gt;Drew Bragg&lt;/a&gt; for unflinchingly handing me his laptop from the front row, letting me git clone the repo that has my slides on it. I ran the presentation from his computer, having never used it before.&lt;/p&gt;&lt;p&gt;Thanks to the conference WiFi. It actually WORKED that morning, allowing me to get my deck onto Drew&amp;rsquo;s machine.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/joelquen&#34;&gt;Joël Quenneville&lt;/a&gt; for unsurprisingly being the first person to approach me after I finished on stage. He was quick with a reassuring compliment and gave me feedback that&amp;rsquo;ll stick with me for quite some time.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://danielmagliola.com/&#34;&gt;Daniel Magliola&lt;/a&gt;, who couldn&amp;rsquo;t be with us, for leaving a message in my inbox right around the time I wrapped up on stage. Just checking in on how it went. What a treat.&lt;/p&gt;&lt;p&gt;Thanks to my &lt;a href=&#34;https://bookbub.com/&#34;&gt;BookBub&lt;/a&gt; colleagues who provided feedback on an early version of my talk, and covered for me at work so I could be here this week.&lt;/p&gt;&lt;p&gt;Thanks to my &lt;a href=&#34;https://dockwa.com/&#34;&gt;Dockwa&lt;/a&gt; friends, some old and some new. It was great to spend time with you.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m so happy &lt;a href=&#34;https://konnor.netlify.app/&#34;&gt;Konnor Rogers&lt;/a&gt; joined us. Thanks for fitting us into your week&amp;rsquo;s plans, and making time to come along.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://brittanymartin.dev/&#34;&gt;Brittany Martin&lt;/a&gt; for being as great a conversationalist in person as she is in an interview.&lt;/p&gt;&lt;p&gt;Thanks to anyone who scrolled through this whole thing, thinking, &amp;ldquo;surely Kevin will mention me next.&amp;rdquo; You&amp;rsquo;re handling it great! (Also, sorry?)&lt;/p&gt;&lt;p&gt;Thanks to my wife, who tactfully asked, &amp;ldquo;you&amp;rsquo;re sure you&amp;rsquo;re doing this again?&amp;rdquo; only once when I told her I got accepted. It&amp;rsquo;s not only the time this week to help with childcare, but all the time leading up to it she afforded me to prepare.&lt;/p&gt;&lt;p&gt;With that, I&amp;rsquo;m exhausted, and overwhelmed, in a good way. Until next time, #RubyFriends &amp;lt;3.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Revisiting Calling Sonic Pi From Ruby</title>
       <link>https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/</link>
       <pubDate>Fri, 11 Nov 2022 07:00:24 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/</guid>
       <description>&lt;h2 id=&#34;anyone-can-play-guitar-series&#34;&gt;Anyone Can Play Guitar Series &lt;a href=&#34;#anyone-can-play-guitar-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/enumerating-musical-notes/&#34;&gt;Enumerating Musical Notes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Revisiting Calling Sonic Pi From Ruby&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;Programming Guitar Greatness&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/composing-our-own-guitar-amps-from-inherited-gear/&#34;&gt;Composing Our Own Guitar Amps From Inherited Gear&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/flog-driven-development/&#34;&gt;Flog-Driven Development&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;tweaking-amp-settings&#34;&gt;Tweaking Amp Settings &lt;a href=&#34;#tweaking-amp-settings&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://sonic-pi.net/&#34;&gt;Sonic Pi&lt;/a&gt; is software to make sounds and music driven by code. Sonic Pi comes with an &lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-1-2&#34;&gt;IDE&lt;/a&gt; of sorts. You can program the composition you&amp;rsquo;d like to play in the IDE. With one button, you get immediate feedback hearing how your code sounds.&lt;/p&gt;&lt;p&gt;A few years ago I wrote about controlling &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Sonic Pi with Ruby&lt;/a&gt; code without needing to code in the IDE directly. That relied on the &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli&#34;&gt;sonic-pi-cli&lt;/a&gt; gem. For my &lt;a href=&#34;https://kevinjmurphy.com/posts/play-guitar/&#34;&gt;Anyone Can Play Guitar (With Ruby)&lt;/a&gt; talk, I took a different approach.&lt;/p&gt;&lt;h2 id=&#34;updated-wiring&#34;&gt;Updated Wiring &lt;a href=&#34;#updated-wiring&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As of this writing, Sonic Pi has released version 4.3.0. It&amp;rsquo;s progressed significantly since version 3.2, which is the version that I used in my original post. One of the consequences is that the sonic-pi-cli gem does not appear to work with later versions of Sonic Pi. I couldn&amp;rsquo;t get earlier versions of Sonic Pi to work on my computer. I didn&amp;rsquo;t want to deal with virtualization to see if I could get an earlier version of Sonic Pi working with the gem. I also didn&amp;rsquo;t have the time to update the gem to work with later version of Sonic Pi. Sorry - I had a presentation to write!&lt;/p&gt;&lt;p&gt;I needed a quick way to achieve the same, or similar, results. So, I&amp;rsquo;ll admit - I cheated.&lt;/p&gt;&lt;h2 id=&#34;input-jack&#34;&gt;Input Jack &lt;a href=&#34;#input-jack&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Sonic Pi reads an &lt;a href=&#34;https://github.com/sonic-pi-net/sonic-pi/tree/stable/app/config/user-examples#initrb&#34;&gt;init file&lt;/a&gt; every time that the application boots. You might use this file for helper methods to recall in the application&amp;rsquo;s editor. Instead, I will store the code to play the song itself. It gets read when the application boots and starts playing the song.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s not the greatest long-term solution. You don&amp;rsquo;t want to hear the song every time you open the application forevermore. I know I don&amp;rsquo;t. But it is good enough for demonstration purposes. That said, I still needed to construct the code to play the song.&lt;/p&gt;&lt;h2 id=&#34;speaker&#34;&gt;Speaker &lt;a href=&#34;#speaker&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Much like in my &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;original version&lt;/a&gt;, I built an amplifier to communicate with Sonic Pi. In my original post, my guitar class knew how to generate its &lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/#plucking-a-single-string&#34;&gt;sound output&lt;/a&gt; to the amp. In this version, the amp knows how to do that.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SonicPiAmplifier&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sound_output&lt;/span&gt;(play_operation, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;with_synth :pluck do&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;play_operation&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, release: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;duration&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sleep(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;duration&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For each note to play, this is using &lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-2-3&#34;&gt;Sonic Pi&amp;rsquo;s DSL&lt;/a&gt; to play a note with a &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/#noise-reduction&#34;&gt;synth patch&lt;/a&gt; that sounds a bit like a guitar. It plays the note for the provided duration, and then sleeps for that same duration. That&amp;rsquo;s so Sonic Pi won&amp;rsquo;t immediately play the next note on top of this one.&lt;/p&gt;&lt;h2 id=&#34;power-amp&#34;&gt;Power Amp &lt;a href=&#34;#power-amp&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To simplify, let&amp;rsquo;s assume that amplifiers work by progressing sound through two components. Sound moves through a pre amp to a power amp. The power amp is what&amp;rsquo;s responsible for sending the sound to the speaker. That&amp;rsquo;s what will use the &lt;code&gt;sound_output&lt;/code&gt; method we&amp;rsquo;ve built.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SonicPiAmplifier&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;power_amp_stage&lt;/span&gt;(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    play_operation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;play(:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;sound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sound_output(play_operation, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: sound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;duration)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @sounds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; output&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    output&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;play_operation&lt;/code&gt; string is again a command from &lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-2-1&#34;&gt;Sonic Pi&amp;rsquo;s DSL&lt;/a&gt;. As you&amp;rsquo;d expect, it plays a sound. We retrieve the value of the sound to play from the &lt;code&gt;Note&lt;/code&gt; class we constructed in a &lt;a href=&#34;https://kevinjmurphy.com/posts/enumerating-musical-notes/&#34;&gt;prior post&lt;/a&gt;. We pass this into our &lt;code&gt;sound_output&lt;/code&gt;. We store the result in our list of &lt;code&gt;@sounds&lt;/code&gt; that the amplifier projects, and return it as well.&lt;/p&gt;&lt;h2 id=&#34;audio-loopback&#34;&gt;Audio Loopback &lt;a href=&#34;#audio-loopback&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The reason we&amp;rsquo;re keeping track of our &lt;code&gt;@sounds&lt;/code&gt; is that we want to be able to replay them again after the fact. Our amplifier will use this ability to write the song it played to a file.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SonicPiAmplifier&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_to_file&lt;/span&gt;(location)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(location, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      @sounds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;sound&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll write this to Sonic Pi&amp;rsquo;s init file. Then, when we open up the application, it will play the song from the amplifier on boot.&lt;/p&gt;&lt;h2 id=&#34;output&#34;&gt;Output &lt;a href=&#34;#output&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Time to take this for a rip. We&amp;rsquo;ll grab a guitar, decide which song we want to play, plug in our amplifier we just built, and play the song.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  guitar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Blues&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Guitar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;restring(&lt;span style=&#34;color:#e6db74&#34;&gt;gauge_set&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:srv&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tune(&lt;span style=&#34;color:#e6db74&#34;&gt;:down_half_step&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  song &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Blues&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Shuffle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(guitar)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  amp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Blues&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SonicPiAmplifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;volume&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;on&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plug_in(&lt;span style=&#34;color:#e6db74&#34;&gt;amplifier&lt;/span&gt;: amp)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  song&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;measure&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; measure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;sound&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; puts sound } }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  amp&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this method in isolation won&amp;rsquo;t push any air through our speakers. Instead, we need our cheat. We&amp;rsquo;ll write all the sounds from the song to our init file, and then have our script open Sonic Pi in a &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Kernel.html#method-i-60&#34;&gt;subshell&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;init &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.sonic-pi/config/init.rb&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;play&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_to_file(init)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`open &amp;#34;/Applications/Sonic\ Pi.app&amp;#34;`&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sonic Pi will start, read the init file with all the instructions to play our song, and start playing.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/iQUNU36Vem4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;coda&#34;&gt;Coda &lt;a href=&#34;#coda&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Sam Aaron very helpfully on &lt;a href=&#34;https://twitter.com/samaaron/status/1592653823486889984&#34;&gt;Twitter&lt;/a&gt; suggested a more reasonable approach that highlights built-in Sonic Pi functionality. With a combination of &lt;a href=&#34;https://github.com/sonic-pi-net/sonic-pi/blob/dev/etc/doc/tutorial/A.02-live-coding.md&#34;&gt;live loops&lt;/a&gt; and &lt;a href=&#34;https://github.com/sonic-pi-net/sonic-pi/blob/dev/etc/doc/tutorial/12.1-Receiving-OSC.md&#34;&gt;OSC messages&lt;/a&gt; I could have avoided relying on the init file. Thanks to Sam for the tip - and for Sonic Pi!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;One approach would be to implement some live_loop listeners to incoming OSC which you could then send to at your leisure from a separate pure Ruby process.&lt;/p&gt;&lt;p&gt;That way you can show off the best of both worlds!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;rsquo;s take a step back and explore how to model the business domain of &lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;playing guitar&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Anyone Can Play Guitar (With Ruby) - The Proposal</title>
       <link>https://kevinjmurphy.com/posts/anyone-can-play-guitar-proposal/</link>
       <pubDate>Thu, 10 Nov 2022 20:26:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/anyone-can-play-guitar-proposal/</guid>
       <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;ve got the blues. I&amp;rsquo;ve been looking for the perfect guitar tone, but haven&amp;rsquo;t found it. To amp up my mood, let&amp;rsquo;s teach a computer to play the guitar through an amplifier.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s string together object-oriented principles to orchestrate a blues shuffle. We&amp;rsquo;ll model our domain with the help of inheritance, composition, and dependency injection. This talk will strike a chord with you, whether you&amp;rsquo;ve strummed a guitar before or not.&lt;/p&gt;&lt;h1 id=&#34;details&#34;&gt;Details &lt;a href=&#34;#details&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;To build a guitar and amplifier, this talk will introduce software design concepts. As we unwrap different requirements and intricacies, we&amp;rsquo;ll explore new concepts.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll begin by &lt;strong&gt;modeling&lt;/strong&gt; some objects in our domain. This will focus on how we can identify objects in our system. [7 - 10 minutes]&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll find different objects in our system the following ways:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Some objects mirror the real-world counterpart that we&amp;rsquo;re implementing. We can decompose the overall object into its component parts. We could have a &lt;code&gt;Guitar&lt;/code&gt; class that does everything you need a guitar to do. In our exploration, we&amp;rsquo;ll model our guitar as having a set of &lt;code&gt;String&lt;/code&gt;s (not the data type) that work together.&lt;/li&gt;&lt;li&gt;Some objects become clear after identifying a need to pass around related data and behavior. Rather than using a hash with the individual notes played, we&amp;rsquo;ll make a &lt;code&gt;Sound&lt;/code&gt; class. That will be able to tell you if the notes combine to form a particular chord. This new behavior can live with the raw note data in this new class.&lt;/li&gt;&lt;li&gt;A bundle of private methods only related to part of the entire class can become a separate object. It takes some work for a &lt;code&gt;String&lt;/code&gt; to determine which note it&amp;rsquo;s playing. We need that information to construct our &lt;code&gt;Sound&lt;/code&gt;. It&amp;rsquo;s also a bit misplaced within the full context of the &lt;code&gt;String&lt;/code&gt;&amp;rsquo;s responsibilities.  By introducing a &lt;code&gt;Fret&lt;/code&gt; class, we can relieve the &lt;code&gt;String&lt;/code&gt; class from that work. We can rigorously test that part of the code in isolation. We also create a dedicated location for related behavior to live.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Our electric guitar is only one part of our system. We need to hear the sound with the help of an amplifier. When building our amplification needs, we&amp;rsquo;ll explore &lt;strong&gt;inheritance&lt;/strong&gt;. [7 - 10 minutes]&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We&amp;rsquo;ll start with an &lt;code&gt;Amplifier&lt;/code&gt; class that will make a noise when you call the &lt;code&gt;project&lt;/code&gt; method to it, passing it a &lt;code&gt;Sound&lt;/code&gt;. Of course, it only makes a noise if the amp is on. The &lt;code&gt;project&lt;/code&gt; method is the last step to &lt;code&gt;amplify&lt;/code&gt; a sound. &lt;code&gt;amplify&lt;/code&gt; is the method that&amp;rsquo;s called externally.&lt;/li&gt;&lt;li&gt;There are different types of amplifiers. The different components affect the way they sound. We&amp;rsquo;ll build amplifiers that inherit from the core &lt;code&gt;Amplifier&lt;/code&gt; functionality. They&amp;rsquo;ll extend that base to exhibit their differences.&lt;/li&gt;&lt;li&gt;A &lt;code&gt;TubeAmplifier&lt;/code&gt; uses electrical circuitry like a light bulb. They need to warm up to sound their best. They need to account for how warmed up they are as part of the &lt;code&gt;amplify&lt;/code&gt; process.&lt;/li&gt;&lt;li&gt;A &lt;code&gt;SolidStateAmplifier&lt;/code&gt; uses more modern transistors and semiconductors. Because of its components, applying too much distortion results in harsh audio clipping. You wouldn&amp;rsquo;t hear that from a tube amp.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Our amplifier design must incorporate &lt;strong&gt;composition&lt;/strong&gt; to build the next type of amplifier. [5 minutes]&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A &lt;code&gt;HybridAmplifier&lt;/code&gt; has a tube pre amp, and a solid-state power amp. It needs elements of both the &lt;code&gt;TubeAmplifier&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;SolidStateAmplifier&lt;/code&gt;. We can&amp;rsquo;t inherit from both in Ruby. Instead, we&amp;rsquo;ll compose &lt;code&gt;TubeAmplification&lt;/code&gt; and &lt;code&gt;SolidStateAmplification&lt;/code&gt; modules together to produce a single &lt;code&gt;HybridAmplifier&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The value in composing with modules is in sharing behavior generally. It&amp;rsquo;s not specific to addressing the lack of multiple inheritance in the language. We&amp;rsquo;ll apply this concept back to guitars. An acoustic guitar has a sound hole that will &lt;code&gt;project&lt;/code&gt; the sound. An electric guitar cannot do that without the help of an amplifier. An acoustic guitar is &lt;strong&gt;not&lt;/strong&gt; an amplifier though. Instead, we&amp;rsquo;ll have a &lt;code&gt;SoundProjection&lt;/code&gt; module. Both an acoustic guitar and an amplifier can use this module. The amplifier will use it as the basis of its amplification of the sound. The acoustic guitar will use it only to project its sounds.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We&amp;rsquo;ll combine our guitar and amplifier with the use of &lt;strong&gt;dependency injection&lt;/strong&gt;. [3 minutes]&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Initially, our guitar will create an instance of an &lt;code&gt;Amplifier&lt;/code&gt; on object construction. It&amp;rsquo;ll use that amplifier so we can hear the sounds we&amp;rsquo;re playing.&lt;/li&gt;&lt;li&gt;Our &lt;code&gt;Amplifier&lt;/code&gt; will &lt;code&gt;put&lt;/code&gt; the note that it plays to the screen. We don&amp;rsquo;t want everyone to hear that noise when we practice. We&amp;rsquo;ll build a separate &lt;code&gt;PracticeAmplifier&lt;/code&gt; that outputs nothing. Now when we practice (in our tests), we don&amp;rsquo;t hear (or see) the result of our practice.&lt;/li&gt;&lt;li&gt;To use our &lt;code&gt;PracticeAmplifier&lt;/code&gt;, we need to add mocks in our tests. When our guitar makes a new &lt;code&gt;Amplifier&lt;/code&gt;, it&amp;rsquo;ll be a &lt;code&gt;PracticeAmplifier&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;We can make this easier by instead passing an instance of the amplifier we want to use to the guitar instance. Now our tests can use the practice amp without mocking.&lt;/li&gt;&lt;li&gt;This &lt;em&gt;also&lt;/em&gt; improves the usage of our guitar generally. Now we can plug our guitar into the different amplifiers we&amp;rsquo;ve created. We&amp;rsquo;re not stuck with the base model. Though it started as a testing benefit, this change helps our application as well.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;At the end, we&amp;rsquo;ll use the code we&amp;rsquo;ve written in our presentation, and some we haven&amp;rsquo;t, for a performance. We&amp;rsquo;ll show how we can play a blues riff, either through &lt;a href=&#34;https://sonic-pi.net/&#34;&gt;Sonic Pi&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Sheet_music&#34;&gt;sheet music&lt;/a&gt;, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Tablature#Guitar_tablature&#34;&gt;guitar tablature&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;notes-on-time-estimates&#34;&gt;Notes on time estimates &lt;a href=&#34;#notes-on-time-estimates&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;strong&gt;modeling&lt;/strong&gt; and &lt;strong&gt;inheritance&lt;/strong&gt; section estimates are longer to introduce the business domain. &lt;strong&gt;Composition&lt;/strong&gt; will use terminology that&amp;rsquo;s already introduced.  We&amp;rsquo;ll reuse and change code we&amp;rsquo;ve already written. &lt;strong&gt;Dependency injection&lt;/strong&gt; ties together the two subsystems we&amp;rsquo;re already familiar with.&lt;/p&gt;&lt;h1 id=&#34;pitch&#34;&gt;Pitch &lt;a href=&#34;#pitch&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;This talk will serve a wide audience, though in different ways. For early career developers, this can introduce these concepts. It&amp;rsquo;ll apply them in a (hopefully) fun way, and should demystify some of the fancy terminology.&lt;/p&gt;&lt;p&gt;For intermediate developers, the domain modeling section will have the most value. Identifying and extracting objects out of an existing system may be new to them. They may be familiar with seeing tutorials or writing their own work from scratch. They likely have had fewer opportunities to work with existing code in need of a change.&lt;/p&gt;&lt;p&gt;Even if you know everything about object-oriented design, this talk may be for you. Experienced developers will leave with another ready-made analogy for these concepts. They can use this example to explain the topics to others with a more novel problem space that the classics. There will be no discussion of animal and species taxonomies here.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve had the pleasure to speak at RubyConf and RailsConf in the past. I&amp;rsquo;ve used (different) musical equipment to speak about (different) technical concepts effectively before.&lt;/p&gt;&lt;h1 id=&#34;bio&#34;&gt;Bio &lt;a href=&#34;#bio&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Kevin Murphy lives near Boston, Massachusetts, where he is a Software Developer at BookBub. Kevin &lt;strong&gt;owns&lt;/strong&gt; two guitars, but feels it&amp;rsquo;s an insult to the instrument to say he knows how to &lt;strong&gt;play&lt;/strong&gt; the guitar.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Available on Mastodon</title>
       <link>https://kevinjmurphy.com/posts/joining-mastodon/</link>
       <pubDate>Sat, 05 Nov 2022 18:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/joining-mastodon/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve created an account on Mastodon, specifically on the ruby.socialinstance. You can follow along and connect with me &lt;a href=&#34;https://ruby.social/@kevin_j_m&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Enumerating Musical Notes</title>
       <link>https://kevinjmurphy.com/posts/enumerating-musical-notes/</link>
       <pubDate>Thu, 13 Oct 2022 17:00:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/enumerating-musical-notes/</guid>
       <description>&lt;h2 id=&#34;anyone-can-play-guitar-series&#34;&gt;Anyone Can Play Guitar Series &lt;a href=&#34;#anyone-can-play-guitar-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Enumerating Musical Notes&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/&#34;&gt;Revisiting Calling Sonic Pi From Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;Programming Guitar Greatness&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/composing-our-own-guitar-amps-from-inherited-gear/&#34;&gt;Composing Our Own Guitar Amps From Inherited Gear&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/flog-driven-development/&#34;&gt;Flog-Driven Development&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I&amp;rsquo;m teaching a computer how to play the guitar for &lt;a href=&#34;https://kevinjmurphy.com/posts/play-guitar/&#34;&gt;RubyConf Mini 2022&lt;/a&gt;. Let&amp;rsquo;s understand some basics before focusing on the guitar. Guitars can play many musical notes - actually, all of them! In this post, we&amp;rsquo;ll output which note we play with the help of Ruby&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Array.html&#34;&gt;Array&lt;/a&gt; class and &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Enumerable.html&#34;&gt;Enumerable&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;note-notation&#34;&gt;Note Notation &lt;a href=&#34;#note-notation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are only so many notes in music. 12 in fact. This is not going to be a lesson in music theory, so I&amp;rsquo;ll spare you the details. We&amp;rsquo;ll store each of the notes in an array.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:a_flat&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:b_flat&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:d_flat&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:e_flat&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:f&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:g_flat&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;:g&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;chromatic-scale&#34;&gt;Chromatic Scale &lt;a href=&#34;#chromatic-scale&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Putting all these notes together forms the &lt;a href=&#34;https://en.wikipedia.org/wiki/Chromatic_scale&#34;&gt;Chromatic scale&lt;/a&gt;. Most often, you&amp;rsquo;ll see the scale start with the &amp;ldquo;C&amp;rdquo; note.&lt;/p&gt;&lt;p&gt;Our collection of notes doesn&amp;rsquo;t start with &amp;ldquo;C&amp;rdquo; though.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:a_flat&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can search for where &amp;ldquo;C&amp;rdquo; is in our array using the &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Array.html#method-i-index&#34;&gt;index&lt;/a&gt; method.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The scale starts at the fifth note in our collection. Ruby arrays are zero-indexed; the first element is at position, or index, zero. Index four, where our &amp;ldquo;C&amp;rdquo; is, is the fifth element. We&amp;rsquo;d like it to be the &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Array.html#method-i-first&#34;&gt;first&lt;/a&gt;, and have all the other notes follow in the expected order. We can use &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Array.html#method-i-rotate&#34;&gt;rotate&lt;/a&gt; with our index to accomplish this.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chromatic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:d_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:e_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:f&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:g_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:a_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:b_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make it a little more clear where that 4 came from, we can use the return from our call to &lt;code&gt;index&lt;/code&gt; as the argument to &lt;code&gt;rotate&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chromatic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:d_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:e_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:f&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:g_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:a_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:b_flat&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;octaves&#34;&gt;Octaves &lt;a href=&#34;#octaves&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Aren&amp;rsquo;t there are more than 12 &lt;a href=&#34;https://en.wikipedia.org/wiki/Musical_note&#34;&gt;sounds&lt;/a&gt; that comprise the entirety of possible music? Yes! These notes repeat themselves at a higher frequency. The same note with double the frequency is an octave.&lt;/p&gt;&lt;p&gt;Our collection of notes has a definitive &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Array.html#method-i-last&#34;&gt;end&lt;/a&gt; though.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chromatic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;d like to repeat the collection to play the next octave. We&amp;rsquo;ll treat our notes as a series that we can &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Enumerable.html#method-i-cycle&#34;&gt;cycle&lt;/a&gt; through again and again.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;note_cycle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chromatic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycle&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Calling &lt;code&gt;cycle&lt;/code&gt; with no block &lt;em&gt;and&lt;/em&gt; not providing a value for the number of times to cycle returns an &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Enumerator.html&#34;&gt;Enumerator&lt;/a&gt; that cycles forever.&lt;/p&gt;&lt;p&gt;To demonstrate, let&amp;rsquo;s ask for 40 elements from our cycle.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;times { result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; note_cycle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;notes&lt;/code&gt; array only has 12 elements. By calling &lt;code&gt;cycle&lt;/code&gt; on it this way, we infinitely repeat this progression. &amp;ldquo;C&amp;rdquo; shows up many times in our result, as we progress from one octave to the next.&lt;/p&gt;&lt;h2 id=&#34;classical-music&#34;&gt;Classical Music &lt;a href=&#34;#classical-music&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s build a Note class to encapsulate this behavior. We&amp;rsquo;ll accept a starting point that we&amp;rsquo;ll call the starting note. We&amp;rsquo;ll find the starting note in our notes collection, and start our infinite cycle with that note.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Note&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @note_cycle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(starting_note))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycle&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our Note class will also accept an offset - a number representing how far from our starting note we&amp;rsquo;ll stray. This is how far into our cycle we should reach to determine which note value we&amp;rsquo;re representing.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Note&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @note_cycle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(starting_note))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycle&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offset&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to find our final note. We&amp;rsquo;ll &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Array.html#method-i-take&#34;&gt;take&lt;/a&gt; the collection of the cycle we traverse to move from the starting note to our offset. We&amp;rsquo;ll return the &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Array.html#method-i-last&#34;&gt;last&lt;/a&gt; element of that progression as the value of our note.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Note&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;note_progression&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @note_cycle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;take(@offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    note_progression&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While we don&amp;rsquo;t need the full progression now, it&amp;rsquo;ll come in handy soon.&lt;/p&gt;&lt;h2 id=&#34;stringing-together-notes&#34;&gt;Stringing Together Notes &lt;a href=&#34;#stringing-together-notes&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s bring this back to our goal - playing a note on a guitar. We tune each string on a guitar to a particular note. Plucking the string and letting it ring out will play the note it&amp;rsquo;s tuned to - its starting note.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll get that value by setting the starting note of our Note class to be the note the guitar string is tuned to with an offset of 0.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/a_note.png&#34;    alt=&#34;Letting the A string ring out on a guitar plays an A note.&#34;&gt;&lt;/figure&gt;&lt;p&gt;You can play more notes on a guitar string than that. A guitar&amp;rsquo;s neck has many sections, called frets. Pressing down on the string on a fret and plucking the string produces a higher frequency sound. That&amp;rsquo;s the next note in our cycle.&lt;/p&gt;&lt;p&gt;Each fret will be a different offset from the same starting note. We can determine which note we play on a string tuned to &amp;ldquo;A&amp;rdquo;, pressing down on the third fret, with our Note class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/c_note.png&#34;    alt=&#34;Playing the A string on a guitar with your finger on the third fret plays a C note.&#34;&gt;&lt;/figure&gt;&lt;h2 id=&#34;fretting-about-octaves&#34;&gt;Fretting About Octaves &lt;a href=&#34;#fretting-about-octaves&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The number of frets on a guitar varies. A typical guitar may have between 18-24. That means that a string will be able to play the same note over again.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are both &amp;ldquo;A&amp;rdquo; notes, but at different octaves. We want our Note class to keep track of the octave so these don&amp;rsquo;t seem to be playing exactly the same frequency.&lt;/p&gt;&lt;p&gt;To do this, we first need to know the octave number of our starting note. We&amp;rsquo;ll change our constructor again.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Note&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @note_cycle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(starting_note))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycle&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @starting_octave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; starting_octave&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offset&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We progress to the next octave when we repeat the Chromatic scale - starting at a &amp;ldquo;C&amp;rdquo; note. This is where the full progression of notes from the starting note to our resulting value will help. We&amp;rsquo;ll &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Enumerable.html#method-i-count&#34;&gt;count&lt;/a&gt; the number of &amp;ldquo;C&amp;rdquo; notes we encounter in our progression. That&amp;rsquo;s how many octaves we traversed.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Note&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @starting_octave &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; note_progression&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Playing the starting note will have the same octave as is passed in. Playing the same note 12 frets up is the next octave.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;can-you-c-an-error&#34;&gt;Can you &amp;ldquo;C&amp;rdquo; an error? &lt;a href=&#34;#can-you-c-an-error&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our implementation is a bit naive. If we have a string tuned to &amp;ldquo;C&amp;rdquo;, and we play the starting note, we expect it to return the same octave passed in. However, it does not.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re counting the number of &amp;ldquo;C&amp;rdquo; notes we encounter in our progression. When we start with &amp;ldquo;C&amp;rdquo;, we&amp;rsquo;re guaranteed to get one, but we haven&amp;rsquo;t changed octaves.&lt;/p&gt;&lt;p&gt;We need to handle this special case. We&amp;rsquo;ll check if our starting note is &amp;ldquo;C&amp;rdquo; and exclude the starting note from our octave count if that&amp;rsquo;s the case.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Note&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c_start?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @note_cycle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;octaves_progressed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cs_passed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note_progression&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c_start?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cs_passed &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cs_passed&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @starting_octave &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; octaves_progressed&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we account for this edge case, while still working for other starting notes.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Note&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;starting_note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;starting_octave&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;octave&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;closing-notes&#34;&gt;Closing Notes &lt;a href=&#34;#closing-notes&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We now have a class that can tell us which note we play on any string of our guitar. We leveraged Ruby&amp;rsquo;s standard library to handle most of our logic. The &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Array.html&#34;&gt;Array&lt;/a&gt; class and &lt;a href=&#34;https://ruby-doc.org/core-3.1.2/Enumerable.html&#34;&gt;Enumerable&lt;/a&gt; module worked in concert with our domain knowledge. We didn&amp;rsquo;t need to write any algorithms or complex transformations ourselves. And now our computer knows how to play musical notes.&lt;/p&gt;&lt;p&gt;That sounds great to me.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s keep exploring using Ruby to make music by touching on an integration with &lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/&#34;&gt;Sonic Pi&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Anyone Can Play Guitar (With Ruby)</title>
       <link>https://kevinjmurphy.com/posts/play-guitar/</link>
       <pubDate>Thu, 22 Sep 2022 17:00:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/play-guitar/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve got the blues. I&amp;rsquo;ve been looking for the perfect guitar tone, but haven&amp;rsquo;t found it. To amp up my mood, let&amp;rsquo;s teach a computer to play the guitar through an amplifier.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s string together object-oriented principles to orchestrate a blues shuffle. We&amp;rsquo;ll model our domain with the help of inheritance, composition, and dependency injection. This talk will strike a chord with you, whether you&amp;rsquo;ve strummed a guitar before or not.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/t0C75Z0LX20&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://youtu.be/t0C75Z0LX20&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/anyone-can-play-guitar&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ruby-play-guitar#code-examples&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/anyone-can-play-guitar-proposal/&#34;&gt;Proposal&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/enumerating-musical-notes/&#34;&gt;Enumerating Musical Notes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/programming-guitar-greatness/&#34;&gt;Programming Guitar Greatness&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/composing-our-own-guitar-amps-from-inherited-gear/&#34;&gt;Composing Our Own Guitar Amps From Inherited Gear&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/&#34;&gt;Revisiting Calling Sonic Pi From Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/flog-driven-development/&#34;&gt;Flog-Driven Development&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/iQUNU36Vem4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
     </item>
   
     <item>
       <title>Symmetric Spies: RSpec Test Organization</title>
       <link>https://kevinjmurphy.com/posts/symmetric-spies/</link>
       <pubDate>Sat, 17 Sep 2022 08:53:21 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/symmetric-spies/</guid>
       <description>&lt;h2 id=&#34;special-operation-briefing&#34;&gt;Special Operation Briefing &lt;a href=&#34;#special-operation-briefing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;re managing a network of secret agents. We need to send sensitive information to our &lt;a href=&#34;https://en.wikipedia.org/wiki/Mole_(espionage)&#34;&gt;mole&lt;/a&gt; who has infiltrated their target.&lt;/p&gt;&lt;p&gt;To do so, our agents will only send a scrambled version of the message. The mole will have to convert that into meaningful text.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Agent&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pass_secret&lt;/span&gt;(message, &lt;span style=&#34;color:#e6db74&#34;&gt;to&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accept_secret(&lt;span style=&#34;color:#66d9ef&#34;&gt;Cipher&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(message))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our mole can receive this random-seeming string of characters. After deciphering the real meaning, they hold on to it for later.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mole&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept_secret&lt;/span&gt;(message)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    messages &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Cipher&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(message)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want to make sure our message-passing scheme works. But we don&amp;rsquo;t want to go through the laborious process of encoding and decoding these messages. It&amp;rsquo;s computationally intensive and not the focus of our test. The &lt;code&gt;Cipher&lt;/code&gt; is a collaborator in our class, but it&amp;rsquo;s not the star of the show. We can test that implementation, and bear those costs, in the unit tests of the &lt;code&gt;Cipher&lt;/code&gt; class. We&amp;rsquo;re testing the &lt;code&gt;Agent&lt;/code&gt; class today, not &lt;code&gt;Cipher&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;efficient-espionage-expectations&#34;&gt;Efficient Espionage Expectations &lt;a href=&#34;#efficient-espionage-expectations&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ll avoid encoding the message, but make sure it happens, by asking RSpec to &lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/docs/basics/expecting-messages&#34;&gt;expect the message&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encodes the message&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Agent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mole&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(&lt;span style=&#34;color:#66d9ef&#34;&gt;Cipher&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:encode&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pass_secret(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;to&lt;/span&gt;: mole)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our test passes. We&amp;rsquo;ve verified &lt;code&gt;pass_secret&lt;/code&gt; encodes the message provided to it. We can move on; however, I&amp;rsquo;d prefer a different test construction.&lt;/p&gt;&lt;h2 id=&#34;organization-infiltration&#34;&gt;Organization Infiltration &lt;a href=&#34;#organization-infiltration&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The domain we&amp;rsquo;re testing is about obfuscation, but I want as few surprises as possible in my tests. I like to follow a familiar pattern of how to construct my tests, so they read from top to bottom in a consistent way.&lt;/p&gt;&lt;p&gt;Some people refer to this as &lt;a href=&#34;http://xunitpatterns.com/Four%20Phase%20Test.html&#34;&gt;four-phase tests&lt;/a&gt; (setup, exercise, verify, teardown). Others call it the &lt;a href=&#34;https://wiki.c2.com/?ArrangeActAssert&#34;&gt;AAA pattern&lt;/a&gt; (arrange, act, assert).&lt;/p&gt;&lt;p&gt;Name aside, we want a convention that we can rely on. That makes it easier to scan a test and understand where we are in the process as a reader. The difficulty with our existing test is it breaks that convention. We state what we want to verify, or assert, before exercising, or acting on, the unit under test.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encodes the message&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# setup&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Agent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mole&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# verification&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(&lt;span style=&#34;color:#66d9ef&#34;&gt;Cipher&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:encode&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# exercise&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pass_secret(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;to&lt;/span&gt;: mole)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;double-agent&#34;&gt;Double Agent &lt;a href=&#34;#double-agent&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can change our test to follow this pattern by using &lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/docs/basics/spies&#34;&gt;spies&lt;/a&gt;. Our &lt;code&gt;Cipher&lt;/code&gt; will be a &lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/docs/basics/partial-test-doubles&#34;&gt;partial double&lt;/a&gt;, and we&amp;rsquo;ll assert we call the &lt;a href=&#34;https://relishapp.com/rspec/rspec-mocks/docs/basics/spies#spy-on-a-method-on-a-partial-double&#34;&gt;method we&amp;rsquo;re spying on&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encodes the message&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# arrange&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  allow(&lt;span style=&#34;color:#66d9ef&#34;&gt;Cipher&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:encode&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Agent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mole&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# act&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pass_secret(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;to&lt;/span&gt;: mole)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# assert&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(&lt;span style=&#34;color:#66d9ef&#34;&gt;Cipher&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_received(&lt;span style=&#34;color:#e6db74&#34;&gt;:encode&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our &lt;code&gt;allow&lt;/code&gt; statement, we have no constraints on what we pass to &lt;code&gt;encode&lt;/code&gt;. That&amp;rsquo;s fine in this case - we tighten up that restriction in the assertion. There we make sure not only that we call the &lt;code&gt;encode&lt;/code&gt; method on &lt;code&gt;Cipher&lt;/code&gt;, but also with the right input (&amp;ldquo;hello&amp;rdquo;).&lt;/p&gt;&lt;p&gt;I call this symmetry, or symmetric spies. We start our test by &lt;code&gt;allow&lt;/code&gt;ing the message to be received. We end our test by resolving to &lt;code&gt;expect&lt;/code&gt; that the message has been received.&lt;/p&gt;&lt;h2 id=&#34;phase-2-of-the-operation&#34;&gt;Phase 2 of the Operation &lt;a href=&#34;#phase-2-of-the-operation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As of now, we&amp;rsquo;ve verified that our agent encodes the message. We also want to make sure the mole receives the message. The &lt;strong&gt;encoded&lt;/strong&gt; message. And we want to verify that without actually running our message through the encoder.&lt;/p&gt;&lt;p&gt;Luckily, RSpec can help us out here too. We can use &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;and_return&lt;/code&gt; on our test double. With those two methods, the double will provide the specified output, given that input.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;allow(&lt;span style=&#34;color:#66d9ef&#34;&gt;Cipher&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:encode&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;and_return(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mystery&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Ciper.encode&lt;/code&gt; will only return &lt;code&gt;&amp;quot;mystery&amp;quot;&lt;/code&gt; if we call it with &lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt; as an argument.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s use this to write a test that makes sure the mole gets our encoded message.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sends the encoded message to the receiver&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Agent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mole &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mole&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  allow(&lt;span style=&#34;color:#66d9ef&#34;&gt;Cipher&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:encode&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;and_return(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mystery&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  allow(mole)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to receive(&lt;span style=&#34;color:#e6db74&#34;&gt;:accept_secret&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pass_secret(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;to&lt;/span&gt;: mole)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(mole)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_received(&lt;span style=&#34;color:#e6db74&#34;&gt;:accept_secret&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mystery&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;breaking-the-code-or-symmetry&#34;&gt;Breaking the Code, or Symmetry &lt;a href=&#34;#breaking-the-code-or-symmetry&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You may have noticed something in that last test that feels like it betrays the intent of symmetry. We are spying (with partial doubles) on two methods. We only expect to receive one. That&amp;rsquo;s not symmetrical at all!&lt;/p&gt;&lt;p&gt;We already tested that &lt;code&gt;pass_secret&lt;/code&gt; will call &lt;code&gt;encode&lt;/code&gt;. We have existing coverage verifying that. The focus of &lt;strong&gt;this test&lt;/strong&gt; is ensuring the encoded message gets to the mole. We&amp;rsquo;re using our partial double on &lt;code&gt;Cipher&lt;/code&gt; to avoid a method call that takes a long time. Another use case may be to avoid a side-effect that we don&amp;rsquo;t want to incur in our test. We&amp;rsquo;re not using it to verify system behavior.&lt;/p&gt;&lt;p&gt;We &lt;em&gt;are&lt;/em&gt; setting up the mole as a partial double to verify behavior. We want to make sure the agent interacts with the mole as expected. Because of that, we verify that we call the right method, with the right input, to the mole. We don&amp;rsquo;t verify how we encode the message.&lt;/p&gt;&lt;p&gt;There would be nothing &lt;em&gt;wrong&lt;/em&gt; with asserting that we call &lt;code&gt;encode&lt;/code&gt; on &lt;code&gt;Cipher&lt;/code&gt;. It&amp;rsquo;s at best duplicative, given our prior test. Yet, it does take away focus on the intent of our test, which is verifying communication with the mole.&lt;/p&gt;&lt;p&gt;The goals of the test drive what expectations we make in that test. The goal of this test isn&amp;rsquo;t about encoding; it&amp;rsquo;s about communicating with the mole. Seeking symmetry isn&amp;rsquo;t having the same number of doubles or spies and expectations. It&amp;rsquo;s organizing the test in a manner consistent with the four-phase test or AAA pattern.&lt;/p&gt;&lt;h2 id=&#34;debriefing&#34;&gt;Debriefing &lt;a href=&#34;#debriefing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We may not &lt;em&gt;need&lt;/em&gt; the symmetry within an individual test. Keeping it, and our test organization scheme, in mind helps us write readable, predictable tests. The element of surprise may be critical to a spy, agent, or mole in the field. It&amp;rsquo;s less of an asset in your test suite.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Sharing Past Conference Proposals</title>
       <link>https://kevinjmurphy.com/posts/sharing-past-conference-proposals/</link>
       <pubDate>Thu, 04 Aug 2022 21:00:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/sharing-past-conference-proposals/</guid>
       <description>&lt;h2 id=&#34;conference-talk-preparation-series&#34;&gt;Conference Talk Preparation Series &lt;a href=&#34;#conference-talk-preparation-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Sharing Past Conference Proposals&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/building-conference-talk-content/&#34;&gt;Building Conference Talk Content&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/preparing-conference-talk-delivery/&#34;&gt;Preparing Conference Talk Delivery&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;happy-cfp-season&#34;&gt;Happy CFP Season! &lt;a href=&#34;#happy-cfp-season&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Is it time to respond to a CFP? CFP stands for Call For Proposals. Conferences are looking for speakers, and they want to hear from you. I hope you&amp;rsquo;ll consider submitting.&lt;/p&gt;&lt;p&gt;To celebrate, I&amp;rsquo;ve published each of my &lt;a href=&#34;https://kevinjmurphy.com/tags/conference-proposal/&#34;&gt;accepted proposals&lt;/a&gt;. This is definitely not me procrastinating on writing new proposals. This post is a whimsical summary of things that worked for me that can help with your proposal.&lt;/p&gt;&lt;p&gt;Why am I only including accepted proposals? Well, first of all, because that&amp;rsquo;s all I want to do. Secondly, I may decide to resubmit an updated version of a past proposal. I don&amp;rsquo;t want to publicly identify myself.&lt;/p&gt;&lt;p&gt;Some review processes are anonymous. I&amp;rsquo;m sure every current and future Program Committee member reads all my posts (hi, everyone!). I wouldn&amp;rsquo;t want everyone to have to recuse themselves because they already know who wrote it. How would it ever get accepted then?&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s dig in to some thoughts you might consider in your proposal, using mine as an example.&lt;/p&gt;&lt;h2 id=&#34;build-your-outline&#34;&gt;Build your outline &lt;a href=&#34;#build-your-outline&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are differing opinions on how long your proposal should be. As you can tell from reading this, I tend to be verbose. I try to tamp it down, but, I&amp;rsquo;ve got to &lt;a href=&#34;#be-honest-about-yourself&#34;&gt;be me&lt;/a&gt;. Whether it&amp;rsquo;s bullet points, sentences, or paragraphs, you need to define the scope of your topic.&lt;/p&gt;&lt;p&gt;What are the main points you want to cover? What will the audience take away from attending your session? The Program Committee needs to know in your proposal. The details section is where I provide this information. There&amp;rsquo;s no need to keep any secrets or hold anything back. If there is something you want to have as a bit of a surprise to the audience, you can keep it out of the abstract. But if you know what your plan is, I recommend having it in your details section. I creatively titled this the &amp;ldquo;Outline&amp;rdquo; in my &lt;a href=&#34;https://kevinjmurphy.com/posts/evaluating-alternatives-proposal/&#34;&gt;evaluating alternatives&lt;/a&gt; proposal.&lt;/p&gt;&lt;p&gt;This also helps you once the Program Committee accepts your proposal. Congratulations! Now you need to turn the proposal into a talk. Where do you start? Your outline gives you a starting point. You&amp;rsquo;re not beholden to it. It might flow in a different order. You might cut sections, or combine them, or add new ones. But you&amp;rsquo;re not starting from scratch. You already helped yourself out in the past with the outline.&lt;/p&gt;&lt;h2 id=&#34;revisit-conventions-and-norms&#34;&gt;Revisit conventions and norms &lt;a href=&#34;#revisit-conventions-and-norms&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You don&amp;rsquo;t need to invent a technology, principle, or methodology to have a conference talk. Sharing your experience with a well-known concept is a great contribution. I talked about the potential downsides of some of our favorite conventions in &lt;a href=&#34;https://kevinjmurphy.com/posts/dont-hang-me-out-to-dry-proposal/&#34;&gt;Don&amp;rsquo;t Hang Me Out To DRY&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;That doesn&amp;rsquo;t mean that your perspective needs to be controversial or a &amp;ldquo;hot take&amp;rdquo;. The number of first-time conference attendees is large! This may be the opportunity for early-career developers to learn these time-honored traditions we love, or love to hate.&lt;/p&gt;&lt;h2 id=&#34;write-what-you-know-or-what-you-want-to-know&#34;&gt;Write what you know, or what you want to know &lt;a href=&#34;#write-what-you-know-or-what-you-want-to-know&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Where do proposal ideas come from? For me, they&amp;rsquo;re not born out of a CFP being open. I have a private repository that I keep updated throughout the year with ideas for talks. Some of them may be a sentence. Some of them may be a title. Some may be a link to something I did, or read, and want to flesh out more.&lt;/p&gt;&lt;p&gt;Most of the time, my proposals are about things that I know. That&amp;rsquo;s my comfort zone. That&amp;rsquo;s what I did for &lt;a href=&#34;https://kevinjmurphy.com/posts/fake-it-while-you-make-it-proposal/&#34;&gt;Fake It While You Make It&lt;/a&gt;. I was on a project that dealt with a lot of third-party dependencies. I explored different options for testing our interactions with them. I felt comfortable sharing that with an audience. I felt that my experience could help someone else.&lt;/p&gt;&lt;p&gt;Proposals can also be about things that you &lt;em&gt;want&lt;/em&gt; to know more about. If you have a lot of passion and interest in developing your skills in a certain area, it can be a forcing function. You don&amp;rsquo;t need to be an expert to submit the proposal. You need to do enough work to be comfortable and confident in what you&amp;rsquo;re proposing. You need to project that to the Program Committee. Forward-looking proposals can accelerate your learning. They can also be very enticing to the Program Committee looking for new ideas.&lt;/p&gt;&lt;h2 id=&#34;go-all-in-with-a-theme&#34;&gt;Go all-in with a theme &lt;a href=&#34;#go-all-in-with-a-theme&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All my talks have some thematic grounding or some world that they live it. The talks from my proposals above were about food research for SPAM, onboarding for a new role at a &amp;ldquo;perfect&amp;rdquo; company, and building the latest in sweater weather detection technology. All those scenarios came to be &lt;em&gt;after&lt;/em&gt; proposal acceptance. They aren&amp;rsquo;t present in the proposal.&lt;/p&gt;&lt;p&gt;It doesn&amp;rsquo;t have to be that way though. If you have a theme already picked out that you know the talk will focus on - lean into it. Make it clear in the proposal. Draw attention to it in the abstract. Spell out how you&amp;rsquo;ll tie all your examples back to your theme in the details. I did that in the proposal for my &lt;a href=&#34;https://kevinjmurphy.com/posts/enough-coverage-to-beat-the-band-proposal/&#34;&gt;coverage talk&lt;/a&gt;. It was always going to be about supporting a band on tour. There was no need to hide it - I couldn&amp;rsquo;t do the talk any other way in my head.&lt;/p&gt;&lt;p&gt;As an aside, this is easily my favorite talk I&amp;rsquo;ve written to date. The theme definitely helped with that. I got to escape into that world for a bit, and somewhat avoid the real world in the Fall of 2020. (It wasn&amp;rsquo;t the greatest, for a lot of reasons. If you&amp;rsquo;re wondering why, you must be reading this from the far future. Consult your nearest history book.).&lt;/p&gt;&lt;p&gt;This talk was actually born out of my &amp;ldquo;Don&amp;rsquo;t Hang Me Out To DRY&amp;rdquo; talk. I was procrastinating writing the actual talk. Instead I investigated how all these code coverage tools work. I needed to cut all that out from the talk because I didn&amp;rsquo;t have enough time. But, because I keep a list of possible talk topics, I revisited it next year.&lt;/p&gt;&lt;p&gt;Given that it&amp;rsquo;s a talk about live music, one day I want to to deliver this talk to a live, in-person audience.&lt;/p&gt;&lt;h2 id=&#34;incorporate-learnings-from-outside-the-community&#34;&gt;Incorporate learnings from outside the community &lt;a href=&#34;#incorporate-learnings-from-outside-the-community&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Conference talks about &amp;ldquo;what &lt;code&gt;x&lt;/code&gt; taught me about programming&amp;rdquo; may feel like an already-covered trope. I think the reason it comes up so much is because it &lt;em&gt;works&lt;/em&gt;. We&amp;rsquo;re all grounded in the community we share as developers. But our individual experiences are wider than that. Those different perspectives can have value to others in the community. I&amp;rsquo;ve been so bold as to suggest that a developer can learn a thing or two from a &lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba-proposal/&#34;&gt;MBA program&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;What have you done outside of development that we can incorporate into our practices? Whether it be theatre &lt;a href=&#34;https://www.youtube.com/watch?v=JWDPRWPtOeg&#34;&gt;set design&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=mrdmHK6ogC0&#34;&gt;famous bards&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=7zW_BBiTLAY&#34;&gt;woodworking&lt;/a&gt;, or anything else, it can make for a compelling proposal topic.&lt;/p&gt;&lt;h2 id=&#34;be-honest-about-yourself&#34;&gt;Be honest about yourself &lt;a href=&#34;#be-honest-about-yourself&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Proposals, and conference talks, should be a reflection of you. They should demonstrate what&amp;rsquo;s interesting and exciting to you, in your voice. Make sure you have the conviction to follow through on anything in your proposal. Someone may suggest some feedback that you don&amp;rsquo;t think you can deliver, or agree with. Even if it guarantees acceptance, I would be hard-pressed to make the change. While I ultimately find it rewarding, writing a talk &lt;em&gt;after&lt;/em&gt; getting accepted is (for me) a lot of work. It&amp;rsquo;d be even harder to do if I wasn&amp;rsquo;t bought into it.&lt;/p&gt;&lt;p&gt;My &lt;a href=&#34;https://kevinjmurphy.com/posts/browser-history-confessional-proposal/&#34;&gt;browser history confessional proposal&lt;/a&gt; started off as a joke or a dare to myself. &amp;ldquo;Wouldn&amp;rsquo;t it be funny to get up on stage and tell the world all the things that I actually searched for to help me with my job?&amp;rdquo; I thought to myself. Then the Program Committee called my bluff, and accepted it. Thankfully, I bought into the idea. In developing the proposal, I uncovered a greater theme than the initial joke. If I wasn&amp;rsquo;t willing to see it through to the stage, I couldn&amp;rsquo;t have hit the Submit button.&lt;/p&gt;&lt;h2 id=&#34;your-turn&#34;&gt;Your Turn &lt;a href=&#34;#your-turn&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When people ask me for resources about writing a proposal, I currently send them:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://noelrappin.com/blog/2014/01/conference-prompts-or-how-to-submit-proposals-and-influence-people/&#34;&gt;Conference Prompts: Or How to Submit Proposals and Influence People&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://noelrappin.com/blog/2014/03/what-i-learned-from-reading-429-conference-proposals/&#34;&gt;What I learned from reading 429 conference proposals&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.sarahmei.com/blog/2014/04/07/what-your-conference-proposal-is-missing/&#34;&gt;What Your Conference Proposal Is Missing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://schneems.com/blogs/2016-04-07-conference-proposal&#34;&gt;Get Your Conference Proposal Accepted&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.deconstructconf.com/blog/how-to-prepare-a-talk&#34;&gt;How to prepare a talk&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://thoughtbot.com/blog/conference-talk-proposal-examples&#34;&gt;Conference Talk Proposal Examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=l9JXH7JPjR4&#34;&gt;How to Talk to Developers (video)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Review &lt;a href=&#34;https://speakerline.io/proposals&#34;&gt;other proposals&lt;/a&gt; (including &lt;a href=&#34;https://speakerline.io/speakers/96&#34;&gt;mine&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What can you share with everyone? What are you passionate about? What do you want to learn more about? Take all that energy and turn it into a proposal! Send me a link showing your name in the conference program so we can celebrate together.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Browser History Confessional: Searching My Recent Searches - The Proposal</title>
       <link>https://kevinjmurphy.com/posts/browser-history-confessional-proposal/</link>
       <pubDate>Wed, 03 Aug 2022 21:28:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/browser-history-confessional-proposal/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We all only have so much working memory available in our brains. Developers may joke about spending their day composing search engine queries. The reason it&amp;rsquo;s a joke is because of the truth behind it. Search-driven development is a reality.&lt;/p&gt;&lt;p&gt;Join me, and my actual search history, on a journey to solve recent challenges I faced. I&amp;rsquo;ll categorize the different types of information I often search for. You&amp;rsquo;ll leave with tips on retrieving the knowledge you need for your next bug, feature, or pull request.&lt;/p&gt;&lt;h2 id=&#34;details&#34;&gt;Details &lt;a href=&#34;#details&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The situations where I reach for external knowledge are generally one of the following:&lt;/p&gt;&lt;h3 id=&#34;syntax-and-implementation-details&#34;&gt;Syntax and Implementation Details &lt;a href=&#34;#syntax-and-implementation-details&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Do you remember how to format a date as a string in a specific convention? I sure don&amp;rsquo;t! But if I need to do so, I revisit the documentation for &lt;a href=&#34;https://apidock.com/ruby/DateTime/strftime&#34;&gt;strftime&lt;/a&gt;. It includes a great list of directives to reference.&lt;/p&gt;&lt;p&gt;Even if I&amp;rsquo;m pretty sure I remember the correct directives, I still take a moment to review this list. There may be a shorthand or convention that I can use to achieve the format I need.&lt;/p&gt;&lt;p&gt;ActiveRecord&amp;rsquo;s API surface is large, and includes many methods that look to do the same thing. Even though they may give you the same data, they may have different side-effects. One of these side-effects is in performance. Reviewing posts like Nate Berkopec&amp;rsquo;s &amp;ldquo;&lt;a href=&#34;https://www.speedshop.co/2019/01/10/three-activerecord-mistakes.html&#34;&gt;3 ActiveRecord Mistakes That Slow Down Rails Apps: Count, Where and Present&lt;/a&gt;&amp;rdquo; can remind me, in the moment, of the trade-offs. Re-reading it forces me to consider what my situation demands, and what will be most performant.&lt;/p&gt;&lt;p&gt;I don&amp;rsquo;t have the capacity (or interest) in committing this information to memory. But I do know exactly where I need to go to find it. It&amp;rsquo;s not an introductory search each time - I know exactly what I&amp;rsquo;m looking for &lt;strong&gt;and&lt;/strong&gt; where to get the answers I need. I can&amp;rsquo;t hold the state of the world in my head, but I can keep breadcrumbs or bookmarks to know how to retrieve the data I need.&lt;/p&gt;&lt;h3 id=&#34;solving-direct-problems&#34;&gt;Solving Direct Problems &lt;a href=&#34;#solving-direct-problems&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I recently got a new computer for work. It&amp;rsquo;s the first time I&amp;rsquo;ve had to set up a computer in four years. I installed everything I thought I needed, cloned a repository, and bundled the application. It didn&amp;rsquo;t succeed. In the backtrace, I saw:&lt;/p&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fatal error: &amp;#39;libpq-fe.h&amp;#39; file not found&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I did not have the first clue how to fix that. But I did trust that I wasn&amp;rsquo;t the only person to ever see that. So, I did the most productive next step I could think of. I copied the error, exactly as written, and pasted it into a search engine. It turns out that the pg gem has a much easier time installing on a computer that has postgres installed. One search result clicked on, one command issued to my package manager, and I was on my way to the next problem, never to consider &amp;ldquo;libpq-fe.h&amp;rdquo; again.&lt;/p&gt;&lt;p&gt;The story of these errors isn&amp;rsquo;t always so neatly resolved. However, I&amp;rsquo;m hard-pressed to consider a next step with a higher success rate. Searching the internet for the &lt;em&gt;exact&lt;/em&gt; error message can be a life saver! We&amp;rsquo;ll talk about where to source this information from, such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The project&amp;rsquo;s issue tracker.&lt;/li&gt;&lt;li&gt;The project&amp;rsquo;s published mailing list.&lt;/li&gt;&lt;li&gt;A discussion forum.&lt;/li&gt;&lt;li&gt;A trusty generic search query.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now with some answers, we need to determine which solutions might actually work. We&amp;rsquo;ll keep track of different things we&amp;rsquo;ve tried so we don&amp;rsquo;t find ourselves going in circles. We&amp;rsquo;ll practice stepping away to take a break. We&amp;rsquo;ll even consider reaching out to an actual human being for another perspective.&lt;/p&gt;&lt;h3 id=&#34;revisiting-assumptions-and-approaches&#34;&gt;Revisiting Assumptions and Approaches &lt;a href=&#34;#revisiting-assumptions-and-approaches&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For help with identifying N+1 queries, I reach for the &lt;a href=&#34;https://github.com/flyerhzm/bullet&#34;&gt;bullet&lt;/a&gt; gem. Like any tool, it&amp;rsquo;s not perfect, has its particular quirks, and has a learning curve. But, I&amp;rsquo;m comfortable with it and mostly know how to fight with it, if I need to. That familiarity carries a lot of value, but must not be the only consideration when reaching for a tool. By taking a few minutes to see the current state of the world for evaluating N+1 queries, I may discover the new(er) &lt;a href=&#34;https://github.com/palkan/n_plus_one_control&#34;&gt;n_plus_one_control&lt;/a&gt; gem.&lt;/p&gt;&lt;p&gt;There are many tools, many ways, and many approaches to solving problems. Reaching for what you know can have immediate efficiencies and comfort. Our world as developers is rapidly-changing. It&amp;rsquo;s important to keep an eye out for any new (to you) philosophies or approaches. This doesn&amp;rsquo;t mean chasing &amp;ldquo;the new hotness&amp;rdquo;. It does suggest awareness of what&amp;rsquo;s possible, what exists, and what warrants further evaluation. Now may not be the time to introduce that new tool or that new design pattern. That five minute investigation may pay off months later when you think, &amp;ldquo;what was that thing I was looking at a while ago? That will apply perfectly right now.&amp;rdquo;&lt;/p&gt;&lt;h3 id=&#34;sharing-communal-knowledge&#34;&gt;Sharing Communal Knowledge &lt;a href=&#34;#sharing-communal-knowledge&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Calling &lt;code&gt;update_all&lt;/code&gt; won&amp;rsquo;t trigger ActiveRecord &lt;a href=&#34;https://apidock.com/rails/ActiveRecord/Base/update_all/class&#34;&gt;callbacks&lt;/a&gt;, and that includes the &lt;code&gt;updated_at&lt;/code&gt; timestamp. RSpec includes a &lt;code&gt;have_enqueued_job&lt;/code&gt; &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/matchers/have-enqueued-job-matcher&#34;&gt;matcher&lt;/a&gt; that can verify you enqueued ActiveJob jobs. One of Sandi Metz&amp;rsquo;s &lt;a href=&#34;https://thoughtbot.com/blog/sandi-metz-rules-for-developers&#34;&gt;rules&lt;/a&gt; is to have methods that are no longer than five lines. Not to brag, but these are things that I happen to know.&lt;/p&gt;&lt;p&gt;Why am I searching for them then? I want to share that information with others, and provide original sources for them. This often arises in code review. I could recommend using &lt;code&gt;have_enqueued_job&lt;/code&gt; in a spec. If the author hasn&amp;rsquo;t heard of that before, I&amp;rsquo;m now putting &lt;em&gt;more&lt;/em&gt; work on them. I should bolster that by adding a link to the documentation in my comment, along with a code snippet. I&amp;rsquo;m giving them a path forward, and a reference to learn more the implementation details.&lt;/p&gt;&lt;p&gt;This may become one of their items that they never remember the details of. Much like me and &lt;code&gt;strftime&lt;/code&gt;. But now they know where to go each time to get that information. I&amp;rsquo;ve benefited from this kindness of reviewers in my past.&lt;/p&gt;&lt;h2 id=&#34;pitch&#34;&gt;Pitch &lt;a href=&#34;#pitch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Stumbling through &lt;strong&gt;real&lt;/strong&gt; searches I&amp;rsquo;ve made, people may feel better about their own ability to solve problems. We can&amp;rsquo;t always do it alone; we need to seek external resources to help some times. At the least, we can commiserate on how we find ourselves looking up the same things every time. We may all have a different &amp;ldquo;thing&amp;rdquo; we continually look up, but I&amp;rsquo;m convinced we all have at least one.&lt;/p&gt;&lt;p&gt;Beyond the awkward goal of embarrassing myself so others can relate, there is the real truth that developers need to search for things. A lot. The search methodology I use, and the reasons I&amp;rsquo;m searching at all, should help others in their next search.&lt;/p&gt;&lt;h2 id=&#34;bio&#34;&gt;Bio &lt;a href=&#34;#bio&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kevin lives near Boston, Massachusetts, where he is a Software Developer.&lt;/p&gt;&lt;p&gt;Consulting a search engine for Kevin Murphy will show luxury hair care products, an actor, and a University of Chicago Economist. None of that information has much to do with me, unfortunately.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Engineering MBA - The Proposal</title>
       <link>https://kevinjmurphy.com/posts/engineering-mba-proposal/</link>
       <pubDate>Wed, 03 Aug 2022 21:27:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/engineering-mba-proposal/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Improve your work as a developer with an introduction to strategic planning,situational leadership, and process management. No balance sheets or incomestatements here; join me to learn the MBA skills valuable to developers withoutthe opportunity costs of lost wages or additional student loans.&lt;/p&gt;&lt;p&gt;Demystify the strategic frameworks your management team may use to makedecisions and learn how you can use those same concepts in your daily work.Explore the synergy one developer achieved by going to business school (sorry,the synergy comment slipped out - old habit).&lt;/p&gt;&lt;h2 id=&#34;details&#34;&gt;Details &lt;a href=&#34;#details&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The purpose of this talk is to introduce key concepts from an MBA program thathave proven valuable to me as a software developer. These aren&amp;rsquo;t focused ontools to help you start your own business, or run your own department as amanager. There will be no math, no financial models, and no marketing plans.These topics are items that I learned during my MBA curriculum that I put touse in my day-to-day work as an individual contributor developer.&lt;/p&gt;&lt;p&gt;For each of these, I&amp;rsquo;ll introduce the topic and then explain how it&amp;rsquo;s applicableto developers.&lt;/p&gt;&lt;h3 id=&#34;situational-leadership&#34;&gt;Situational Leadership &lt;a href=&#34;#situational-leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;introduction&#34;&gt;Introduction &lt;a href=&#34;#introduction&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Different tasks call for different leadership styles, and an effective team orleader can adapt their style as needed. Based on both the assignment and thepeople involved, the support, guidance, and process required to complete thework should vary. The Situational Leadership model, first introduced in“&lt;a href=&#34;https://www.amazon.com/Management-Organizational-Behavior-10th-Hersey/dp/0132556405/ref=dp_ob_title_bk&#34;&gt;Management of Organizational Behavior&lt;/a&gt;”,suggests four different leadership styles.&lt;/p&gt;&lt;h5 id=&#34;directing&#34;&gt;Directing &lt;a href=&#34;#directing&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Directing is considered the formative stage of leadership, where the team orindividuals may not have much context to navigate independently in a successfulmanner, like if one is new to a team. Even if someone has been on a team for along time, the directing style can be beneficial if the work is new (orunfamiliar), but can be accomplished by following a recipe. When using thisstyle in creating a ticket to be added to the sprint, ensure it contains aclearly defined set of instructions for what to do. If work is assigned toparticular individuals during sprint planning, ensure there’s a second memberassigned to this work, someone who has done something similar before, so thatthey can work together and learn from each other to accomplish the goal.&lt;/p&gt;&lt;h5 id=&#34;coaching&#34;&gt;Coaching &lt;a href=&#34;#coaching&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Rather than following a recipe, as in the directing style, when coaching,instructions may still be required to lead to a successful outcome, but theyare better structured as suggestions or a jumping off point. This gives theperson assigned the task the freedom, and encouragement, to put their own spinon the work. Find past examples of solutions to similar problems in the past,and link to them in the ticket. The purpose is not to enforce or take thestance that these things &lt;strong&gt;are&lt;/strong&gt; the same and should be the same. Instead,point out that investigation should be conducted by the team working on it todetermine how similar these tickets are and what applicability the othersolution has to this current task.&lt;/p&gt;&lt;h5 id=&#34;supporting&#34;&gt;Supporting &lt;a href=&#34;#supporting&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;When team members have relevant experience to complete the work successfully,but may be missing the self-confidence to deliver the work, a supportingleadership style may aid the task while also benefiting the growth of the teammember. It’s unlikely, but still encouraged if felt necessary by the teammember, to have an upfront conversation about implementation details on how tocomplete the task. Instead, daily standup or other natural touchpoints are abetter opportunity to help finish the task. The team member may be betterhelped by checking in on how they’re feeling about the work and providing themample time to talk with you about their progress or any issues they’ve comeacross.&lt;/p&gt;&lt;h5 id=&#34;delegating&#34;&gt;Delegating &lt;a href=&#34;#delegating&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The delegation leadership style is best applied for a team member who is bothhighly motivated and very skilled in the particular task. The need forsupervision is minimal, and the primary delegation task for the leader is toget out of the way and clear any impediments the team member may have. That is,of course, a component in all of these styles, but it is essentially all that’sleft in this stage.&lt;/p&gt;&lt;p&gt;Most importantly, this is an opportunity to pull other team members forward onthis continuum with this task. Should it be a safe opportunity to do so, wherethere aren’t intense time pressures or other risk factors, this is absolutelywhen the experienced person assigned to this work should be working alongside aless familiar colleague to share their knowledge and expertise, for the benefitof all.&lt;/p&gt;&lt;h4 id=&#34;developer-applicability&#34;&gt;Developer Applicability &lt;a href=&#34;#developer-applicability&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Thinking through these styles can be helpful when engaged in sprint planningmeetings or backlog refinement/grooming sessions. Situational Leadership can beused to determine how to parcel out, organize, or describe the work to be done.It’s important to note that it’s not sufficient to use one particular style,even towards a specific team member, for all units of work. A team member maybe able to be left alone and faithfully execute one task, where the delegationstyle will work best. That same team member may be completely unfamiliar withanother aspect of the project, where the directing style will be most helpful.&lt;/p&gt;&lt;p&gt;In order to round out the familiarity amongst the team with areas of theapplication or technical concepts, certain work may be recommended forparticular team members, with the knowledge and understanding that theappropriate support is required. However, if there is a time-sensitive orextremely important unit of work that must be addressed, it may be moreappropriate to play to the strengths (and familiarity) of a team member whorecently worked in that space to complete the ticket.&lt;/p&gt;&lt;p&gt;Situational Leadership dynamics can also play out in pairing sessions. Ifyou’re able to ascertain your pair’s comfort with a particular task, you canuse that information to shape the pairing session to meet everyone’s needs. Forexample, someone completely new to a topic may not have the context to navigatearound the area being worked on, so while the Situational Leadership modelwould suggest a “Directing” style, in a pairing session, that may manifestitself more like a “Tour Guide” where the pair with more context provides thebackground and story for the work being completed while driving themselves, andallowing ample time for questions and clarification as the task is movedthrough - along with plenty of opportunity for interactivity, allowing theother pair to build up their familiarity with the work being done.&lt;/p&gt;&lt;h3 id=&#34;competitive-advantage&#34;&gt;Competitive Advantage &lt;a href=&#34;#competitive-advantage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;introduction-1&#34;&gt;Introduction &lt;a href=&#34;#introduction-1&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Your competitive advantage, a concept largely attributed to the work of&lt;a href=&#34;https://www.amazon.com/Competitive-Advantage-Creating-Sustaining-Performance/dp/0684841460/ref=sr_1_1?crid=35XM4IZRB6LRZ&amp;amp;keywords=michael+porter+competitive+advantage&amp;amp;qid=1579645935&amp;amp;sprefix=michale+porter+comp%2Caps%2C147&amp;amp;sr=8-1&#34;&gt;Michael Porter&lt;/a&gt;,is what sets you apart from others. This section will discuss the &amp;ldquo;generic&amp;rdquo;strategies to achieving a competitive advantage.&lt;/p&gt;&lt;p&gt;A core competency is part of what drives your competitive advantage, and yourefforts should be focused on maximizing effort spent there while minimizingeffort elsewhere. Core competency is a term that was popularized thanks to thework of &lt;a href=&#34;https://scholar.google.com/scholar_url?url=https://sites.google.com/site/ifim0911/The_Core_Competence_of_the_Corporati.pdf&amp;amp;hl=en&amp;amp;sa=X&amp;amp;scisig=AAGBfm2idIlXpXLeQmHlybZybf8HY1erAg&amp;amp;nossl=1&amp;amp;oi=scholarr&#34;&gt;Prahalad and Hamel&lt;/a&gt;.&lt;/p&gt;&lt;h5 id=&#34;cost&#34;&gt;Cost &lt;a href=&#34;#cost&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The most obvious strategy, but least sustainable over the long-term, is to bethe lowest-cost provider. This may be feasible if you can reliably produce yourproduct or offering in a way that competitors cannot, or if you have a massiveVC runway and raised a sizable round of investment. This is also the easieststrategy to replicate. Firms employing this strategy must be careful not to bedriven to a race to the bottom, at which point there is no cost advantage andanother strategy is the only way to succeed long-term. If we were building ablogging platform, then to have cost be a competitive advantage, you would needto sell your product cheaper than any other competitor.&lt;/p&gt;&lt;h5 id=&#34;differentiation&#34;&gt;Differentiation &lt;a href=&#34;#differentiation&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;If one is intentionally operating in a way that is unique in the landscape,they are looking to capitalize on the competitive advantage of differentiation.This highlights certain compelling or important characteristics for potentialcustomers and accentuates your ability to deliver on those items. To furtherour blogging platform example, this may be a concierge service thatautomatically (at least in the eyes of the customer) brings in any writing thecustomer has already done and imports it onto the new platform. The blogcompany may be able to charge a premium for that service, and attract morecustomers, if it meets the needs of customers in ways that other platforms donot.&lt;/p&gt;&lt;h5 id=&#34;focus&#34;&gt;Focus &lt;a href=&#34;#focus&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The focus strategy tends to manifest itself by identifying a particular segmentof the market and tailoring an offering that’s specific to those customers. Forexample, the blogging platform may focus on doctors by building a feature thatprovides a commentmoderation system which scans text for possible HIPAA violations and holdscomments in a temporary queue until they’ve been approved. If you’re not adoctor or a healthcare worker, that feature may not be valued very highly inyour decision ofblogging platform (though hopefully it’s something you can appreciate); however,if you are a doctor, that can be a deciding factor in your choice of whichplatform to start your blog on.&lt;/p&gt;&lt;h4 id=&#34;developer-applicability-1&#34;&gt;Developer Applicability &lt;a href=&#34;#developer-applicability-1&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If you’re building functionality to send a user an email and your applicationhappens to be an email delivery service, then it’s (hopefully) in the bestinterests of the company to be writing and using your own software to manageall the infrastructure and processes involved with sending an email. However,if that is not your company’s business, then you’re likely much better offrelying on a company that focuses on email delivery and focusing &lt;em&gt;your&lt;/em&gt; customdevelopment on the areas that are truly unique about your organization.&lt;/p&gt;&lt;h3 id=&#34;process-management&#34;&gt;Process Management &lt;a href=&#34;#process-management&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;introduction-2&#34;&gt;Introduction &lt;a href=&#34;#introduction-2&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Identifying and proposing informed changes that help achieve our goals for ourproducts, our companies, and our daily lives is critical to facilitatecontinuous improvement. Business Process Reengineering is the strategy ofdocumenting the current state of different processes and critically evaluatingthe value of each step to propose a more streamlined future process. &lt;a href=&#34;https://hbr.org/1990/07/reengineering-work-dont-automate-obliterate&#34;&gt;Michael Hammer&lt;/a&gt;is credited with developing this work.&lt;/p&gt;&lt;h4 id=&#34;developer-applicability-2&#34;&gt;Developer Applicability &lt;a href=&#34;#developer-applicability-2&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Developers are continually introducing and refining processes for their endusers; we call them features. Managing, benchmarking, and refining theseprocesses can be critical to the success or failure of an overall product.&lt;/p&gt;&lt;p&gt;More personally, we all have our particular workflows we follow. By evaluatingour tools or the steps we take to deliver our work, we may become moreefficient and eliminate what Business Process Reengineering practitioners maycall “wasteful” or “low-value” activities. For example, when interacting withgit, this may mean writing new aliases for commonly-used commands, learningdifferent shortcuts, using a different git client entirely, or learning toeliminate the need for entire commands, like using git pull rather than gitfetch and git merge.&lt;/p&gt;&lt;h2 id=&#34;pitch&#34;&gt;Pitch &lt;a href=&#34;#pitch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After two years spent earning an MBA full-time, I returned to the workforcejust as I left it: a software developer. The knowledge I gained over those twoyears is much more applicable to my day-to-day work as a software developerthan I ever thought it would be.&lt;/p&gt;&lt;p&gt;An MBA mindset helps developers solve problems up and down a company’smanagement structure. It gives you the tools to assist the management team inmaking tradeoff decisions between projects, and also more perspective on whythat piece of code you’re writing is so important to the company’s success.&lt;/p&gt;&lt;h2 id=&#34;speaker-information&#34;&gt;Speaker Information &lt;a href=&#34;#speaker-information&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kevin utilizes the knowledge learned as a business school graduate every day asa software developer. As proof of how great at business he is, he’s giving allof this information away: for free.&lt;/p&gt;&lt;p&gt;Kevin lives near Boston where he is a Software Developer at The Gnar Company.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Enough Coverage To Beat The Band - The Proposal</title>
       <link>https://kevinjmurphy.com/posts/enough-coverage-to-beat-the-band-proposal/</link>
       <pubDate>Wed, 03 Aug 2022 21:26:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/enough-coverage-to-beat-the-band-proposal/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The lights cut out. The crowd roars. It’s time. The band takes the stage. They’ve practiced the songs, particularly the &lt;em&gt;covers&lt;/em&gt;. They’ve sound checked the &lt;em&gt;coverage&lt;/em&gt; of the speakers. They know the lighting rig has the proper colored gels &lt;em&gt;covering&lt;/em&gt; the lamps. They’re nervous, but they’ve got it all &lt;strong&gt;covered&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Similarly, code coverage can give you confidence before your app performs on production and also tell you how live code is used (or not used). We’ll cover how to leverage ruby’s different coverage measurement techniques in concert to assist your crew and delight your audience.&lt;/p&gt;&lt;h2 id=&#34;details&#34;&gt;Details &lt;a href=&#34;#details&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This talk will be an explanation of the different modes ruby’s &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.0/libdoc/coverage/rdoc/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module provides. It will use the theme of staging a concert as the through line. We’ll progress through the band’s setlist, where each song is one of the modes you can pass to &lt;code&gt;Coverage.start&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For each mode, we will examine how it works and what it tells you. We’ll examine the coverage results of code that models performing a concert as example scenarios where that code coverage mode yields actionable insights. While code coverage is frequently talked about in regards to an application’s test suite, this talk will also explore how coverage can be used for instrumenting a running application in production.&lt;/p&gt;&lt;h3 id=&#34;code-coverage-modes&#34;&gt;Code Coverage Modes &lt;a href=&#34;#code-coverage-modes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Each mode answers a different question about the code that was run under coverage:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lines - how many times was each line executed?&lt;/li&gt;&lt;li&gt;Oneshot Lines - which lines were executed?&lt;/li&gt;&lt;li&gt;Branches - was this code path of a conditional executed?&lt;/li&gt;&lt;li&gt;Methods - was this method executed?&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;lines&#34;&gt;Lines &lt;a href=&#34;#lines&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This is the “classic” implementation of providing coverage. Each relevant line, that is those that aren’t things like empty lines or “end” statements, has a counter that is incremented each time the line is visited in code execution while coverage is running. At the conclusion, you will see how many times each line is executed.&lt;/p&gt;&lt;h5 id=&#34;benefits&#34;&gt;Benefits &lt;a href=&#34;#benefits&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;This is the default mode for coverage.&lt;/li&gt;&lt;li&gt;Most of the time, this option will provide you with the information you want.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;instructive-example&#34;&gt;Instructive Example &lt;a href=&#34;#instructive-example&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The band’s guitar technician needs to place an order for guitar strings but needs to know how many to buy. Each guitar is restrung before each show; however, strings can break during the performance. Knowing the correct buffer to purchase is the unknown. We can’t run out of strings, but we also can’t be loading and unloading unnecessary equipment every night.&lt;/p&gt;&lt;p&gt;We already have one big box of strings that should last a while. We’ll track how many strings break throughout the first 10 shows of the tour and use that number to place an order for the rest of the tour. In our code that powers this concert, there is a line in the method to pluck a guitar string that will break the string. We will run coverage over the first 10 shows in production to see how often that line is executed, and know how big of an order to place.&lt;/p&gt;&lt;h4 id=&#34;oneshot-lines&#34;&gt;Oneshot Lines &lt;a href=&#34;#oneshot-lines&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Similar to Lines Coverage, this also documents that a relevant line was executed while coverage was running. However, it’s a binary report of whether it was executed or not. It will not tell you how often. This may be sufficient in many cases, and comes with the benefit of being more performant every subsequent time a particular line of code is executed under coverage.&lt;/p&gt;&lt;h5 id=&#34;benefits-1&#34;&gt;Benefits &lt;a href=&#34;#benefits-1&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Oneshot provides you with nothing more than if a line of application code is executed in a test suite.&lt;/li&gt;&lt;li&gt;As long as being constrained to knowing if something ran or not, and not knowing how often, is sufficient, Oneshot Lines Coverage provides the same feedback as Lines Coverage with better performance.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;instructive-example-1&#34;&gt;Instructive Example &lt;a href=&#34;#instructive-example-1&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This band uses a lot of synthesizers and keyboards in their music, and the different sounds that they can make are stored as “patches”. These are stored in memory on these instruments, and the memory storage is finite. The band has been booked to play a festival, which will be great for exposure to a larger audience. However, because of the number of other acts performing and the shortened time to set up their equipment, they can’t load in and set up all of their synthesizers.&lt;/p&gt;&lt;p&gt;No single synthesizer they have contains enough memory to store all their patches. However, they can’t play these songs without the right patches. It will very obviously sound wrong, both to them and the audience. Whether the sound or effect is used once or a million times, it’s equally vital to have it available for the live show.&lt;/p&gt;&lt;p&gt;To find out what patches they need for this one show, they run through the entire festival setlist beforehand, keeping track of whether a patch was used. After all the songs have been played, any patches that are used will be loaded on the fewest number of synthesizers possible. The other patches can be safely left off the instruments used for the festival.&lt;/p&gt;&lt;h4 id=&#34;branches&#34;&gt;Branches &lt;a href=&#34;#branches&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Branches Coverage tracks execution of different conditional paths and documents how often those different paths are run. The unique benefit that this provides over Line Coverage is in conditionals that execute multiple code paths in a single line, such as ternary statements. You may have a part of that conditional that’s never run or tested, but you wouldn’t know that if you’re relying on Lines Coverage alone.&lt;/p&gt;&lt;h5 id=&#34;benefits-2&#34;&gt;Benefits &lt;a href=&#34;#benefits-2&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;It provides a different frame of reference than Lines Coverage, which ends up being either coarser or more granular than Lines coverage in different situations.&lt;/li&gt;&lt;li&gt;For conditionals that lay out multiple code paths on a single line, this provides feedback on their individual execution where Lines Coverage only considers whether any part of the line was run.&lt;/li&gt;&lt;li&gt;When interested in conditionals, and only conditionals, it has less noise than Lines Coverage.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;instructive-example-2&#34;&gt;Instructive Example &lt;a href=&#34;#instructive-example-2&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The band is rehearsing a new cover song to add to the setlist; however, something isn’t right. They can’t pinpoint what it is, so they haven’t played the song live for an audience yet, but they keep working at it. Finally, taking a very analytical approach to one of their rehearsals, they find it - one of the vocal effects they use isn&amp;rsquo;t being applied correctly.&lt;/p&gt;&lt;p&gt;This effect is set in a ternary statement in the method that runs the music for each of the choruses for this song. Using Lines Coverage alone, it appears in tests (their rehearsal) that they are getting to that part of the code, or song; however, when tracking Branches Coverage they realize they’re never setting the effect to be the value it should through all the choruses.&lt;/p&gt;&lt;h4 id=&#34;methods&#34;&gt;Methods &lt;a href=&#34;#methods&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Methods Coverage brings the granularity of Lines Coverage up to a coarser grain. Rather than tracking individual lines, it’s concerned with whether a particular method is executed. It can be a 10 line method where the first line is the only line ever executed. Methods Coverage will still consider that as executed the same as a 20 line method where each line is executed.&lt;/p&gt;&lt;h5 id=&#34;benefits-3&#34;&gt;Benefits &lt;a href=&#34;#benefits-3&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;This has a targeted focus to be able to answer a more specific question - is this method executed? - with easier to process feedback.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;instructive-example-3&#34;&gt;Instructive Example &lt;a href=&#34;#instructive-example-3&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The lead singer’s main spotlight is cutting out at times during the set, which makes for a less than optimal experience for everyone involved. The engineer’s belief is that many of the venues don’t have the power capacity to handle the needs of the show, and unfortunately, the most obvious spotlight is what’s losing power.&lt;/p&gt;&lt;p&gt;This tour features an extensive stage production with many screens, lighting rigs, and smoke machines. Unfortunately, as the setlist has progressed throughout the tour, the crew isn’t certain how much of it is being used on a night-to-night basis. However, each of those mechanisms are plugged in for every show, drawing power that could be going towards the primary spotlight.&lt;/p&gt;&lt;p&gt;Each lighting rig is triggered by calling a different method in our code that powers our concert. Given that the band has found their groove with a relatively stable setlist from night to night, the crew will instrument the code for an entire show to see which methods are triggered and which aren’t. Those that aren’t can be deleted - which means they can be unplugged, meaning more power for the spotlight.&lt;/p&gt;&lt;h2 id=&#34;pitch&#34;&gt;Pitch &lt;a href=&#34;#pitch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Code coverage is a topic that often seems to be applied in a narrow sense. In discussions I’m involved in, code coverage tends to mean whether there are tests that execute a given line of application code. This is used as a proxy for code quality, or as a heuristic that can be used to measure the health of a project.&lt;/p&gt;&lt;p&gt;However, I see less discussion on using coverage in production for instrumentation, or using these different modes in any context. Moreover, speaking to my own experience, I didn’t even know there was a Coverage module for a long time as a rubyist, never mind knowing that it provides these multiple modes of tracking and reporting coverage.&lt;/p&gt;&lt;p&gt;My goal with this talk is to expand upon potential use cases of coverage that go beyond measuring how many lines of application code a test suite runs while introducing and explaining the different mechanisms ruby provides to track code coverage.&lt;/p&gt;&lt;h2 id=&#34;bio&#34;&gt;Bio &lt;a href=&#34;#bio&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kevin lives near Boston, where he is a Software Developer at The Gnar Company. He’s doing the best he can to cope with a year of concerts that could have been.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Fake It While You Make It - The Proposal</title>
       <link>https://kevinjmurphy.com/posts/fake-it-while-you-make-it-proposal/</link>
       <pubDate>Wed, 03 Aug 2022 21:25:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/fake-it-while-you-make-it-proposal/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We all write code to interface with external systems, like a web service or a message queue. Can you confidently write tests without requiring the system as a dependency? How can you shield users of your code from the inner workings of the interface? Explore one attempt to answer these questions.&lt;/p&gt;&lt;p&gt;There&amp;rsquo;s no shortage of tools at your disposal to solve these problems. This talk will introduce some available options, provide guidance on when one approach may be more appropriate than another, and discuss how to use these tools together to ease the testing process.&lt;/p&gt;&lt;h2 id=&#34;details&#34;&gt;Details &lt;a href=&#34;#details&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This talk will follow one effort to test interactions with an external dependency that evolved over time, as the nature of the interaction became clearer, and as the complexity of the work around the dependency increased.&lt;/p&gt;&lt;h3 id=&#34;testing-strategies&#34;&gt;Testing Strategies &lt;a href=&#34;#testing-strategies&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In the process of testing against the dependency, a variety of tools were used, each of which will be presented with a sample implementation, after which I will discuss their benefits and challenges.&lt;/p&gt;&lt;h4 id=&#34;direct-interaction-with-dependency&#34;&gt;Direct Interaction with Dependency &lt;a href=&#34;#direct-interaction-with-dependency&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;benefits&#34;&gt;Benefits &lt;a href=&#34;#benefits&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Confidence that your code will work the same in your test as in production.&lt;/li&gt;&lt;li&gt;Lowest barrier to entry.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;challenges&#34;&gt;Challenges &lt;a href=&#34;#challenges&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;May negatively affect the performance of the test suite.&lt;/li&gt;&lt;li&gt;Can be non-deterministic, depending on the nature of the dependency.&lt;/li&gt;&lt;li&gt;Subject to any constraints the dependency may impose upon your system, such as an HTTP API that rate limits you after a certain number of requests.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;when-to-use&#34;&gt;When To Use &lt;a href=&#34;#when-to-use&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;When unfamiliar with the dependency.&lt;/li&gt;&lt;li&gt;When exploring new features or functionality.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;stubbing-responses&#34;&gt;Stubbing Responses &lt;a href=&#34;#stubbing-responses&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;benefits-1&#34;&gt;Benefits &lt;a href=&#34;#benefits-1&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Promotes deterministic behavior in the response of the dependency for your test.&lt;/li&gt;&lt;li&gt;Allows for the test to succeed without the need for the dependency at all, limiting the performance overhead of the tests on the test suite.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;challenges-1&#34;&gt;Challenges &lt;a href=&#34;#challenges-1&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Must know the response structure.&lt;/li&gt;&lt;li&gt;Must ensure that the structure and data returned continues to mirror the reality of what the actual dependency provides.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;when-to-use-1&#34;&gt;When To Use &lt;a href=&#34;#when-to-use-1&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;When you have a stable interface.&lt;/li&gt;&lt;li&gt;When the response surface itself is small, to mitigate verbosity in your test itself.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;building-a-fake&#34;&gt;Building a Fake &lt;a href=&#34;#building-a-fake&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;benefits-2&#34;&gt;Benefits &lt;a href=&#34;#benefits-2&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Provides a full-stack, complete test interaction.&lt;/li&gt;&lt;li&gt;Limited noise in the test itself, in terms of setup verbosity.&lt;/li&gt;&lt;li&gt;Allows you to build in as much or as little complexity as you need to serve the needs of your testing scenarios in an isolated, reusable location.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;challenges-2&#34;&gt;Challenges &lt;a href=&#34;#challenges-2&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Must ensure that the structure and data returned continues to mirror the reality of what the actual dependency provides.&lt;/li&gt;&lt;li&gt;Must consider how to test and verify that the implementation of your fake is performing as expected.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;when-to-use-2&#34;&gt;When To Use &lt;a href=&#34;#when-to-use-2&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;When you need confidence in the communication mechanisms or protocols themselves.&lt;/li&gt;&lt;li&gt;When your test requires a multi-step interaction with the dependency, particularly where the dependency may need to store state, such as testing an OAuth handshake.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;fixture-data&#34;&gt;Fixture Data &lt;a href=&#34;#fixture-data&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;benefits-3&#34;&gt;Benefits &lt;a href=&#34;#benefits-3&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Provides a truthful representation of an interaction at a moment in time.&lt;/li&gt;&lt;li&gt;Provides a complete picture of a full response.&lt;/li&gt;&lt;li&gt;Requires the dependency only long enough to capture the fixture data.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;challenges-3&#34;&gt;Challenges &lt;a href=&#34;#challenges-3&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Can act as a mystery guest, where it’s not clear where the data came from or why the test is responding in that way, given that the data is in a different location and not obvious within the test itself.&lt;/li&gt;&lt;li&gt;Given that the fixture is a representation at a particular moment in time, it’s not guaranteed that the dependency continues to react with the same request in the same way.&lt;/li&gt;&lt;li&gt;Requires periodic access to the system to continually refresh these snapshots.&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;when-to-use-3&#34;&gt;When To Use &lt;a href=&#34;#when-to-use-3&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;When you need a complete response.&lt;/li&gt;&lt;li&gt;When your dependency is accessible for the generation and refreshing of this data.&lt;/li&gt;&lt;li&gt;When you must limit your impact on the dependency itself, such as not continually creating a new instance of a resource via a POST action to an HTTP API on an actual system every time the test is run.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;architecture-learnings-from-this-investigation&#34;&gt;Architecture Learnings from this Investigation &lt;a href=&#34;#architecture-learnings-from-this-investigation&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Isolating the interaction with the dependency will be a main takeaway from this exploration. The focus will be the benefits that this provides from a testing perspective, as well as general extensibility towards the overall architecture of your application.&lt;/p&gt;&lt;p&gt;Finally, once the full public API of the system is defined and it&amp;rsquo;s ready to be integrated as part of a larger system or shared with the world as a gem, we will discuss creating a &amp;ldquo;test mode&amp;rdquo; for your component. A great example of this is Sidekiq&amp;rsquo;s &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Testing&#34;&gt;testing mode&lt;/a&gt;. This will cover tips for how to build this functionality, how to expose it to consumers of your component, and the challenges associated with creating and maintaining this feature.&lt;/p&gt;&lt;h2 id=&#34;pitch&#34;&gt;Pitch &lt;a href=&#34;#pitch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Interfacing with external systems has always been considered a challenging problem. It&amp;rsquo;s also becoming a more common task, as we continue to interconnect with different systems. Microservice architectures make this even more pronounced, as we orchestrate many small, separate systems together to serve as the backbone of our overall technology solution.&lt;/p&gt;&lt;p&gt;Much of my career has been spent identifying, implementing, and maintaining interfaces. My goal is always to make it easy for other developers to interact with the system, and provide them with the information they need to complete their task without needing to be overwhelmed with technical details. I also developed, and continue to maintain, a gem that provides functionality to test interactions with another gem without the need for mocking or stubbing. I&amp;rsquo;ve used that experience to inform my choices to ease testing of other interfaces I continue to create. The goal of this talk will be to share how a variety of testing practices can be used in concert when working with external dependencies.&lt;/p&gt;&lt;h2 id=&#34;bio&#34;&gt;Bio &lt;a href=&#34;#bio&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kevin spent more time investigating, refactoring, and rewriting tests for the project that prompted this talk than he did writing the actual implementation.&lt;/p&gt;&lt;p&gt;Kevin lives near Boston, where he is a Software Developer at The Gnar Company.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Don’t Hang Me Out To DRY - The Proposal</title>
       <link>https://kevinjmurphy.com/posts/dont-hang-me-out-to-dry-proposal/</link>
       <pubDate>Wed, 03 Aug 2022 21:24:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/dont-hang-me-out-to-dry-proposal/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Close your eyes and imagine the perfect codebase to work on. I bet you’ll say it has complete test coverage. It’s fully-optimized, both in terms of performance and architectural design. And, of course, it contains only DRY code. Surely we can all agree that this is an aspirational situation. But&amp;hellip;do we &lt;strong&gt;really&lt;/strong&gt; want that?&lt;/p&gt;&lt;p&gt;Don’t get me wrong; these qualities are all beneficial. However, if we also think we should value everything in moderation, when should we push back on these ideals? What problems can they introduce? Let’s talk about the exceptions to some of the “rules” we all hold dear.&lt;/p&gt;&lt;h2 id=&#34;details&#34;&gt;Details &lt;a href=&#34;#details&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This talk will not argue against any of the principles of adequate test coverage, optimized code, or DRY code in the broad sense. The intention is not to dissuade the audience from using any of these rules, principles, or guidelines. They’re all incredibly valuable, and we, as craftspeople, are better off for having them overall. This talk will discuss the ways these important ideals can fall short in specific ways and what alternatives are available in those situations.&lt;/p&gt;&lt;p&gt;The talk will initially introduce each of the principles, talking about why it’s important and what benefits it provides. Code examples will be used to illustrate how we can write code or architect software solutions that adhere to these rules. Those examples will then be used to demonstrate some shortcomings of the principle, or situations where following the standard could have negative consequences. Along with identifying some of the downsides, possible solutions and alternatives will be suggested.&lt;/p&gt;&lt;h2 id=&#34;outline&#34;&gt;Outline &lt;a href=&#34;#outline&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;full-test-coverage&#34;&gt;Full Test Coverage &lt;a href=&#34;#full-test-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;shortcomings&#34;&gt;Shortcomings &lt;a href=&#34;#shortcomings&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;100% test coverage does not mean all code paths are fully exercised, just that all lines are hit at least once in the execution of the test suite.&lt;/li&gt;&lt;li&gt;Testing every line of code can have costs that are felt initially in the time to conceive of the tests and the test strategy. However, the larger costs are felt over time if it leads to a long test suite run time, flakey or inconsistent tests, and a large suite that needs to be continually maintained as both the technologies and requirements of the application change.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;alternatives&#34;&gt;Alternatives &lt;a href=&#34;#alternatives&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Consider the value and impact of a test before committing it to the mainline branch of your repository.&lt;/li&gt;&lt;li&gt;Avoid treating code coverage solely as a vanity metric to be increased and maintained at all costs. Instead, consider trends over a long period or more specific information than the overall coverage number, such as what units are less thoroughly tested and why.&lt;/li&gt;&lt;li&gt;Listen to your tests when adding features to help guide the design and implementation. Listen to your overall test suite to aid in developer happiness and ergonomics. Is that flakey test pulling its weight? Do your longest-running tests add value commensurate with the time they tack on to every CI run?&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;dry-code&#34;&gt;DRY Code &lt;a href=&#34;#dry-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;shortcomings-1&#34;&gt;Shortcomings &lt;a href=&#34;#shortcomings-1&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;DRY code may introduce “mystery guests” in the form of variables that you don’t know where they came from, or state that is difficult to understand how it occurred because it’s decoupled from its caller in a way that obscures the work that’s done.&lt;/li&gt;&lt;li&gt;Not repeating yourself can lead to premature optimizations or abstractions that end up saddling the codebase with a difficult-to-change architecture when it’s discovered that use cases aren’t as similar as initially thought.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;alternatives-1&#34;&gt;Alternatives &lt;a href=&#34;#alternatives-1&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;damp-code-descriptive-and-meaningful-phrases&#34;&gt;DAMP code (Descriptive and Meaningful Phrases) &lt;a href=&#34;#damp-code-descriptive-and-meaningful-phrases&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This is particularly helpful in tests. If common setup about the state of the world has been extracted into a central location, it may be more difficult to tell the story of the test and understand why the current state is important or relevant to the situation being tested. Repeating this setup can draw attention to what’s relevant in the test and why.&lt;/p&gt;&lt;p&gt;If it’s critical to the value of your test that a struct has an attribute called “foo” which returns “true”, but that struct is defined in a helper method at the very top of the test file, it can be difficult to parse why the test is reacting the way it is. Repeating the definition of that struct closer to the exercise section of your test can improve clarity and understanding.&lt;/p&gt;&lt;h5 id=&#34;wet-code-write-everything-twice&#34;&gt;WET code (Write Everything Twice) &lt;a href=&#34;#wet-code-write-everything-twice&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Explicitly duplicating functionality or sections of code for additional use, even when you feel confident it’s the same, can have many benefits. If you’re explicitly rewriting it, rather than a copy and paste operation, you can re-explore the implementation and may discover a different solution to the same problem. Even without rewriting it, having the same code multiple places can help you move faster initially without needing to consider the various call sites that a DRY solution may require. It can validate your assumptions regarding just how similar these use cases really are. This could prevent an incorrect abstraction from being chosen, and the two data points can help better inform the design decisions once that third occurrence of the functionality comes up.&lt;/p&gt;&lt;h3 id=&#34;optimized-code&#34;&gt;Optimized Code &lt;a href=&#34;#optimized-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;shortcomings-2&#34;&gt;Shortcomings &lt;a href=&#34;#shortcomings-2&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Code that is preemptively performance-tuned may or may not be necessary or accurate. Without the data and benchmarking, under load, to illustrate the performance impact, any improvements made in service of performance are done so based on conjecture. This could lead to unnecessary time in developing the believed performance benefit or may even introduce subtle bugs.&lt;/li&gt;&lt;li&gt;Calling back to choosing the wrong abstraction when focusing on delivering DRY code, working to present the perfect design pattern or architecture to serve the problem at hand can handcuff future feature development while also having an up-front cost to initially introduce the pattern for the first use case.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;alternatives-2&#34;&gt;Alternatives &lt;a href=&#34;#alternatives-2&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Ensure the &lt;a href=&#34;http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast&#34;&gt;initial focus&lt;/a&gt; is on delivering code that solves the problem. Then layer on performance improvements aided by benchmarks and observations from APM or another instrumentation tooling, should it prove to be called for.&lt;/li&gt;&lt;li&gt;Certainly reach for design patterns and well-known architectural principles when the opportunity presents itself. But, consider how one might back out of such an introduction should it turn out that the choice was premature - or hold off on introducing it entirely until it’s more clear or there’s sufficient churn in that area of the codebase to warrant the attention.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;pitch&#34;&gt;Pitch &lt;a href=&#34;#pitch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Quality code is highly valued, but difficult to measure. And though we, as a community, have many ideals, they don’t all fit in every scenario. You may be hard-pressed to find a Ruby developer who might take the position that testing is bad, or DRY code is problematic. Most times, they’d be right not to take that stance. However, writing our code in service of these ideals without considering their implications has costs that may not be explored or understood at the time.&lt;/p&gt;&lt;p&gt;I’ve had the fortune (or misfortune) of seeing the unintended consequences of adherence to some of these rules on a team, codebase, and a project. Many of these principles can be easy to spot and follow, leading to comments that are easy to make in a pull request, changes that are easy to make, and refactorings that feel straightforward and successful enough in that time. The downsides to these changes can be more difficult to identify.&lt;/p&gt;&lt;p&gt;I will share examples of where, particularly in the long-term, following these rules can have negative effects in specific situations, and propose suggestions to address those effects or prevent them from occurring in the first place.&lt;/p&gt;&lt;h2 id=&#34;bio&#34;&gt;Bio &lt;a href=&#34;#bio&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kevin lives near Boston, where he is a Software Developer at The Gnar Company. Though he believes he holds strong opinions, his most frequent response to a question starts with, “it depends.”&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>I know I can, but should I? Evaluating Alternatives - The Proposal</title>
       <link>https://kevinjmurphy.com/posts/evaluating-alternatives-proposal/</link>
       <pubDate>Wed, 03 Aug 2022 21:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/evaluating-alternatives-proposal/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You &lt;strong&gt;can&lt;/strong&gt; use a hammer to drive a screw into wood, but I’d recommend a screwdriver. Why? And when is a hammer the better option? This talk will propose a framework to use when comparing alternative technical choices. I won’t decide for you, but will leave you with a structure to apply in your decision-making process.&lt;/p&gt;&lt;p&gt;The ruby toolbox is vast. While Rails provides a default experience, it leaves plenty of room for alternatives. In learning how to do something, you may uncover different ways to accomplish the same goal. Determine which tool fits best in your situation with these lessons.&lt;/p&gt;&lt;h2 id=&#34;details&#34;&gt;Details &lt;a href=&#34;#details&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Rails Doctrine frequently speaks to the breadth of options available at your disposal within the framework. There are many &lt;a href=&#34;https://rubyonrails.org/doctrine/#provide-sharp-knives&#34;&gt;sharp knives&lt;/a&gt; in ruby that, when used judiciously, can facilitate a great result for your product, your team, and your code. However, knowing in which situations to reach for one tool, technology, or architecture when the framework supports &lt;a href=&#34;https://rubyonrails.org/doctrine/#no-one-paradigm&#34;&gt;many paradigms&lt;/a&gt; is difficult. Having the option to &lt;a href=&#34;https://rubyonrails.org/doctrine/#omakase&#34;&gt;make substitutions&lt;/a&gt; is liberating, but imposing.&lt;/p&gt;&lt;p&gt;Some groups or situations may demand rigorous up-front &lt;a href=&#34;https://en.wikipedia.org/wiki/Analysis_of_Alternatives&#34;&gt;evaluations&lt;/a&gt; prior to determining a solution. While those exercises can inform our choices, a lighter-weight approach is more appropriate in most decisions we make on a daily basis as developers. When presented with multiple options that will solve a problem, the following criteria are helpful to consider:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;What impact does this have on the code, the product, and the team?&lt;/li&gt;&lt;li&gt;Has the team encountered this before? What was the result?&lt;/li&gt;&lt;li&gt;What cost and risk will be incurred by introducing this solution?&lt;/li&gt;&lt;li&gt;How will this be maintained over time?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Not all of these questions may be applicable in all situations, and the relative weight of one over the others will also vary, depending on the context of the team or the problem. These questions will be exercised in this talk to reinforce their value and applicability in making practical decisions about daily programming choices such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Should I use an ActiveRecord callback, or wrap this logic in another method?&lt;/li&gt;&lt;li&gt;How, if at all, should this change be tested?&lt;/li&gt;&lt;li&gt;Can I write this myself, or use an external library?&lt;/li&gt;&lt;li&gt;Do I expose default timestamp values to users or add a new attribute?&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;outline&#34;&gt;Outline &lt;a href=&#34;#outline&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Introduction&lt;/li&gt;&lt;li&gt;“Traditional” Project Management Approach&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Methodology&lt;ul&gt;&lt;li&gt;Present a detailed, analytical approach before work is done.&lt;/li&gt;&lt;li&gt;Identify all criteria and factors applicable to the project (cost, effectiveness, risk, etc.), with relative weights of importance.&lt;/li&gt;&lt;li&gt;Score all identified alternatives on criteria, multiply by weight, compute final score.&lt;/li&gt;&lt;li&gt;Implement highest-scoring option.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Limitations&lt;ul&gt;&lt;li&gt;Significant upfront investment in time.&lt;/li&gt;&lt;li&gt;Assumes perfect knowledge prior to execution.&lt;/li&gt;&lt;li&gt;Inflexible to new information or constraints as the project evolves.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Merits&lt;ul&gt;&lt;li&gt;Requires thoughtful and thorough consideration of all options.&lt;/li&gt;&lt;li&gt;Provides cover and justification for decisions made.&lt;/li&gt;&lt;li&gt;Rallies all stakeholders around a consensus determination.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;Evolving Traditional Approach for Daily/Common Decisions&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;What impact will this have on the project?&lt;ul&gt;&lt;li&gt;Research, prototype, or spike out how well this resolves the issue at hand.&lt;/li&gt;&lt;li&gt;Identify how your supporting team may react to the change. Consider their past experience, strongly-held beliefs, and ability to build on or maintain this.&lt;/li&gt;&lt;li&gt;Contemplate what, if any, standard this sets for future similar problems. Communicate, if necessary, not only for the current team but future contributors, the lens through which this should be evaluated for upcoming features.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Example&lt;/em&gt;: Should I use an ActiveRecord callback, or wrap this logic in another method?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Has the team encountered this before?&lt;ul&gt;&lt;li&gt;Determine what institutional knowledge can be brought to bear to short-circuit the decision-making process.&lt;/li&gt;&lt;li&gt;Evaluate the relevance and applicability of any past decisions or solutions to similar problems.&lt;/li&gt;&lt;li&gt;Identify what, if any, conventions or standards should be adhered to within this codebase or organization.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Example&lt;/em&gt;: How, if at all, should this change be tested?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;What cost and risk will be incurred by introducing this solution?&lt;ul&gt;&lt;li&gt;Recognize that “correctness” is not the only consideration in delivering features.&lt;/li&gt;&lt;li&gt;Take into account contextual pressures. Keep in mind what amount of time or money is available to address this problem.&lt;/li&gt;&lt;li&gt;Expand the evaluation of cost and risk beyond the initial implementation and through the entire lifecycle of the product.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Example&lt;/em&gt;: Can I write this myself, or use an external library?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;How will this be maintained over time?&lt;ul&gt;&lt;li&gt;Speculate on how extensible or malleable this implementation is to future requirements or features.&lt;/li&gt;&lt;li&gt;Identify who will need to be involved in the long-term viability of this solution and solicit their input.&lt;/li&gt;&lt;li&gt;Determine your own appetite to continue the use of this work as a proxy, if nothing else is available.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Example&lt;/em&gt;: Do I expose default timestamp values to users or add a new attribute?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;Conclusion&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;pitch&#34;&gt;Pitch &lt;a href=&#34;#pitch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For many, the initial excitement of learning to program is in creating something. Having a computer perform a task can feel like magic. That rush can get you far, resulting in successful projects, companies, and careers.&lt;/p&gt;&lt;p&gt;At some point, understanding different ways to solve the same problem becomes compelling, either due to intellectual curiosity, organizational need, or other circumstances. However, ingesting all of the alternatives that exist can be exhausting, leading to analysis paralysis. Having a structure in place to help implement these decisions is crucial with the current number of options available to us as developers.&lt;/p&gt;&lt;p&gt;As a consultant, I’m exposed to a number of organizations looking to solve difficult problems. Each of them has different constraints that influence one choice over another. Much of my job involves understanding the pressures facing the team and proposing solutions that will not only solve the problem, but do so in a way that best meets the needs and addresses the goals of the group.&lt;/p&gt;&lt;h2 id=&#34;bio&#34;&gt;Bio &lt;a href=&#34;#bio&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kevin lives near Boston, where he is a Software Developer at The Gnar Company. As a consultant, evaluating technical alternatives and proposing solutions is an important part of his job.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Request Spec Realistic Error Response</title>
       <link>https://kevinjmurphy.com/posts/request-spec-realistic-error-response/</link>
       <pubDate>Sun, 17 Jul 2022 07:33:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/request-spec-realistic-error-response/</guid>
       <description>&lt;h2 id=&#34;happy-request-specs&#34;&gt;Happy Request Specs &lt;a href=&#34;#happy-request-specs&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Let’s build some happy little trees.&amp;ndash; &lt;a href=&#34;https://parade.com/1215163/kelseypelzer/bob-ross-quotes/&#34;&gt;Bob Ross&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;When using RSpec, you can create a &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/request-specs/request-spec&#34;&gt;request spec&lt;/a&gt; to &amp;ldquo;drive behavior through the full stack&amp;rdquo;.&lt;/p&gt;&lt;p&gt;I use request specs as my highest-level acceptance test for API endpoints. We&amp;rsquo;re building a system that allows users to place predefined elements on a canvas of sorts. Let&amp;rsquo;s build a test for placing a little tree on the canvas.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;creates a happy little tree&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  post little_trees_path,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;params&lt;/span&gt;: { &lt;span style=&#34;color:#e6db74&#34;&gt;tree&lt;/span&gt;: { &lt;span style=&#34;color:#e6db74&#34;&gt;disposition&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;happy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;y&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; } }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(response)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_http_status(&lt;span style=&#34;color:#e6db74&#34;&gt;:created&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will also verify that we can find the tree.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shows an existing tree&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FactoryBot&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;:tree&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:little&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get little_trees_path(tree)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(response)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_http_status(&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;testing-accidents&#34;&gt;Testing Accidents &lt;a href=&#34;#testing-accidents&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;We don’t make mistakes, just happy little accidents.&amp;ndash; &lt;a href=&#34;https://parade.com/1215163/kelseypelzer/bob-ross-quotes/&#34;&gt;Bob Ross&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We also want to ensure the system responds as expected when users make happy accidents. Asking this endpoint for a tree that&amp;rsquo;s not little is not found.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;does not find a large tree&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FactoryBot&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;:tree&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:large&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get little_trees_path(tree)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(response)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_http_status(&lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This test does not pass! Not because we&amp;rsquo;re TDD-ing this and the implementation doesn&amp;rsquo;t exist. The endpoint &lt;em&gt;does&lt;/em&gt; respond as expected if you hit it from &lt;a href=&#34;https://curl.se/&#34;&gt;curl&lt;/a&gt; or another way.&lt;/p&gt;&lt;p&gt;Our test raises an &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception. We know that Rails has &lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/#research&#34;&gt;special handling&lt;/a&gt; to return a 404 status code in this case. However, the request spec still raises the exception.&lt;/p&gt;&lt;h2 id=&#34;prior-art&#34;&gt;Prior Art &lt;a href=&#34;#prior-art&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Anytime you learn, you gain.&amp;ndash; &lt;a href=&#34;https://parade.com/1215163/kelseypelzer/bob-ross-quotes/&#34;&gt;Bob Ross&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I didn&amp;rsquo;t figure out how to resolve this on my own. I only came across a solution by &lt;a href=&#34;https://kevinjmurphy.com/posts/searching-for-a-reason/&#34;&gt;searching&lt;/a&gt; for others&amp;rsquo; approaches. I found &lt;a href=&#34;https://github.com/rspec/rspec-rails/issues/2024&#34;&gt;this issue&lt;/a&gt; in &lt;code&gt;rspec-rails&lt;/code&gt;&amp;rsquo;s issue tracker. In there &lt;a href=&#34;https://github.com/mikegee&#34;&gt;Michael Gee&lt;/a&gt; shares a workaround. The earliest reference to this approach that &lt;strong&gt;I&lt;/strong&gt; can find is from &lt;a href=&#34;https://eliotsykes.com/2017/03/08/realistic-error-responses/&#34;&gt;Eliot Sykes&lt;/a&gt; in 2017. If you&amp;rsquo;re aware of an earlier reference to this, let me know!&lt;/p&gt;&lt;h2 id=&#34;painting-a-realistic-picture&#34;&gt;Painting A Realistic Picture &lt;a href=&#34;#painting-a-realistic-picture&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;All you need to paint is a few tools, a little instruction, and a vision in your mind.&amp;ndash; &lt;a href=&#34;https://parade.com/1215163/kelseypelzer/bob-ross-quotes/&#34;&gt;Bob Ross&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To get the production behavior in our test, we need to turn off Rails&amp;rsquo; &lt;a href=&#34;https://www.honeybadger.io/blog/how-rails-fancy-exception-page-works/&#34;&gt;fancy exception page&lt;/a&gt;. Michael and Eliot share this method to do so:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; ErrorResponses&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;respond_without_detailed_exceptions&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env_config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;env_config&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    original_show_exceptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env_config&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_dispatch.show_exceptions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    original_show_detailed_exceptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env_config&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_dispatch.show_detailed_exceptions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env_config&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_dispatch.show_exceptions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:all&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env_config&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_dispatch.show_detailed_exceptions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;ensure&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env_config&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_dispatch.show_exceptions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; original_show_exceptions&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env_config&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_dispatch.show_detailed_exceptions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; original_show_detailed_exceptions&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We &lt;a href=&#34;https://kevinjmurphy.com/posts/temporary-state-in-tests/&#34;&gt;pass a block&lt;/a&gt; to this method in our test. We store the initial values of the environment configuration, then set &lt;code&gt;show_exceptions&lt;/code&gt; and &lt;code&gt;show_details_exceptions&lt;/code&gt; to match production. After our block executes, we return them to their original value.&lt;/p&gt;&lt;p&gt;Note that prior to Rails 7.1, you&amp;rsquo;ll want to set the value of &lt;code&gt;show_exceptions&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. From 7.1 on, the configuration accepts a &lt;a href=&#34;https://guides.rubyonrails.org/configuring.html#config-action-dispatch-show-exceptions&#34;&gt;set of symbols&lt;/a&gt; and using true or false is deprecated.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s update our test to use this method.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;does not find a large tree&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  respond_without_detailed_exceptions &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FactoryBot&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;:tree&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:large&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get little_trees_path(tree)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(response)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_http_status(&lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our test passes! We&amp;rsquo;re returning a 404 and not raising an exception.&lt;/p&gt;&lt;h2 id=&#34;using-your-tools&#34;&gt;Using Your Tools &lt;a href=&#34;#using-your-tools&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;You can do anything here — the only prerequisite is that it makes you happy.&amp;ndash; &lt;a href=&#34;https://www.pinotspalette.com/logansquare/blog/pinot-state-of-mind/bob-ross-quotes&#34;&gt;Bob Ross&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If we&amp;rsquo;re using RSpec, we have another option, which again comes from &lt;a href=&#34;https://eliotsykes.com/2017/03/08/realistic-error-responses/&#34;&gt;Eliot&lt;/a&gt;. We can use RSpec&amp;rsquo;s &lt;code&gt;around&lt;/code&gt; &lt;a href=&#34;https://relishapp.com/rspec/rspec-core/v/2-0/docs/hooks/around-hooks&#34;&gt;hook&lt;/a&gt; to pass the entire test as the block to &lt;code&gt;respond_without_detailed_exceptions&lt;/code&gt; by applying metadata.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; ErrorResponses&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configure &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include self, &lt;span style=&#34;color:#e6db74&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:request&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;around(&lt;span style=&#34;color:#e6db74&#34;&gt;realistic_error_responses&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;example&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      respond_without_detailed_exceptions(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;example)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That allows us to rewrite our test as follows:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;does not find a large tree&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:realistic_error_responses&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FactoryBot&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;:tree&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:large&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get little_trees_path(tree)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(response)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to have_http_status(&lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;artistic-inspiration&#34;&gt;Artistic Inspiration &lt;a href=&#34;#artistic-inspiration&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Don’t forget to tell these special people in your life just how special they are to you.&amp;ndash; &lt;a href=&#34;https://parade.com/1215163/kelseypelzer/bob-ross-quotes/&#34;&gt;Bob Ross&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I cannot stress enough that this post wouldn&amp;rsquo;t exist without the contributions of &lt;a href=&#34;https://github.com/mikegee&#34;&gt;Michael Gee&lt;/a&gt; and &lt;a href=&#34;https://eliotsykes.com&#34;&gt;Eliot Sykes&lt;/a&gt;. I&amp;rsquo;m thankful to them for sharing this solution. I&amp;rsquo;ve used this approach in various codebases in the last few years. I&amp;rsquo;ve shared this approach with many people (and now with you). This post serves to draw attention to their work.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Designing A Dependency&#39;s Domain</title>
       <link>https://kevinjmurphy.com/posts/designing-dependency-domain/</link>
       <pubDate>Sun, 19 Jun 2022 20:00:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/designing-dependency-domain/</guid>
       <description>&lt;h2 id=&#34;sweathr&#34;&gt;Sweathr &lt;a href=&#34;#sweathr&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our &lt;a href=&#34;https://kevinjmurphy.com/posts/testing-dependencies/&#34;&gt;last post&lt;/a&gt; I introduced you to Sweathr. We&amp;rsquo;ve revolutionized the sweater weather prediction landscape forever. We evaluated many ways to test the core business logic, which called out to a HTTP weather API.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Location&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sweater_weather?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;URI&lt;/span&gt;(conditions_url_for_zip_code)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Net&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(uri)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(result)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    feels_like &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dig(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_observation&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;feelslike_f&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    feels_like&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;between?(&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Testing this code involved a fair amount of work. Any of the options had significant trade-offs we needed to weigh. Part of the reason testing this method was so much work is because it involves a dependency, the weather API. Part of the reason is, even though it&amp;rsquo;s a small method, it&amp;rsquo;s doing a lot of things.&lt;/p&gt;&lt;p&gt;In this post, we&amp;rsquo;re going to decompose this method into three different units. Along the way, we&amp;rsquo;ll talk about &lt;em&gt;why&lt;/em&gt; we&amp;rsquo;re doing this.&lt;/p&gt;&lt;h3 id=&#34;api-client&#34;&gt;API Client &lt;a href=&#34;#api-client&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s start at the top. We&amp;rsquo;re going to have a separate class that will handle HTTP communication with the weather API. We know we&amp;rsquo;re going to have other code related to this API, so we&amp;rsquo;ll put it in its own module.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Sweathr&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Weather&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Api&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_conditions&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;zip&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;URI&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;auth_uri&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/conditions/q/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;zip&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.json&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#66d9ef&#34;&gt;Net&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(uri))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;auth_uri&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://real-weather-api.gov&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This class is solely focused on communicating with the dependency. There&amp;rsquo;s subtle complexity here though. This class needs to determine how it&amp;rsquo;s going to return the response. Right now, this is converting the response body JSON and returning the hash. This means that it&amp;rsquo;s choosing to swallow the status code, headers, or other data the API is telling us. That&amp;rsquo;s a choice, and it&amp;rsquo;s isolated in this class. If we need access to other information, we know where we need to go to get it. Documenting, or iterating on, these types of decisions has a well-defined home.&lt;/p&gt;&lt;h4 id=&#34;api-client-testing&#34;&gt;API Client Testing &lt;a href=&#34;#api-client-testing&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To test this, we can use any of the methods from our &lt;a href=&#34;https://kevinjmurphy.com/posts/testing-dependencies/&#34;&gt;last post&lt;/a&gt;. However, I would advocate for one that, at least at some point, issues a real request to the API. That is the focus of this class, and as such, we want to make sure it&amp;rsquo;s performing as expected. Using a fake or a stub here wouldn&amp;rsquo;t give us a lot of confidence in testing our implementation.&lt;/p&gt;&lt;p&gt;Making a direct API call or using a fixture that&amp;rsquo;s updated has an issue: determinism. Remember, this is a weather API - and the weather changes. We can&amp;rsquo;t assert that it&amp;rsquo;s sunny and 70 degrees and have it pass all the time.&lt;/p&gt;&lt;p&gt;Luckily, we don&amp;rsquo;t have to. Instead, what we can focus on is the &lt;em&gt;structure&lt;/em&gt; of the data, rather than the &lt;em&gt;contents&lt;/em&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;retrieves the current conditions&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_conditions(&lt;span style=&#34;color:#e6db74&#34;&gt;zip&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;02108&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(result)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_observation&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; a_hash_including(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;feelslike_f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; a_kind_of(String)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It feels weird asserting we get a String in a language like Ruby sometimes, I&amp;rsquo;ll grant you that. But, it doesn&amp;rsquo;t matter to us what the temperature is. We want to validate that we can get back a temperature. We can do that by making sure it&amp;rsquo;s nested inside the current observation with the key we expect.&lt;/p&gt;&lt;p&gt;This test is flexible where it can be - what the temperature is. It&amp;rsquo;s also rigid where it has to be - we get a response and the data is in a format we expect.&lt;/p&gt;&lt;p&gt;This can serve as an early-warning system for upcoming components in our design. If this test fails, we&amp;rsquo;ll need to change other areas of our domain.&lt;/p&gt;&lt;p&gt;Running this test as written &lt;a href=&#34;https://kevinjmurphy.com/posts/testing-dependencies/#direct-interaction&#34;&gt;directly interacts&lt;/a&gt; with the dependency. This test will fail without an internet connection, or when the API is down. We could instead use a &lt;a href=&#34;https://kevinjmurphy.com/posts/testing-dependencies/#fixture&#34;&gt;fixture&lt;/a&gt; that&amp;rsquo;s regularly updated to mitigate that concern.&lt;/p&gt;&lt;h3 id=&#34;data-representation&#34;&gt;Data Representation &lt;a href=&#34;#data-representation&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The next piece we&amp;rsquo;re going to build will take in that response body and expose the data of interest to us. First things first, we need to give it a name. This data is telling us what the weather is in a place. We&amp;rsquo;ll call it the current weather conditions.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Sweathr&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Weather&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CurrentConditions&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(results)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; results&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;feels_like_f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dig(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_observation&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;feelslike_f&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_f&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All we care about is knowing how hot or cold it feels outside. So, that&amp;rsquo;s the one public method we&amp;rsquo;ll expose. The API provides the number as a string, and we&amp;rsquo;ll use this method to convert it to a float, so it&amp;rsquo;s in a format we expect. This class provides us a location to expose more data that comes back should we need it in the future.&lt;/p&gt;&lt;h4 id=&#34;data-representation-testing&#34;&gt;Data Representation Testing &lt;a href=&#34;#data-representation-testing&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;We can unit test this using conventional and familiar means. There&amp;rsquo;s no need to interface with the API at all.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#feels_like_f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gives the feels like temp in Fahrenheit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conditions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Weather&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CurrentConditions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(json)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(conditions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;feels_like_f)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because this is so targeted, we can also dig into very specific edge cases. We can explore how we handle data we might receive from the API without needing to interact with the API. How will this respond to receiving a string that can&amp;rsquo;t convert to a float? What if there is no current observation key in the hash? We can provide a hash that meets those criteria and test that with minimal overhead.&lt;/p&gt;&lt;h3 id=&#34;domain-module&#34;&gt;Domain Module &lt;a href=&#34;#domain-module&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;re going to tie these two components together in a module. This module will be our external API by which we consume this work.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Sweathr&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Weather&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      @client &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;current_conditions&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Weather&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CurrentConditions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_conditions(&lt;span style=&#34;color:#e6db74&#34;&gt;zip&lt;/span&gt;: zip_code)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As a consumer of this, I don&amp;rsquo;t need to worry about knowing all the underlying classes involved. Let&amp;rsquo;s see how we can use this in our existing &lt;code&gt;Location&lt;/code&gt; class.&lt;/p&gt;&lt;h2 id=&#34;usage&#34;&gt;Usage &lt;a href=&#34;#usage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Interfacing with our weather API is now abstracted into a separate module. We can re-write our &lt;code&gt;Location#sweater_weather?&lt;/code&gt; method to use it.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Location&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sweater_weather?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Weather&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_conditions(&lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;: @zip_code)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;feels_like_f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;between?(&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More of the focus in this method is now on the business logic. This method retrieves the current weather conditions, and determines if it feels like sweater weather. Accessing that information from the weather API is still important. But we don&amp;rsquo;t need to understand that complexity when we&amp;rsquo;re reading this method.&lt;/p&gt;&lt;p&gt;This separation gives us a new option for testing our interactions with the weather API. We&amp;rsquo;ll explore that next.&lt;/p&gt;&lt;h2 id=&#34;test-mode&#34;&gt;Test Mode &lt;a href=&#34;#test-mode&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;fake-client&#34;&gt;Fake Client &lt;a href=&#34;#fake-client&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s borrow a strategy from our prior post. We&amp;rsquo;re going to build a &lt;a href=&#34;https://kevinjmurphy.com/posts/testing-dependencies/#fake&#34;&gt;fake&lt;/a&gt;. But, we don&amp;rsquo;t need to fake out the HTTP traffic. We&amp;rsquo;re going to build a class that responds to the same methods as &lt;code&gt;Sweathr::Weather::Api&lt;/code&gt;, but doesn&amp;rsquo;t make a HTTP call.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FakeWeatherClient&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_conditions&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;zip&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_observation&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;feelslike_f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; @results&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;zip_code&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This client needs to responds to the same methods as the real client, so it can stand in for the original. Helpfully, it can also have extra behavior. We&amp;rsquo;re going to add a method that allows us to specify the weather in a location.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FakeWeatherClient&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_condition&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;temp_f&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @results&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;zip_code&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp_f&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can control the weather anywhere in the world!&lt;/p&gt;&lt;h3 id=&#34;test-mode-1&#34;&gt;Test Mode &lt;a href=&#34;#test-mode-1&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We need a way to specify that we want to use this fake client. We&amp;rsquo;ll do so by making one change to our domain. We&amp;rsquo;re going to add the ability to set the client we want to use to consume the weather API.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Sweathr&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Weather&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      @client &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(client)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      @client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t want to have to set this client in all our tests - and we certainly don&amp;rsquo;t want to forget to set it back. We&amp;rsquo;ll instead build a module that will take care of this for us.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Sweathr&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Weather&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Testing&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enable!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Weather&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FakeWeatherClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Weather&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Weather&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method expects a block, and for the &lt;a href=&#34;https://kevinjmurphy.com/posts/temporary-state-in-tests/&#34;&gt;duration of the block&lt;/a&gt;, our fake client is the client it uses. At the conclusion of the block, it returns the client to one that will execute API requests.&lt;/p&gt;&lt;p&gt;Now in testing our &lt;code&gt;Location&lt;/code&gt; class, we can define the state of the world (or at least the weather) in the setup of our test.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is time to break out the sweater&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Weather&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable! &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Weather&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_condition(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;02108&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;temp_f&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;56.0&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;02108&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(location&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sweater_weather?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to be &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re able to succinctly state that the temperature in zip code 02108 is 56 degrees at the top of the block. Then we exercise how our method under test responds to that scenario.&lt;/p&gt;&lt;h2 id=&#34;domain-development&#34;&gt;Domain Development &lt;a href=&#34;#domain-development&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We needed to undertake a lot of work to allow for that test to exist. We decomposed a five line method into two classes and a module. We added in &lt;em&gt;another&lt;/em&gt; module to test our weather API. And we drive those tests by a fake version of one of the new classes we wrote.&lt;/p&gt;&lt;p&gt;In doing so, we gained the ability to test our interaction with the dependency in greater detail. We have logical extension points for building in new functionality. We know where to add a method to consume new API endpoints. Or where to expose more data from the current weather conditions. We removed the need to handle HTTP traffic to test our application&amp;rsquo;s business logic.&lt;/p&gt;&lt;p&gt;Was it worth it? For this contrived example, maybe not. As your usage of a dependency expands, having this separation has more merit. Defining a separate domain for the dependency clears up where the responsibility of the dependency ends and your usage of it begins. It makes it easier to reuse common interactions with the dependency. It provides clear seams to add in future functionality. It may be worth considering as you organize your next interaction with a new dependency.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Testing Dependencies: Fake It While You Make It</title>
       <link>https://kevinjmurphy.com/posts/testing-dependencies/</link>
       <pubDate>Sun, 05 Jun 2022 21:15:06 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/testing-dependencies/</guid>
       <description>&lt;h2 id=&#34;sweathr&#34;&gt;Sweathr &lt;a href=&#34;#sweathr&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Is it feeling chilly outside where you live? Should you put a sweater on before you head outside? These questions used to be hard to answer. No more! Today we&amp;rsquo;re going to be talking about Sweathr. This new, totally not fake, website exists to tell you if it&amp;rsquo;s sweater weather where you live.&lt;/p&gt;&lt;p&gt;I debuted this revolutionary product at &lt;a href=&#34;https://youtu.be/iEfpAp2sqiw&#34;&gt;RailsConf 2020&lt;/a&gt;. It communicates with a weather HTTP API to receive temperature information.&lt;/p&gt;&lt;p&gt;Here is the core business logic of our application. We define sweater weather to be from 55-65 degrees Fahrenheit.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Location&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sweater_weather?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;URI&lt;/span&gt;(conditions_url_for_zip_code)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Net&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(uri)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(result)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    feels_like &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dig(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current_observation&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;feelslike_f&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    feels_like&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;between?(&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;d like to test the &lt;code&gt;Location#sweater_weather?&lt;/code&gt; method. Today, we&amp;rsquo;re going to investigate four options to do so with the API call in the method.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#direct-interaction&#34;&gt;Direct Interaction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#stub&#34;&gt;Stub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#fake&#34;&gt;Fake&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#fixture&#34;&gt;Fixture&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;direct-interaction&#34;&gt;Direct Interaction &lt;a href=&#34;#direct-interaction&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As a starting point, we can write some tests that use the API directly.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is time to break out the sweater&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;02108&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(location&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sweater_weather?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to be &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give us confidence that we are using the dependency correctly. Our test has full production parity. It will work the same in our test suite as it will deployed for our end users.&lt;/p&gt;&lt;p&gt;It comes with significant downsides though. The most glaring is that it&amp;rsquo;s non-deterministic. This test succeeding &lt;strong&gt;literally depends&lt;/strong&gt; on the weather in that location. It&amp;rsquo;s likely to fail often - and not for actionable reasons. It will fail because it happens to be too hot or too cold outside at the given moment this test runs.&lt;/p&gt;&lt;p&gt;Tying this test to our dependency may be slow. We need to wait for the HTTP request and response to resolve before our test passes. We&amp;rsquo;re also subject to the constraints of our dependency. With a HTTP API, we may have rate limits. That can become problematic when this test runs over and over again, locally and on CI. Our massive development team at Sweathr need to run the test suite often, and we may get rate limited.&lt;/p&gt;&lt;p&gt;You may think that this is a foolish approach. I&amp;rsquo;ll agree, it&amp;rsquo;s unlikelythe best choice in this example. Don&amp;rsquo;t dismiss this strategy entirely though. You&amp;rsquo;re probably using it in your own test suite! I&amp;rsquo;m yet to see a test suite for a Rails app with persistence that doesn&amp;rsquo;t interact with the backing store. We even write things we call &lt;em&gt;unit&lt;/em&gt; tests which call out to the database (gasp). This is directly interacting with our dependency. And we&amp;rsquo;ve largely decided, as a community, that we accept this. We are directly interacting with our dependency in our test.&lt;/p&gt;&lt;h3 id=&#34;stub&#34;&gt;Stub &lt;a href=&#34;#stub&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can avoid managing HTTP communication with our dependency. Instead, we&amp;rsquo;ll stub out how we expect it to respond. In this case, we&amp;rsquo;ll use &lt;a href=&#34;https://github.com/bblimke/webmock&#34;&gt;webmock&lt;/a&gt; to stub out a response at the HTTP layer.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is time to break out the sweater&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  api_response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;current_observation&lt;/span&gt;: {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;feelslike_f&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;55.0&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  stub_request(&lt;span style=&#34;color:#e6db74&#34;&gt;:get&lt;/span&gt;, url)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_return(&lt;span style=&#34;color:#e6db74&#34;&gt;status&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;body&lt;/span&gt;: api_response)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;02108&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(location&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sweater_weather?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to be &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This solves our determinism problem as well. In the world of this test, the weather is always 55 degrees at this location. It&amp;rsquo;s faster than communicating over HTTP - it doesn&amp;rsquo;t need HTTP at all. We can run this test in the middle of the woods with no internet connection and it&amp;rsquo;ll pass without a problem.&lt;/p&gt;&lt;p&gt;There are still trade-offs we&amp;rsquo;re making with this approach. First of all, we must know the response structure. We may need to &lt;a href=&#34;#direct-interaction&#34;&gt;directly interact&lt;/a&gt; with the dependency first to confirm the structure.&lt;/p&gt;&lt;p&gt;Just as important, we need to keep that structure up to date. If the weather API starts sending data in a different format, this test is going to continue to pass. We&amp;rsquo;ll only find out there&amp;rsquo;s an issue on production. That&amp;rsquo;s less than great - I want my test to tell me there&amp;rsquo;s a problem.&lt;/p&gt;&lt;p&gt;Stubbing out a response from your dependency in tests can be a great choice if you have a stable interface. You&amp;rsquo;re avoiding using the dependency entirely. As such, you&amp;rsquo;re taking on the responsibility to make sure it still reflects reality. That&amp;rsquo;s easier to manage if the interface and data structure doesn&amp;rsquo;t change.&lt;/p&gt;&lt;h3 id=&#34;fake&#34;&gt;Fake &lt;a href=&#34;#fake&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Stubbing out the response may be too magical for you. A more tangible approach may be to build our own weather API. For test purposes we&amp;rsquo;ll communicate with that API, rather than the real one.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s build our own weather API quick:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FakeWeather&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sinatra&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/:key/conditions/q/:zip_code.json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    json &lt;span style=&#34;color:#e6db74&#34;&gt;current_observation&lt;/span&gt;: { &lt;span style=&#34;color:#e6db74&#34;&gt;feelslike_f&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;56.0&amp;#34;&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use the &lt;code&gt;FakeWeather&lt;/code&gt; API rather than the real one using a tool like &lt;a href=&#34;https://github.com/thoughtbot/capybara_discoball&#34;&gt;capybara_discoball&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is time to break out the sweater&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;02108&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Capybara&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Discoball&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spin(&lt;span style=&#34;color:#66d9ef&#34;&gt;FakeWeather&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    location&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endpoint_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(location&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sweater_weather?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to be &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within the &lt;code&gt;Capybara::Discoball.spin&lt;/code&gt; block, we&amp;rsquo;re communicating with &lt;code&gt;FakeWeather&lt;/code&gt;. We&amp;rsquo;re not issuing a request to the actual weather API. Because that fake always says it&amp;rsquo;s 56 degrees, we still have a deterministic test. We can control how much flexibility we have in our fake. We can update it so that different locations get different temperatures if we&amp;rsquo;d like. That complexity lives in the &lt;code&gt;FakeWeather&lt;/code&gt; class. It&amp;rsquo;s not contained within our individual tests that communicate with it.&lt;/p&gt;&lt;p&gt;Using the fake puts us back to communicating over HTTP. It happens to be communicating with a local HTTP server, but it&amp;rsquo;s still using the protocol.&lt;/p&gt;&lt;p&gt;We still have the same consistency issues we had with stubbing. We need to make sure the responses our fake is providing mimic the responses of the real API and keep that up to date.&lt;/p&gt;&lt;p&gt;Using a fake may be beneficial when we need to test the communication mechanism, or protocol. It can also be useful when testing a multi-step interaction, like an OAuth flow. Rather than stubbing out each API call in that flow in a test, we can build a fake that has endpoints to respond to each of those requests.&lt;/p&gt;&lt;h3 id=&#34;fixture&#34;&gt;Fixture &lt;a href=&#34;#fixture&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We have another option to capture a real interaction with the dependency. We won&amp;rsquo;t need to build out a fake version of our dependency. We won&amp;rsquo;t stub out a made-up response. We can store that interplay and reload it from that file for future runs. We call that file a fixture.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll use a tool called &lt;a href=&#34;https://github.com/vcr/vcr&#34;&gt;vcr&lt;/a&gt; to capture real HTTP requests and responses, storing and using them from then on. VCR&amp;rsquo;s language and terminology leans heavily into its real-world analogue. If you don&amp;rsquo;t know what a VCR is, it&amp;rsquo;s a box we used to hook up to TVs to watch movies before DVD players. If you don&amp;rsquo;t know what a DVD player is, it&amp;rsquo;s a box we used to hook up to TVs to watch movies before streaming.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is time to break out the sweater&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Sweathr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;zip_code&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;02108&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;VCR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;use_cassette(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;temp_needs_sweater&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(location&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sweater_weather?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to be &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first time this test runs, it makes an actual HTTP request to the weather API. VCR saves the request and response information in a file called &amp;ldquo;temp_needs_sweater.yml&amp;rdquo;.&lt;/p&gt;&lt;p&gt;The next time this test runs, VCR uses the request and response from that YAML file. No HTTP requests.&lt;/p&gt;&lt;p&gt;This fixture is an absolutely true representation of an interaction with the dependency. It&amp;rsquo;s true as of the moment in time it generates the fixture. Generating the fixture in a test and running the code in production should react the same.&lt;/p&gt;&lt;p&gt;Unfortunately, the time we generated that fixture quickly turns into the past. To ensure that correctness, we must update the fixture. Recording new fixtures lets us validate the continued correctness of our test. This is in contrast with the stub or the fake. Even though we &lt;em&gt;can&lt;/em&gt; update them, we still need to take the action to refresh these fixtures.&lt;/p&gt;&lt;h2 id=&#34;depending-on-tests&#34;&gt;Depending on Tests &lt;a href=&#34;#depending-on-tests&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We may be writing a test to serve a variety of needs. The dependency testing strategies listed above serve different needs.&lt;/p&gt;&lt;p&gt;When we&amp;rsquo;re using the dependency for the first time, we want to make sure the code we&amp;rsquo;re writing &lt;em&gt;works&lt;/em&gt;. We&amp;rsquo;re not familiar enough with it to guess how it will respond. We need the actual dependency. Interacting with it directly is the best approach to give us experience with it. It may prove to be good enough for a long time, like in the case of calling out to a database.&lt;/p&gt;&lt;p&gt;The overhead of accessing the dependency may prove to be too onerous. It may make the test unreliable. It may make the test too slow. We can stub out the response. This depends on how confidently we understand how the dependency will respond. It&amp;rsquo;s helpful when we have some way to alert us that the assumption we&amp;rsquo;ve made in our stub is now invalid.&lt;/p&gt;&lt;p&gt;A fake version of the dependency adds back some complexity. We need to generate the fake and communicate over the original protocol. The fake tests our usage of the dependency at a higher level. We isolate the complexity of the interactions inside the fake.&lt;/p&gt;&lt;p&gt;A fixture captures a real interaction with the dependency. We must refresh that interaction so it reflects the dependency&amp;rsquo;s current reality.&lt;/p&gt;&lt;p&gt;There is no &amp;ldquo;right&amp;rdquo; answer to how to test against third-party dependencies. It&amp;rsquo;s all &lt;a href=&#34;https://kevinjmurphy.com/posts/to-change-or-not-to-change/&#34;&gt;trade-offs&lt;/a&gt;, and it&amp;rsquo;s up to us to determine which risks we&amp;rsquo;re willing to accept for the greatest benefit.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Searching for a Reason</title>
       <link>https://kevinjmurphy.com/posts/searching-for-a-reason/</link>
       <pubDate>Sun, 15 May 2022 07:00:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/searching-for-a-reason/</guid>
       <description>&lt;h2 id=&#34;search-driven-development&#34;&gt;Search-Driven Development &lt;a href=&#34;#search-driven-development&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We all only have so much working memory available in our brains. Developers may joke about spending their day composing search engine queries. The reason it&amp;rsquo;s a joke is because of the truth behind it. Search-driven development is a reality.&lt;/p&gt;&lt;p&gt;Embracing that truth, I find it&amp;rsquo;s important to consider &lt;em&gt;why&lt;/em&gt; I&amp;rsquo;m searching for something. It helps guide the path I&amp;rsquo;ll take to resolve my query and helps frame the problem in a familiar context. In my own work, I&amp;rsquo;ve found there are four main categories of reasons why I search. They all relate to how much experience I have with the problem I&amp;rsquo;m working on.&lt;/p&gt;&lt;h3 id=&#34;solve-direct-problems&#34;&gt;Solve Direct Problems &lt;a href=&#34;#solve-direct-problems&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When I&amp;rsquo;m trying to do something for the first time, I may lack any context and perspective to have a starting point. I may get stuck mid-way through. And, being a novice at this task, I need to seek outside perspectives. I&amp;rsquo;ll often build that up by searching for how others have accomplished the same task.&lt;/p&gt;&lt;p&gt;With a specific error that I&amp;rsquo;m looking to fix, there&amp;rsquo;s one thing I almost always do first. I &lt;strong&gt;copy and paste the error&lt;/strong&gt; into a search engine. This is a high-leverage, low-effort move. It&amp;rsquo;s unlikely you&amp;rsquo;re the only person to have encountered this issue before. It requires validating that what you find are people experiencing the same problem. You must also determine for yourself if their solution works for you. However, it is still a go-to first step for me.&lt;/p&gt;&lt;p&gt;That may not be a great approach if the error is fairly generic. It may not yield results if a lot of the error message is about code specific to your application. In that case, I review the error message, and consider the context where it arrived. Search the README of the framework, dependency, or tool you&amp;rsquo;re working with. Visit open and closed issues. Search their documentation. Find their forums. Use log messages to add to your search criteria.&lt;/p&gt;&lt;p&gt;You may conduct a thorough search using all these avenues and still not have an answer. You might start feeling frustrated, or angry. You might be doubting your abilities. When that creeps in, the most important thing I can recommend is that you stop.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Stop.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Move away and do something else for a few minutes, even if it&amp;rsquo;s get a new glass of water. Give your brain some time to wander. Ponder what you&amp;rsquo;re experiencing in a different physical location. Do something else to take your mind off of it.&lt;/p&gt;&lt;p&gt;When you&amp;rsquo;re ready to regroup, re-review what the problem is and what steps you&amp;rsquo;ve taken to address it. Look at your search history to see what you&amp;rsquo;ve already looked for. Try to find any gaps in what you&amp;rsquo;ve already explored.&lt;/p&gt;&lt;p&gt;At this point, remember that you don&amp;rsquo;t have to solve this alone. You don&amp;rsquo;t need to use the computer by yourself to solve the problem. If the computer could fix itself, we wouldn&amp;rsquo;t have a job as developers! Reach out to your friends and your coworkers for help. Their fresh perspective may bring a quick resolution. They might suggestion other things to search for. They may help you with a different strategy to take.&lt;/p&gt;&lt;h3 id=&#34;recall-details&#34;&gt;Recall Details &lt;a href=&#34;#recall-details&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Another class of problem is one I&amp;rsquo;ve encountered before, but I don&amp;rsquo;t remember exactly what to do about it. This doesn&amp;rsquo;t mean that I&amp;rsquo;m starting from a fresh search though. I do my best to keep some notes, or a pointer in my brain, so I can have a very targeted search and quickly resolve my issue.&lt;/p&gt;&lt;p&gt;I don&amp;rsquo;t have the characters memorized that tell a date how to format itself into a specific string. But, I do know that the &lt;a href=&#34;https://ruby-doc.org/stdlib-3.1.0/libdoc/date/rdoc/DateTime.html#method-i-strftime&#34;&gt;ruby strftime documentation&lt;/a&gt; has them exhaustively defined. When I need to format a date in a specific way, I don&amp;rsquo;t remember how to do that. But I do remember where to go to find that out.&lt;/p&gt;&lt;h3 id=&#34;revisit-assumptions&#34;&gt;Revisit Assumptions &lt;a href=&#34;#revisit-assumptions&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I also find myself searching when I already &lt;em&gt;know&lt;/em&gt; a way to solve my problem. That may sound wasteful, but it&amp;rsquo;s been beneficial for me. I take a time-boxed approach to learn how other people solve familiar problems. It gives me new insight. It may introduce me to a new tool. I could learn a new design pattern. I may discover something I like about my approach that I didn&amp;rsquo;t even have an appreciation for before.&lt;/p&gt;&lt;p&gt;We work in an industry that&amp;rsquo;s ever-changing. There are new tools, products, and mindsets coming and going. We can learn from all these. I may still use the approach I was going to when I started. But I&amp;rsquo;m doing so not &lt;strong&gt;only&lt;/strong&gt; because it&amp;rsquo;s how I know how to do it. It&amp;rsquo;s because I&amp;rsquo;ve identified a set of alternatives. I&amp;rsquo;ve developed a series of criteria to evaluate them on, and made an intentional choice on how to proceed.&lt;/p&gt;&lt;h3 id=&#34;share-communal-knowledge&#34;&gt;Share Communal Knowledge &lt;a href=&#34;#share-communal-knowledge&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;ll also search for things I already know about to provide that information to others. I don&amp;rsquo;t want people to only take my word for it. I want to provide some social proof, documentation, or other primary source. Now this person has that available to them for bookmarking or their notes. It can serve its purpose beyond the scope of a conversation with me.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s very unlikely that I learned about what we&amp;rsquo;re talking about by figuring it out on my own. I likely read, watched, or heard about it somewhere else. That original source deserves the credit. Sharing that with others allows them to gain the same context I have and recall it in the future.&lt;/p&gt;&lt;h2 id=&#34;search-experience&#34;&gt;Search Experience &lt;a href=&#34;#search-experience&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When I&amp;rsquo;m solving a direct problem or recalling details, I search when I feel that I cannot resolve my issue alone. I&amp;rsquo;ve determined it&amp;rsquo;ll be a quicker and more effective use of my time to seek outside perspectives.&lt;/p&gt;&lt;p&gt;There are many times where I search for items that I do know the answer to. I investigate new ways to solve the problem. Through that I gain more experience and make informed choices on the approach I take. I search to bolster my presentation of knowledge I have with information from others. Revising this information is beneficial to me, and by sharing it, I hope others benefit as well.&lt;/p&gt;&lt;p&gt;The next time you&amp;rsquo;re searching for something, consider &lt;em&gt;why&lt;/em&gt; you&amp;rsquo;re searching for it. Use that answer to inform the approach you take. And I hope that you find what you&amp;rsquo;re looking for.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Scraping Buy: Scripting for a Purchase</title>
       <link>https://kevinjmurphy.com/posts/scraping-buy/</link>
       <pubDate>Wed, 11 May 2022 16:53:59 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/scraping-buy/</guid>
       <description>&lt;h2 id=&#34;an-opening-tune&#34;&gt;An Opening Tune &lt;a href=&#34;#an-opening-tune&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The piece of code I&amp;rsquo;ve written in the last two months most interesting to me isn&amp;rsquo;t anything I&amp;rsquo;ve done for work. It isn&amp;rsquo;t anything I wrote to &lt;a href=&#34;https://kevinjmurphy.com/posts/available-for-hire-2022/&#34;&gt;find&lt;/a&gt; a new job. It doesn&amp;rsquo;t have tests. It doesn&amp;rsquo;t even have a class. It&amp;rsquo;s dirty, not up to my standards, and doesn&amp;rsquo;t handle edge cases. But it does what I need it to.&lt;/p&gt;&lt;h2 id=&#34;sad-song&#34;&gt;Sad Song &lt;a href=&#34;#sad-song&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I don&amp;rsquo;t (and likely will never) consider myself a guitarist, but I like the guitar. I&amp;rsquo;d like to have a Les Paul to go along with my Stratocaster, but I also like having money for things like food and shelter. I can&amp;rsquo;t justify it in the budget, and that&amp;rsquo;s fine. But maybe I could find something close enough for less money.&lt;/p&gt;&lt;p&gt;I zeroed in on a copy, and I decided on a Firefly. There was only one problem - I couldn&amp;rsquo;t buy one. At least, not from them. Keeping them in stock was problematic. Not only because of supply chain issues, but because of their business model. They batch up a small number of guitars a few times a year for sale. I wasn&amp;rsquo;t the only person with the same plan to buy one. They sell out quickly most of the time.&lt;/p&gt;&lt;p&gt;You can find them on the &lt;a href=&#34;https://reverb.com/marketplace?query=Firefly%20FFLPS&#34;&gt;secondhand market&lt;/a&gt;. Typically, they&amp;rsquo;re priced higher than their new price direct from the manufacturer. The demand is there. They don&amp;rsquo;t make them often enough. And if you want one, you&amp;rsquo;ve got to be fast.&lt;/p&gt;&lt;h2 id=&#34;composing-a-number&#34;&gt;Composing A Number &lt;a href=&#34;#composing-a-number&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is about the furthest thing from an important use of my time. Still, I became a bit&amp;hellip;overtaken by the prospect of ordering one. I&amp;rsquo;d refresh the site many times a day, just to check in. Once, I happened to refresh the site when they were uploading their fresh inventory. I was in! But, I did not get to the model I wanted in time. It sold out before I could find it.&lt;/p&gt;&lt;p&gt;Finally, I remembered that computers can do repetitive work for you, and that I knew how to request them to do so. I resolved to stop refreshing their product listing page. At least, I&amp;rsquo;d stop refreshing it myself. I wrote a small script to do it for me.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nokogiri&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open-uri&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nokogiri&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTML&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;URI&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;root_url&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/collections/fflp-electric-guitars&amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;guitars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; doc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  compact&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  select { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/collections/fflp-electric-guitars/products&amp;#34;&lt;/span&gt;) }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uniq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  map{ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;root_url&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;a&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sort&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts guitars&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I wouldn&amp;rsquo;t put this in production at work. It doesn&amp;rsquo;t have consistent formatting! It&amp;rsquo;s not clear exactly what this is doing! It&amp;rsquo;s not tested. Literally. I don&amp;rsquo;t mean it doesn&amp;rsquo;t have automated tests. I mean I had no idea if this would work. When I wrote it, I couldn&amp;rsquo;t test it against a page that had any products. I found one of their other products that did have inventory in stock, and built it against that. I hoped that the page for this product line would work the same, and that I didn&amp;rsquo;t have a typo.&lt;/p&gt;&lt;p&gt;This doesn&amp;rsquo;t keep track of their full inventory. It has no awareness of if there are pages of results. But, it&amp;rsquo;s good enough to tell me that there &lt;em&gt;are&lt;/em&gt; guitars for sale. That&amp;rsquo;s a start. Hopefully. I tired of seeing the &amp;ldquo;sold out&amp;rdquo; page. And I wouldn&amp;rsquo;t even know if it would work until that &amp;ldquo;sold out&amp;rdquo; page went away.&lt;/p&gt;&lt;h2 id=&#34;automated-playback&#34;&gt;Automated Playback &lt;a href=&#34;#automated-playback&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Having the script is great, but if I have to run it myself, I might as well refresh the page in my browser. Once again, I needed to remind myself what I do for a living, and how I can ask computers to do things for me. Of course, that only happened when I came across &lt;a href=&#34;https://simonwillison.net/2020/Oct/9/git-scraping/&#34;&gt;this post&lt;/a&gt;. In it, the author uses GitHub Actions to automate diff checks of websites. Now sure, their example was for trivial things like forest fires in California. But I could take the same approach for important things like guitars being in stock.&lt;/p&gt;&lt;p&gt;I modified my script to dump its output to a file, set up the GitHub Action, and subscribed to the repository. When the action pushed a commit because the page changed, I would get an email with a link to the commit. I could use that to then see the list of guitars for sale.&lt;/p&gt;&lt;p&gt;In theory. I still needed to see it happen. Ever.&lt;/p&gt;&lt;h2 id=&#34;outro&#34;&gt;Outro &lt;a href=&#34;#outro&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It finally happened. And it just arrived.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/firefly_goldtop.jpg&#34;    alt=&#34;A Firefly FFLPS Goldtop&#34;&gt;&lt;/figure&gt;&lt;p&gt;Code doesn&amp;rsquo;t have to be perfect. It doesn&amp;rsquo;t always need to adhere to your normal standards. Sometimes, it can be good enough to solve a problem you have - especially if it&amp;rsquo;s temporary. Even better if you &lt;em&gt;know&lt;/em&gt; it&amp;rsquo;ll be temporary. I&amp;rsquo;ve written lots of &amp;ldquo;temporary&amp;rdquo; code that I&amp;rsquo;m sure is still in production, years later. Writing code like this is a gamble.&lt;/p&gt;&lt;p&gt;But the stakes were incredibly low here. I wouldn&amp;rsquo;t put this in my portfolio if I were looking for a job. It served its purpose though. I&amp;rsquo;m happy to retire this code. Thanks to it, I have other things to play with rather than maintain this.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Code and the Coding Coders who Code it Podcast Appearance</title>
       <link>https://kevinjmurphy.com/posts/coding-coders-podcast-2022/</link>
       <pubDate>Wed, 11 May 2022 08:27:36 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/coding-coders-podcast-2022/</guid>
       <description>&lt;p&gt;I am the latest guest on the Code and the Coding Coders who Code it &lt;a href=&#34;https://www.buzzsprout.com/1927628&#34;&gt;podcast&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Drew Bragg and I cover prepping a talk for RailsConf, finding a job, and writingwords about code that aren&amp;rsquo;t code. You can listen &lt;a href=&#34;https://www.buzzsprout.com/1927628/10596923&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Drew and I stuck around unexpectedly to discuss our shared love of hockey, thatyou can hear &lt;a href=&#34;https://www.buzzsprout.com/1927628/10597043-bonus-hockey-episode&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Joining BookBub</title>
       <link>https://kevinjmurphy.com/posts/bookbub-start/</link>
       <pubDate>Mon, 02 May 2022 06:23:22 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/bookbub-start/</guid>
       <description>&lt;p&gt;Today is my first day joining the team at &lt;a href=&#34;https://www.bookbub.com/welcome&#34;&gt;BookBub&lt;/a&gt;. I&amp;rsquo;m looking forward to meeting and working with the team there.&lt;/p&gt;&lt;p&gt;To everyone who I heard from and met with during my &lt;a href=&#34;https://kevinjmurphy.com/posts/available-for-hire-2022/&#34;&gt;job search&lt;/a&gt;, thank you. I had so many great conversations and was overwhelmed with the volume and quality of responses I received.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Browser History Confessional: Searching My Recent Searches</title>
       <link>https://kevinjmurphy.com/posts/browser-history/</link>
       <pubDate>Wed, 13 Apr 2022 08:55:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/browser-history/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We all only have so much working memory available in our brains. Developers may joke about spending their day composing search engine queries. The reason it&amp;rsquo;s a joke is because of the truth behind it. Search-driven development is a reality.&lt;/p&gt;&lt;p&gt;Join me, and my actual search history, on a journey to solve recent challenges I faced. I&amp;rsquo;ll categorize the different types of information I often search for. You&amp;rsquo;ll leave with tips on retrieving the knowledge you need for your next bug, feature, or pull request.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/R7LkHjJdH9o&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://youtu.be/R7LkHjJdH9o&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/browser-history-confessional-searching-my-recent-searches&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/browser-history&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/searching-for-a-reason/&#34;&gt;Blog Post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/browser-history-confessional-proposal/&#34;&gt;Proposal&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;search-driven-development&#34;&gt;Search-Driven Development &lt;a href=&#34;#search-driven-development&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I find it&amp;rsquo;s important to consider &lt;em&gt;why&lt;/em&gt; I&amp;rsquo;m searching for something. It helps guide the path I&amp;rsquo;ll take to resolve my query and helps frame the problem in a familiar context. In my own work, I&amp;rsquo;ve found there are four main categories of reasons why I search. They all relate to how much experience I have with the problem I&amp;rsquo;m working on.&lt;/p&gt;&lt;h3 id=&#34;solve-direct-problems&#34;&gt;Solve Direct Problems &lt;a href=&#34;#solve-direct-problems&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When I&amp;rsquo;m trying to do something for the first time, I may lack any context and perspective to have a starting point. I may get stuck mid-way through. And, being a novice at this task, I need to seek outside perspectives. I&amp;rsquo;ll often build that up by searching for how others have accomplished the same task.&lt;/p&gt;&lt;p&gt;With a specific error that I&amp;rsquo;m looking to fix, there&amp;rsquo;s one thing I almost always do first. I &lt;strong&gt;copy and paste the error&lt;/strong&gt; into a search engine. This is a high-leverage, low-effort move. It&amp;rsquo;s unlikely you&amp;rsquo;re the only person to have encountered this issue before. It requires validating that what you find are people experiencing the same problem. You must also determine for yourself if their solution works for you. However, it is still a go-to first step for me.&lt;/p&gt;&lt;p&gt;That may not be a great approach if the error is fairly generic. It may not yield results if a lot of the error message is about code specific to your application. In that case, I review the error message, and consider the context where it arived. Search the README of the framework, dependency, or tool you&amp;rsquo;re working with. Visit open and closed issues. Search their documentation. Find their forums. Use log messages to add to your search criteria.&lt;/p&gt;&lt;p&gt;You may conduct a thorough search using all these avenues and still not have an answer. You might start feeling frustrated, or angry. You might be doubting your abilities. When that creeps in, the most important thing I can recommend is that you stop.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Stop.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Move away and do something else for a few minutes, even if it&amp;rsquo;s get a new glass of water. Give your brain some time to wander. Ponder what you&amp;rsquo;re experiencing in a different physical location. Do something else to take your mind off of it.&lt;/p&gt;&lt;p&gt;When you&amp;rsquo;re ready to regroup, re-review what the problem is and what steps you&amp;rsquo;ve taken to address it. Look at your search history to see what you&amp;rsquo;ve already looked for. Try to find any gaps in what you&amp;rsquo;ve already explored.&lt;/p&gt;&lt;p&gt;At this point, remember that you don&amp;rsquo;t have to solve this alone. You don&amp;rsquo;t need to use the computer by yourself to solve the problem. If the computer could fix itself, we wouldn&amp;rsquo;t have a job as developers! Reach out to your friends and your coworkers for help. Their fresh perspective may bring a quick resolution. They might suggestion other things to search for. They may help you with a different strategy to take.&lt;/p&gt;&lt;h3 id=&#34;recall-details&#34;&gt;Recall Details &lt;a href=&#34;#recall-details&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Another class of problem is one I&amp;rsquo;ve encountered before, but I don&amp;rsquo;t remember exactly what to do about it. This doesn&amp;rsquo;t mean that I&amp;rsquo;m starting from a fresh search though. I do my best to keep some notes, or a pointer in my brain, so I can have a very targeted search and quickly resolve my issue.&lt;/p&gt;&lt;p&gt;I don&amp;rsquo;t have the characters memorized that tell a date how to format itself into a specific string. But, I do know that the &lt;a href=&#34;https://ruby-doc.org/stdlib-3.1.0/libdoc/date/rdoc/DateTime.html#method-i-strftime&#34;&gt;ruby strftime documentation&lt;/a&gt; has them exhaustively defined. When I need to format a date in a specific way, I don&amp;rsquo;t remember how to do that. But I do remember where to go to find that out.&lt;/p&gt;&lt;h3 id=&#34;revisit-assumptions&#34;&gt;Revisit Assumptions &lt;a href=&#34;#revisit-assumptions&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I also find myself searching when I already &lt;em&gt;know&lt;/em&gt; a way to solve my problem. That may sound wasteful, but it&amp;rsquo;s been beneficial for me. I take a time-boxed approach to learn how other people solve familiar problems. It gives me new insight. It may introduce me to a new tool. I could learn a new design pattern. I may discover something I like about my approach that I didn&amp;rsquo;t even have an appreciation for before.&lt;/p&gt;&lt;p&gt;We work in an industry that&amp;rsquo;s ever-changing. There are new tools, products, and mindsets coming and going. We can learn from all these. I may still use the approach I was going to when I started. But I&amp;rsquo;m doing so not &lt;strong&gt;only&lt;/strong&gt; because it&amp;rsquo;s how I know how to do it. It&amp;rsquo;s because I&amp;rsquo;ve identified a set of alternatives. I&amp;rsquo;ve developed a series of criteria to evaluate them on, and made an intentional choice on how to proceed.&lt;/p&gt;&lt;h3 id=&#34;share-communal-knowledge&#34;&gt;Share Communal Knowledge &lt;a href=&#34;#share-communal-knowledge&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;ll also search for things I already know about to provide that information to others. I don&amp;rsquo;t want people to only take my word for it. I want to provide some social proof, documentation, or other primary source. Now this person has that available to them for bookmarking or their notes. It can serve its purpose beyond the scope of a conversation with me.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s very unlikely that I learned about what we&amp;rsquo;re talking about by figuring it out on my own. I likely read, watched, or heard about it somewhere else. That original source deserves the credit. Sharing that with others allows them to gain the same context I have and recall it in the future.&lt;/p&gt;&lt;h2 id=&#34;search-experience&#34;&gt;Search Experience &lt;a href=&#34;#search-experience&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When I&amp;rsquo;m solving a direct problem or recalling details, I search when I feel that I cannot resolve my issue alone. I&amp;rsquo;ve determined it&amp;rsquo;ll be a quicker and more effective use of my time to seek outside perspectives.&lt;/p&gt;&lt;p&gt;There are many times where I search for items that I do know the answer to. I investigate new ways to solve the problem. Through that I gain more experience and make informed choices on the approach I take. I search to bolster my presentation of knowledge I have with information from others. Revising this information is beneficial to me, and by sharing it, I hope others benefit as well.&lt;/p&gt;&lt;p&gt;The next time you&amp;rsquo;re searching for something, consider &lt;em&gt;why&lt;/em&gt; you&amp;rsquo;re searching for it. Use that answer to inform the approach you take. And I hope that you find what you&amp;rsquo;re looking for.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Available For Hire</title>
       <link>https://kevinjmurphy.com/posts/available-for-hire-2022/</link>
       <pubDate>Mon, 28 Mar 2022 12:16:47 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/available-for-hire-2022/</guid>
       <description>&lt;p&gt;UPDATE: I am &lt;a href=&#34;https://kevinjmurphy.com/posts/bookbub-start/&#34;&gt;no longer&lt;/a&gt; looking for work. Below is my original post from when I was.&lt;/p&gt;&lt;p&gt;I’m a Ruby and Rails developer looking for my next full-time remote role. Here’s a little &lt;a href=&#34;https://kevinjmurphy.com/about/&#34;&gt;about me&lt;/a&gt; and what I’m looking for. If this sounds like a good fit for your organization, I’d love to talk with you.&lt;/p&gt;&lt;h2 id=&#34;how-i-work&#34;&gt;How I Work &lt;a href=&#34;#how-i-work&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I ❤️ fast feedback loops for development, code review, and customer reaction. I don’t TDD all the time, but I don’t travel far without checking in with my tests to check in on me. I focus on back-end improvements and code organization. I like to orchestrate small, understandable components to ship your next feature.&lt;/p&gt;&lt;p&gt;I get energized from setting my team up for success. That may mean evaluating alternative implementations. It could be determining prioritization of planned work. It will mean working with teammates to level up technical abilities. I’m proud to see my peers thrive.&lt;/p&gt;&lt;p&gt;I’ll admit, I’m not quick - I’m thorough. I confirm requirements, identify edge cases, and document intentional choices. I deliver code focused on maintainability and understanding. I build for the long haul, keeping in mind today’s constraints.&lt;/p&gt;&lt;h2 id=&#34;what-i-work-on&#34;&gt;What I Work On &lt;a href=&#34;#what-i-work-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby is home for me, and where I’d like to focus. In the last year I’ve also deployed Elixir and Golang code to production. I have a &lt;a href=&#34;https://www.linkedin.com/in/kevinmurphydev/&#34;&gt;track record&lt;/a&gt; of delivering solutions to big problems with small teams.&lt;/p&gt;&lt;p&gt;I have experience in healthcare tech, insurance tech, and consulting. I carry that history with me. It informs decisions and choices we make today to do right by customers and stakeholders.&lt;/p&gt;&lt;p&gt;I’ve &lt;a href=&#34;https://kevinjmurphy.com/speaking/&#34;&gt;spoken&lt;/a&gt; at RailsConf and RubyConf multiple times. I’ve presented at many meetups. I prepare presentations for internal and external audiences for us all to learn.&lt;/p&gt;&lt;p&gt;This last year I&amp;rsquo;ve &lt;a href=&#34;https://kevinjmurphy.com/featured-writing/&#34;&gt;written articles&lt;/a&gt; featured in &lt;a href=&#34;https://rubyweekly.com/&#34;&gt;Ruby Weekly&lt;/a&gt;, &lt;a href=&#34;https://ruby.libhunt.com/&#34;&gt;Awesome Ruby&lt;/a&gt;, and &lt;a href=&#34;https://rubyradar.dev/&#34;&gt;Ruby Radar&lt;/a&gt;. My next post could be highlighting the great work we do and key learnings we discover together.&lt;/p&gt;&lt;h2 id=&#34;what-im-looking-for&#34;&gt;What I&amp;rsquo;m Looking For &lt;a href=&#34;#what-im-looking-for&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I’m looking for a full-time remote Staff/Principal/Architect role. I want to mentor team members, ship meaningful work, and learn from each other. If that sounds like a fit for your team, let’s talk.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Finding an Initially Confusing Result in Rails</title>
       <link>https://kevinjmurphy.com/posts/find-or-initialize-by-block/</link>
       <pubDate>Mon, 14 Mar 2022 07:30:41 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/find-or-initialize-by-block/</guid>
       <description>&lt;h2 id=&#34;initial-impressions&#34;&gt;Initial Impressions &lt;a href=&#34;#initial-impressions&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We run into an old friend Bob and a new friend Carol on the street. Bob recently got married and changed their last name. We&amp;rsquo;re meeting Carol for the first time. We update our mental Rolodex of friends during this meeting.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smith&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Carol&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Chance encounter on the street&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_or_initialize_by(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;friend&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  friend&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jones&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;carol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_or_initialize_by(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Carol&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;friend&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  friend&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thompson&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What are the values of Carol&amp;rsquo;s and Bob&amp;rsquo;s last names in our working memory right now during this encounter?&lt;/p&gt;&lt;h3 id=&#34;carols-last-name&#34;&gt;Carol&amp;rsquo;s Last Name &lt;a href=&#34;#carols-last-name&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Carol&amp;rsquo;s last name is Thompson. We have no other friends named Carol, so we create a new object and in the block, set their last name to Thompson.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;carol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thompson&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bobs-last-name&#34;&gt;Bob&amp;rsquo;s Last Name &lt;a href=&#34;#bobs-last-name&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Bob&amp;rsquo;s last name is &lt;em&gt;still&lt;/em&gt; &amp;ldquo;Smith&amp;rdquo;, the value it&amp;rsquo;s persisted in our database as.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Smith&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even though in our block, we set their last name to Jones, it didn&amp;rsquo;t take affect. It seems we forgot our friend&amp;rsquo;s new last name! This could lead to an embarrassing situation later on in the conversation. What happened?&lt;/p&gt;&lt;h2 id=&#34;finding-the-source-of-the-confusion&#34;&gt;Finding The Source of the Confusion &lt;a href=&#34;#finding-the-source-of-the-confusion&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks to Rails&amp;rsquo; &lt;a href=&#34;https://api.rubyonrails.org/v7.0.2/classes/ActiveRecord/Relation.html#method-i-find_or_initialize_by&#34;&gt;documentation&lt;/a&gt;, we discover the &lt;code&gt;find_or_initialize_by&lt;/code&gt; method is in &lt;code&gt;ActiveRecord::Relation&lt;/code&gt;. From there, we can look at the &lt;a href=&#34;https://github.com/rails/rails/blob/de53ba56cab69fb9707785a397a59ac4aaee9d6f/activerecord/lib/active_record/relation.rb#L226&#34;&gt;source code&lt;/a&gt; of the method:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_or_initialize_by&lt;/span&gt;(attributes, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;block)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  find_by(attributes) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(attributes, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;block)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;attributing-the-difference&#34;&gt;Attributing The Difference &lt;a href=&#34;#attributing-the-difference&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If we find an existing record by the attributes provided, then we return that record. If not, &lt;code&gt;find_by&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; and we visit the right-hand side of the expression. That will create a new record with the attributes and &lt;a href=&#34;https://kevinjmurphy.com/posts/activerecord-new-block/&#34;&gt;pass the block&lt;/a&gt; to &lt;code&gt;new&lt;/code&gt;. Notice that the block is not executed at all when &lt;code&gt;find_by&lt;/code&gt; returns a record.&lt;/p&gt;&lt;h2 id=&#34;mistakenly-blocking-out-our-friends-new-name&#34;&gt;Mistakenly Blocking Out Our Friend&amp;rsquo;s New Name &lt;a href=&#34;#mistakenly-blocking-out-our-friends-new-name&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;That explains why Bob&amp;rsquo;s last name isn&amp;rsquo;t updated in our memory. We documented the change, but it never took effect. &lt;code&gt;find_or_initialize_by&lt;/code&gt; didn&amp;rsquo;t use the block. The saved representation for Bob returned from the method without executing the block.&lt;/p&gt;&lt;p&gt;When using &lt;code&gt;find_or_initialize_by&lt;/code&gt; with a block, pay careful attention. The block will only execute in one of those conditions - when initializing an object.&lt;/p&gt;&lt;h2 id=&#34;clarifying-our-initial-intent&#34;&gt;Clarifying Our Initial Intent &lt;a href=&#34;#clarifying-our-initial-intent&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;With this information, let&amp;rsquo;s consider when and how we want to evaluate the code in the block.&lt;/p&gt;&lt;h3 id=&#34;update-neither-found-nor-new-records&#34;&gt;Update Neither Found Nor New Records &lt;a href=&#34;#update-neither-found-nor-new-records&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Passing a block to &lt;code&gt;find_or_initialize_by&lt;/code&gt; is &lt;em&gt;optional&lt;/em&gt;. When the criteria we&amp;rsquo;re using to find a record is all we want our new record to have, there&amp;rsquo;s no need to supply the block.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_or_initialize_by(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our goal right now is to change Bob&amp;rsquo;s last name. This alone does not get us there.&lt;/p&gt;&lt;h3 id=&#34;only-update-new-records&#34;&gt;Only Update New Records &lt;a href=&#34;#only-update-new-records&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is what our initial implementation is doing. As a reminder, we have:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_or_initialize_by(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;friend&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  friend&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jones&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We’re searching for our friend named “Bob”. When we find one, we get our friend back from the database. When we don&amp;rsquo;t, we instantiate a new friend and also set their last name as “Jones”.&lt;/p&gt;&lt;p&gt;That may be confusing to yourself and others reading this code in the future. It may not be clear when the block executes. As an alternative, we could choose to explicitly call that out. A friend that’s not persisted will respond to &lt;code&gt;new_record?&lt;/code&gt; with &lt;code&gt;true&lt;/code&gt;, and we can use that to only update their last name when they’re new.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_or_initialize_by(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_record?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jones&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The block allows us to interact with new records beyond setting the attributes to identify the record. Block or not though, this isn’t the end result we want &lt;strong&gt;here&lt;/strong&gt; in this example.&lt;/p&gt;&lt;h2 id=&#34;update-both-found-and-new-records&#34;&gt;Update Both Found and New Records &lt;a href=&#34;#update-both-found-and-new-records&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the functionality we desire in this particular case. We don&amp;rsquo;t want to find a friend named &amp;ldquo;Bob Jones&amp;rdquo;. We won&amp;rsquo;t find one. We know Bob&amp;rsquo;s last name changed. But if we do have a friend Bob stored in our database, we want to update their last name.&lt;/p&gt;&lt;p&gt;We can use &lt;code&gt;find_or_initialize_by&lt;/code&gt; so that we have a friend instance, whether we have one stored or not. From there, we can use what we&amp;rsquo;ve learned in the prior sections. We&amp;rsquo;ll avoid passing the method a block - and we&amp;rsquo;ll unconditionally change the returned value to set the last name.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_or_initialize_by(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jones&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this change, we make sure to commit our friend’s new last name to memory. Whether they existed in our system before or not, their last name is now &amp;ldquo;Jones&amp;rdquo;.&lt;/p&gt;&lt;h2 id=&#34;finding-the-initial-inspiration&#34;&gt;Finding The Initial Inspiration &lt;a href=&#34;#finding-the-initial-inspiration&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks to Ben Drozdoff for the conversation that led to this post.&lt;/p&gt;&lt;p&gt;Thanks to Matthew Draper for the suggestion to augment this with a solutions-based conclusion, depending on when you expect the code in the block to execute.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Business Process Management: A Developer&#39;s Business</title>
       <link>https://kevinjmurphy.com/posts/business-process-management/</link>
       <pubDate>Mon, 28 Feb 2022 07:19:33 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/business-process-management/</guid>
       <description>&lt;h2 id=&#34;a-developers-business&#34;&gt;A Developer&amp;rsquo;s Business &lt;a href=&#34;#a-developers-business&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/situational-leadership/&#34;&gt;Situational Leadership&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/competitive-advantage/&#34;&gt;Competitive Advantage&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/core-competency/&#34;&gt;Core Competency&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Business Process Management&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Knowing a thing or two about the mindset of someone on the &amp;ldquo;business&amp;rdquo; side of your company can be very valuable. That doesn&amp;rsquo;t mean you need to spend two years of your life getting a &lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba/&#34;&gt;MBA&lt;/a&gt; to learn about this (but don&amp;rsquo;t let me stop you).&lt;/p&gt;&lt;p&gt;This post won&amp;rsquo;t be about accounting, marketing, entrepreneurship, or making quarterly revenue projections. Instead, it will focus on a concept I learned in business school that helps me in my day-to-day as a developer.&lt;/p&gt;&lt;h2 id=&#34;business-process&#34;&gt;Business Process &lt;a href=&#34;#business-process&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Companies run by following repeated steps to produce a given output. Some companies are more explicit at defining and recognizing these activities than others. If you look hard enough - you&amp;rsquo;ll find them.&lt;/p&gt;&lt;p&gt;Dr. Thomas Davenport &lt;a href=&#34;https://books.google.com/books?id=kLlIOMGaKnsC&amp;amp;lpg=PP1&amp;amp;pg=PA5#v=onepage&amp;amp;q&amp;amp;f=false&#34;&gt;defines a process&lt;/a&gt; as:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;a structured, measured set of activities designed to produce a specific output.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;As software developers, we translate these processes into systemic rules or features.&lt;/p&gt;&lt;h2 id=&#34;business-process-management&#34;&gt;Business Process Management &lt;a href=&#34;#business-process-management&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;People need to tend to these processes. The processes must serve the needs of the organization in the best possible way. The person completing the steps may be responsible for that. There may be a separate team to optimize the work that the operational team is conducting.&lt;/p&gt;&lt;p&gt;The Association of Business Process Management &lt;a href=&#34;https://www.abpmp.org/page/BPM_Profession&#34;&gt;states&lt;/a&gt; that Business Process Management&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;enables an enterprise to align its business processes to its business strategy.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Manage and deliver iterative improvements of a &lt;a href=&#34;https://www.bpminstitute.org/resources/articles/what-bpm-anyway-business-process-management-explained&#34;&gt;business process&lt;/a&gt; with the following steps:&lt;/p&gt;&lt;h3 id=&#34;design&#34;&gt;Design &lt;a href=&#34;#design&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The design step must start with documenting the existing process. Observe the current activities taken to achieve the goal. Write those steps down without alteration. Stopping here still has value to the organization. It may lead to greater standardization. It may be easier to hire and train new people. It can improve transparency, visibility, and awareness in the organization.&lt;/p&gt;&lt;p&gt;The design phase goes one step further. Propose an incremental improvement to the current state. This may be a new activity that wasn&amp;rsquo;t done before. It may be removing steps of the process. It could be changing the number of people or who the people are that complete the work. The change must meet the process goals and the team&amp;rsquo;s challenges with the current process.&lt;/p&gt;&lt;h3 id=&#34;model&#34;&gt;Model &lt;a href=&#34;#model&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In this phase, test the designed future improvement before making the change. Seek to determine with greater confidence that it will improve the process. Conduct various &amp;ldquo;what if&amp;rdquo; analyses to attempt to validate that the change is a good fit before enacting it. For processes that resemble assembly line production, statistical software can predict quantitative results.&lt;/p&gt;&lt;h3 id=&#34;execute&#34;&gt;Execute &lt;a href=&#34;#execute&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now that you have some evidence that this change will be beneficial - do it! However, don&amp;rsquo;t do more than is necessary to prove efficacy of the process change. This may mean implementing these changes as &amp;ldquo;manual&amp;rdquo; workarounds first. Invest the resources to automate the change or codify it in the system in a future iteration.&lt;/p&gt;&lt;p&gt;Take an approach that yields the signal to confirm the change is having the affect you want with minimal disruption to your business. In software development, this may look like an incremental roll-out. The process change starts with a pilot program. After that, incrementally introduce it to more and more of the population that interacts with the process.&lt;/p&gt;&lt;h3 id=&#34;monitor&#34;&gt;Monitor &lt;a href=&#34;#monitor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It&amp;rsquo;s not enough to make the change. Now we need to verify that it&amp;rsquo;s having the affect we want. Should we continue the incremental roll-out approach we&amp;rsquo;re taking? Should we should roll the change back? To know, we must track and report on key performance indicators (KPIs) previously defined. We will observe the actual impact of the change to ensure that it is meeting the anticipated goals.&lt;/p&gt;&lt;h3 id=&#34;optimize&#34;&gt;Optimize &lt;a href=&#34;#optimize&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now that we&amp;rsquo;ve introduced a change and verified it&amp;rsquo;s benefiting the process, it&amp;rsquo;s time to start all over again. Business Process Management is an exercise in continuous improvement. Identify the next bottleneck to address and design a proposed a solution to alleviate it.&lt;/p&gt;&lt;h3 id=&#34;developing-business-processes&#34;&gt;Developing Business Processes &lt;a href=&#34;#developing-business-processes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Much of our work as software developers involves managing processes. Some of us are constantly working to optimize our individual workflow. That magical keyboard shortcut, or the custom alias, that&amp;rsquo;ll save you precious seconds of typing over the course of your entire career? That&amp;rsquo;s improving your personal business processes.&lt;/p&gt;&lt;p&gt;Our feature delivery work focuses on business process management. We may be automating a &amp;ldquo;manual&amp;rdquo; process. We may be changing an existing flow in our application to make it better for users. We may be lovingly putting a spreadsheet on the Internet. In all those cases, we need to consider business process management steps. Using this framework will ensure the changes we&amp;rsquo;re making are having the impact we desire.&lt;/p&gt;&lt;p&gt;When building computer systems that didn&amp;rsquo;t exist before, we need to consider if the context change should affect the process. It may not make sense to recreate the existing process when using a computer to manage it. The team may need to &lt;a href=&#34;https://hbr.org/1990/07/reengineering-work-dont-automate-obliterate&#34;&gt;re-engineer&lt;/a&gt; the process, re-imagining it from the ground-up.&lt;/p&gt;&lt;p&gt;Whether incrementally changing business processes, or re-engineering them, don&amp;rsquo;t forget that we design systems and software for humans. Ensure that the ultimate focus is not on solving the optimization problem. Consider the impact and consequences of the work we do, both for users of the system and those impacted by the decisions made by the system.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Core Competency: A Developer&#39;s Business</title>
       <link>https://kevinjmurphy.com/posts/core-competency/</link>
       <pubDate>Mon, 14 Feb 2022 07:19:33 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/core-competency/</guid>
       <description>&lt;h2 id=&#34;a-developers-business&#34;&gt;A Developer&amp;rsquo;s Business &lt;a href=&#34;#a-developers-business&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/situational-leadership/&#34;&gt;Situational Leadership&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/competitive-advantage/&#34;&gt;Competitive Advantage&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Core Competency&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/business-process-management/&#34;&gt;Business Process Management&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Knowing a thing or two about the mindset of someone on the &amp;ldquo;business&amp;rdquo; side of your company can be very valuable. That doesn&amp;rsquo;t mean you need to spend two years of your life getting a &lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba/&#34;&gt;MBA&lt;/a&gt; to learn about this (but don&amp;rsquo;t let me stop you).&lt;/p&gt;&lt;p&gt;This post won&amp;rsquo;t be about accounting, marketing, entrepreneurship, or making quarterly revenue projections. Instead, it will focus on a concept I learned in business school that helps me in my day-to-day as a developer.&lt;/p&gt;&lt;h2 id=&#34;core-competency&#34;&gt;Core Competency &lt;a href=&#34;#core-competency&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A firm&amp;rsquo;s &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-662-41482-8_46&#34;&gt;core competencies&lt;/a&gt; are the specific qualities or characteristics driving its success. A core competency must meet the following criteria:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Provides access to various markets.&lt;/li&gt;&lt;li&gt;Contributes to perceived customer benefit.&lt;/li&gt;&lt;li&gt;Difficult for competitors to imitate.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This is &lt;a href=&#34;https://www.techtarget.com/searchcio/definition/core-competency#:~:text=what%20it%20can%20do%20better%20than%20any%20other&#34;&gt;often&lt;/a&gt; referred &lt;a href=&#34;https://www.investopedia.com/terms/c/core_competencies.asp#:~:text=what%20it%20can%20do%20better%20than%20anyone%20else&#34;&gt;to&lt;/a&gt; as what the organization can do better than any other group. After identifying a core competency, invest in it to achieve and keep that advantage. Focus more on improving core competencies and less on other areas of the business.&lt;/p&gt;&lt;h2 id=&#34;developing-core-competencies&#34;&gt;Developing Core Competencies &lt;a href=&#34;#developing-core-competencies&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Knowing your company&amp;rsquo;s core competencies helps to answer your next build or buy or borrow conundrum. Developers face this when deciding &lt;em&gt;how&lt;/em&gt; to build a feature.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll consider upcoming features from our &lt;a href=&#34;https://kevinjmurphy.com/posts/competitive-advantage/#competitive-advantage&#34;&gt;previously mentioned&lt;/a&gt; blogging platform for medical professionals. Keeping an eye on our core competencies, let&amp;rsquo;s decide how to deliver changes to our comment system.&lt;/p&gt;&lt;h2 id=&#34;build&#34;&gt;Build &lt;a href=&#34;#build&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our last article introduced a comment moderation system to automatically flag HIPAA violations. We delivered that knowing we&amp;rsquo;re &lt;a href=&#34;https://kevinjmurphy.com/posts/competitive-advantage/#focus&#34;&gt;focusing&lt;/a&gt; on the medical market. That feature allows us to stand out in the marketplace. The innovative functionality can be a core competency of the firm. As such, we should be building all the work related to that feature in-house.&lt;/p&gt;&lt;p&gt;Our developers need a keen understanding of HIPAA violations, or how to identify them. Anything we can invest to build up that knowledge we should. It has immense value by making it available to customers through our product. Developers improving the functionality of HIPAA violation identification is of critical importance. The more time they can spend focusing on that, the better this unique capability will be.&lt;/p&gt;&lt;h2 id=&#34;buy&#34;&gt;Buy &lt;a href=&#34;#buy&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We won&amp;rsquo;t get far only having &lt;strong&gt;one&lt;/strong&gt; feature in our comment system. To drive re-engagement, we want to send emails to authors when someone comments on a post. We need a way to &lt;em&gt;send&lt;/em&gt; these emails to the authors. But, we want our developers focusing on HIPAA violations, not email delivery.&lt;/p&gt;&lt;p&gt;Email delivery is not a core competency of the company. We may not even want to know what a SMTP server is, never mind how to configure it. Luckily, there are other companies who &lt;em&gt;do&lt;/em&gt; have that as a core competency. We can engage in commerce! In exchange for some of our money, we can enjoy their knowledge of and expertise in email delivery.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;re best served paying a vendor to handle email delivery for us. We&amp;rsquo;ll access this capability from their API in our application. Their price is significantly less than what it would cost to build and maintain this functionality ourselves. Even if not, the opportunity cost of developers working on email delivery may be too great. That&amp;rsquo;s time they&amp;rsquo;re not improving the identification of HIPAA violations! We should buy this functionality. Our customers will receive emails, and our team can focus on our core competencies.&lt;/p&gt;&lt;h2 id=&#34;borrow&#34;&gt;Borrow &lt;a href=&#34;#borrow&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Blog posts on our platform are likely to be the talk of the town. We&amp;rsquo;ll generate a lot of conversation in the form of comments. Loading all those comments on initial page load will negatively affect page performance. Pages that are slow to load will be slow to generate further conversation and engagement. To mitigate the performance issue, we&amp;rsquo;re going to paginate the comments. A subset of comments will load at first, and readers will be able to request more comments by pressing a button.&lt;/p&gt;&lt;p&gt;Comment pagination is not a core competency of our organization. Even though it&amp;rsquo;s something we need to do, we&amp;rsquo;re not in the business of paginating comments. As such, like we learned from the last section, we should look to buy this capability. It turns out, there aren&amp;rsquo;t a lot of other companies that are in the business of paginating comments. Even if we wanted to give someone money to do this for us, there don&amp;rsquo;t seem to be many takers. Fortunately, as developers, we have another option.&lt;/p&gt;&lt;p&gt;We can use the kind work of open source developers who maintain pagination libraries. That will allow us to add this capability to our application with minimal work on our end. From a developer&amp;rsquo;s perspective, more considerations must go into &lt;a href=&#34;https://www.mikeperham.com/2016/02/09/kill-your-dependencies/&#34;&gt;adding a dependency&lt;/a&gt;. The same is true whether buying capabilities or pulling in a library. Strictly considering our core competency, adding the pagination library is a justifiable choice. Any opportunity we have to add capabilities while focusing on HIPAA violations is a win.&lt;/p&gt;&lt;h2 id=&#34;core-lesson&#34;&gt;Core Lesson &lt;a href=&#34;#core-lesson&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A company&amp;rsquo;s core competencies help it stand out in the marketplace. The same is true for you. What unique talents and skills do you bring to bear? How can you use them so that a company will reward you with a new job, title, or raise? Think about what your awesome qualities are and how you can leverage them.&lt;/p&gt;&lt;p&gt;For the final lesson in our series, we&amp;rsquo;ll discuss &lt;a href=&#34;https://kevinjmurphy.com/posts/business-process-management/&#34;&gt;business process management&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Competitive Advantage: A Developer&#39;s Business</title>
       <link>https://kevinjmurphy.com/posts/competitive-advantage/</link>
       <pubDate>Mon, 31 Jan 2022 07:19:33 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/competitive-advantage/</guid>
       <description>&lt;h2 id=&#34;a-developers-business&#34;&gt;A Developer&amp;rsquo;s Business &lt;a href=&#34;#a-developers-business&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/situational-leadership/&#34;&gt;Situational Leadership&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Competitive Advantage&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/core-competency/&#34;&gt;Core Competency&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/business-process-management/&#34;&gt;Business Process Management&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Knowing a thing or two about the mindset of someone on the &amp;ldquo;business&amp;rdquo; side of your company can be very valuable. That doesn&amp;rsquo;t mean you need to spend two years of your life getting a &lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba/&#34;&gt;MBA&lt;/a&gt; to learn about this (but don&amp;rsquo;t let me stop you).&lt;/p&gt;&lt;p&gt;This post won&amp;rsquo;t be about accounting, marketing, entrepreneurship, or making quarterly revenue projections. Instead, it will focus on a concept I learned in business school that helps me in my day-to-day as a developer.&lt;/p&gt;&lt;h2 id=&#34;competition&#34;&gt;Competition &lt;a href=&#34;#competition&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The work you do and the company you work for is bound to have other people or firms that do the same thing. Likely not in the same way, and likely not exact replicas - but they can serve the same purpose. You would need to exist in a very narrow niche of the market for that not to be true. Life isn&amp;rsquo;t, or doesn&amp;rsquo;t have to be, the adversarial match that the business world makes it out to be. But, the truth is that most of the time people and companies need to stand out in some way for a paycheck or customers.&lt;/p&gt;&lt;h2 id=&#34;competitive-advantage&#34;&gt;Competitive Advantage &lt;a href=&#34;#competitive-advantage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A firm&amp;rsquo;s &lt;a href=&#34;https://corporatefinanceinstitute.com/resources/knowledge/strategy/competitive-advantage/&#34;&gt;competitive advantage&lt;/a&gt; allows it to flourish against competitors. There are three general competitive &lt;a href=&#34;https://www.ifm.eng.cam.ac.uk/research/dstools/porters-generic-competitive-strategies/&#34;&gt;strategies&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cost.&lt;/li&gt;&lt;li&gt;Differentiation.&lt;/li&gt;&lt;li&gt;Focus.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To explore these different strategies, let&amp;rsquo;s imagine we&amp;rsquo;re going into business together. You and I are going to build the next great blogging platform. We&amp;rsquo;ll make it a success by using each of these competitive advantage strategies.&lt;/p&gt;&lt;h3 id=&#34;cost&#34;&gt;Cost &lt;a href=&#34;#cost&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Cost competitive advantage is about being the cheapest option; cheaper than other competitors. A cost strategy is easy to replicate. Once you find out what your competitors charge, you charge less than that. Congratulations, you have utilized the cost competitive advantage strategy in the market! That said, this strategy is difficult to maintain long-term success. Unfortunately, to stay in business, you can&amp;rsquo;t only sell the most things. You also need to make a profit on those sales.&lt;/p&gt;&lt;p&gt;Staying in business using the cost strategy is the more difficult part of the equation. To keep it up, complete the work in less time or with fewer resources than others need. Proprietary technology or exclusive access to special materials can also make this sustainable. Some operational efficiency compared to the rest of the market must exist.&lt;/p&gt;&lt;p&gt;Using a cost strategy alone to gain a foothold in the blogging market would be difficult. You can blog for &lt;em&gt;free&lt;/em&gt; on a lot of platforms today. We &lt;em&gt;could&lt;/em&gt; &lt;strong&gt;pay&lt;/strong&gt; people to use our service, rather than  &lt;strong&gt;charge&lt;/strong&gt; them. Maintaining that over the long term would be particularly difficult while remaining solvent.&lt;/p&gt;&lt;h3 id=&#34;differentiation&#34;&gt;Differentiation &lt;a href=&#34;#differentiation&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Winning in the blogging space on cost will be a difficult choice. Instead, let&amp;rsquo;s try meeting the needs of bloggers in ways competitors don&amp;rsquo;t. This may mean having a higher quality offering that&amp;rsquo;s valuable to users. We may introduce innovative products or services that our competitors don&amp;rsquo;t have. We may be able to turn around the output of using our service faster than others. Our product may not be better in any way; but we&amp;rsquo;ll lean heavily into marketing. When people hear &amp;ldquo;blogging&amp;rdquo;, they&amp;rsquo;ll think of us. Each of these choices would be using a differentiation strategy to attract customers.&lt;/p&gt;&lt;p&gt;Our blogging platform could offer a concierge service for new customers. We migrate their existing content to our platform by hand, ourselves. We could offer to ghost-write their first five blogs. Their personal concierge can sit with them to provide a tour of all the features of our software. Other companies may not provide that level of service. Some customers may be willing to pay for that extra attention. Our differentiated offering will make us an attractive choice for that customer.&lt;/p&gt;&lt;h3 id=&#34;focus&#34;&gt;Focus &lt;a href=&#34;#focus&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;With a focus strategy, we&amp;rsquo;re going to find a tailored niche to dedicate our efforts towards. We&amp;rsquo;ll find a narrowly-targeted market segment and design to their needs. Our features and services will cater to that audience exclusively.&lt;/p&gt;&lt;p&gt;We won&amp;rsquo;t try to be the best blogging platform for all bloggers. Instead, we&amp;rsquo;ll target customers writing about medical care. That&amp;rsquo;s still a large audience. Academic researchers, hospitals, drug companies, insurers, private practice doctors, nursing staff, and more would be potential customers. We may choose to focus even more narrowly on one of those personas.&lt;/p&gt;&lt;p&gt;With that focus, we&amp;rsquo;ll build a comment moderation system for their needs. It&amp;rsquo;ll automatically flag potential HIPAA violations. That&amp;rsquo;s a feature sports bloggers aren&amp;rsquo;t too interested in. It&amp;rsquo;s unlikely we&amp;rsquo;ll entice them to become a customer with that. Yet, many people in the healthcare space may pay for help with HIPAA compliance.&lt;/p&gt;&lt;p&gt;That doesn&amp;rsquo;t mean that the sports blogger &lt;strong&gt;can&amp;rsquo;t&lt;/strong&gt; use our platform. We won&amp;rsquo;t build features purely to meet their needs though. You won&amp;rsquo;t find a plugin to scroll the scores of last night&amp;rsquo;s games on our platform. Our features and future development effort will meet the needs of medical bloggers.&lt;/p&gt;&lt;h2 id=&#34;developing-competitive-advantage&#34;&gt;Developing Competitive Advantage &lt;a href=&#34;#developing-competitive-advantage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that we know what competitive advantage &lt;em&gt;is&lt;/em&gt;, why should you care as a developer? You may not want to run your own company and need to stand out against competitors. You many not see yourself in a position to make strategic decisions for a company or a department. Even so, you &lt;em&gt;will&lt;/em&gt; work with people that &lt;strong&gt;do&lt;/strong&gt; have that responsibility. Part of your job is to help them gain the company&amp;rsquo;s desired competitive advantage.&lt;/p&gt;&lt;p&gt;Do you know what your company&amp;rsquo;s stated, or intended, advantage is? That will help you propose new initiatives, knowing it&amp;rsquo;s aligned with company strategy. It can inform how your team builds its next feature. Given our focus, we can frame our design reviews to make sure features add value for medical bloggers.&lt;/p&gt;&lt;p&gt;You should also consider your personal competitive advantage strategy compared to other developers. That may sound obvious if you&amp;rsquo;re looking for a new job. It&amp;rsquo;s also important when asking for a promotion, or solidifying your performance review. The labor market now (early 2022) has a limited supply of developers, compared to job openings. Even so, the number of developers looking or interested in jobs is likely more than only &lt;strong&gt;you&lt;/strong&gt;. What&amp;rsquo;s your strategy to set yourself apart?&lt;/p&gt;&lt;p&gt;Competitive advantage feeds in nicely to our next topic: &lt;a href=&#34;https://kevinjmurphy.com/posts/core-competency/&#34;&gt;core competency&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Situational Leadership: A Developer&#39;s Business</title>
       <link>https://kevinjmurphy.com/posts/situational-leadership/</link>
       <pubDate>Mon, 17 Jan 2022 07:25:00 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/situational-leadership/</guid>
       <description>&lt;h2 id=&#34;a-developers-business&#34;&gt;A Developer&amp;rsquo;s Business &lt;a href=&#34;#a-developers-business&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Situational Leadership&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/competitive-advantage/&#34;&gt;Competitive Advantage&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/core-competency/&#34;&gt;Core Competency&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/business-process-management/&#34;&gt;Business Process Management&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Knowing a thing or two about the mindset of someone on the &amp;ldquo;business&amp;rdquo; side of your company can be very valuable. That doesn&amp;rsquo;t mean you need to spend two years of your life getting a &lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba/&#34;&gt;MBA&lt;/a&gt; to learn about this (but don&amp;rsquo;t let me stop you).&lt;/p&gt;&lt;p&gt;This post won&amp;rsquo;t be about accounting, marketing, entrepreneurship, or making quarterly revenue projections. Instead, it will focus on a concept I learned in business school that helps me in my day-to-day as a developer.&lt;/p&gt;&lt;h2 id=&#34;leadership&#34;&gt;Leadership &lt;a href=&#34;#leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I know, you&amp;rsquo;re a developer. You want to write code, not lead people. You&amp;rsquo;re nota manager and maybe you&amp;rsquo;re not in a &amp;ldquo;leadership&amp;rdquo; position as an individualcontributor either. However, for the betterment of yourself and your team, ithelps to study leadership.&lt;/p&gt;&lt;p&gt;Presumably you have people leading you. It can help to knowhow they think about different situations, or what training they might have attheir disposal. You may not do the leading, but wouldn&amp;rsquo;t it be great if youcould help your leadership by letting them know what they could do to bestsupport you?&lt;/p&gt;&lt;p&gt;Even without the &amp;ldquo;right&amp;rdquo; title, everyone in a team still has opportunities tolead. It can mean ownership over a piece of functionality. It can be assistingnew members of your team acclimate to your codebase or processes. It can comein when mentoring other people on your team, formally or not. Situations topractice leadership skills are likely frequently presenting themselves to you.You may be doing it without thinking about it or knowing it!&lt;/p&gt;&lt;p&gt;One model of leadership that I find valuable to keep in mind is SituationalLeadership. Let&amp;rsquo;s learn what it is and talk about how we can use it in our jobsas developers.&lt;/p&gt;&lt;h2 id=&#34;situational-leadership&#34;&gt;Situational Leadership &lt;a href=&#34;#situational-leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Situational_leadership_theory&#34;&gt;Situational Leadership Model&lt;/a&gt; posits that there are four different styles ofleadership.&lt;/p&gt;&lt;h3 id=&#34;directing&#34;&gt;Directing &lt;a href=&#34;#directing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In the directing style, the leader provides close, detailed supervision withclear instructions and expectations. The team&amp;rsquo;s role in this style is inexecuting the task. This style is effective when someone is unfamiliar with thework, or needs to be retrained on an activity. Crises and emergencies are otherplaces where the directing style may be necessary.&lt;/p&gt;&lt;h3 id=&#34;coaching&#34;&gt;Coaching &lt;a href=&#34;#coaching&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A leader using the coaching style still has ownership over the decision-makingprocess, much like in the directing style. However, more of their time should bespent getting buy-in from the team on why decisions are made the way they are.Employ this approach when the team is comfortable with the individual mechanicsof performing the tasks, can provide input on the process, and can be motivatedby understanding the goal or end-state that performing the work should deliver.&lt;/p&gt;&lt;h3 id=&#34;supporting&#34;&gt;Supporting &lt;a href=&#34;#supporting&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;With the supporting style, ownership on decision-making is shifted from theleader and moved to the team. The leader&amp;rsquo;s role is to facilitate discussionwithin the team to reach decisions, to introduce them to the people and toolsthat will aid in their success, to be a sounding board as they make decisions,and to encourage them to take action on their own.&lt;/p&gt;&lt;h3 id=&#34;delegating&#34;&gt;Delegating &lt;a href=&#34;#delegating&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A leader using the delegating style provides and trusts the team with autonomyon day-to-day decision-making. The leader&amp;rsquo;s energy is focused on the overallvision and strategy for the organization they lead. They provide the team withthe tools to execute those high-level concepts and translate them into tacticaldecisions and tasks.&lt;/p&gt;&lt;h2 id=&#34;leading-situation-by-situation&#34;&gt;Leading Situation By Situation &lt;a href=&#34;#leading-situation-by-situation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A leader must be able to exhibit all of these styles. Otherwise, they&amp;rsquo;ll only beeffective in very specific scenarios with a very specific group of people at agiven time. The authors of this framework acknowledge that by &lt;a href=&#34;https://blogs.umass.edu/shabazz/2014/08/&#34;&gt;saying&lt;/a&gt; thatSituational Leadership is about&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Choosing the right leadership style for the right people.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In order to determine which style to use at a given time, consider how muchrelationship and task behavior is required by the individual or team at themoment.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/situational-leadership.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;The more assistance a person needs in understanding the mechanisms neededto complete the work, the higher the amount of task behavior is needed. Themore the person needs to understand the background, or business value, of anitem of work, or help navigating the political or social pressures involved incompleting the work, the higher amount of relationship behavior the leader needsto provide.&lt;/p&gt;&lt;h2 id=&#34;sprint-planning-with-situational-leadership&#34;&gt;Sprint Planning With Situational Leadership &lt;a href=&#34;#sprint-planning-with-situational-leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One scenario where Situational Leadership can be helpful to us and our team asdevelopers is in Sprint Planning. When reviewing the units of work that we&amp;rsquo;repreparing to work on, we can identify what level of support and leadershippeople in the team will need to succeed in completing the tickets.&lt;/p&gt;&lt;p&gt;If you have a task where people have no familiarity with what is being asked ofthem and they&amp;rsquo;ll be working on it, then the &lt;em&gt;directing&lt;/em&gt; style may beappropriate. Make sure that the ticket has clearly defined instructions andacceptance criteria. Also, consider adding a second member of the team to theticket so they can pair and have someone else who will be directly accountablefor helping see the work through to completion.&lt;/p&gt;&lt;p&gt;The &lt;em&gt;coaching&lt;/em&gt; style may be used in supporting a teammate on a task where theyhave some understanding of the mechanics needed to complete the ticket. I findthis can be most effectively done when you can draw a parallel or analogy tosimilar work. Link to a branch, or a pull request, or a commit that&amp;rsquo;s similar,and explain how this ticket will be the same and different from what&amp;rsquo;s donethere. The person is still provided clear direction on what to do, but is givenmore room to complete it in their own way, with more information about &lt;strong&gt;why&lt;/strong&gt;something is done and how it&amp;rsquo;s similar to other work.&lt;/p&gt;&lt;p&gt;Use the &lt;em&gt;supporting&lt;/em&gt; style on a task that will be familiar to the person doingit. You may perhaps organize a quick chat with stakeholders to make sureeveryone is aligned and let this person ask any questions they might have. Checkin with the person individually to see what they need, find out if they want tobounce any ideas off of you, or if they have suggestions for what others can doto help them complete their work.&lt;/p&gt;&lt;p&gt;Is there a rote task or something done time after time that a team member isworking on? &lt;em&gt;Delegate&lt;/em&gt; the work to them entirely and allow them the space andrespect to get in there and execute on their own. However, if you are the persontaking on this rote task, or you identify that happening with someone else,consider speaking up to add someone else to the ticket as well so they can learnfrom your experience and get more familiar with the actions needed to completeit. It&amp;rsquo;s now your responsibility to help bring everyone else on the team up tospeed in your area of expertise, for the benefit of us all.&lt;/p&gt;&lt;h2 id=&#34;leading-to-a-conclusion&#34;&gt;Leading To A Conclusion &lt;a href=&#34;#leading-to-a-conclusion&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Exercising leadership skills is something we can all find opportunities topractice, regardless of our expertise, title, or role in our teams. SituationalLeadership is a framework you can use to consider what concrete actions you canmodel in a given scenario to provide the most effective leadership for yourselfand your team.&lt;/p&gt;&lt;p&gt;Now that we&amp;rsquo;ve covered leadership, let&amp;rsquo;s explore your company&amp;rsquo;s &lt;a href=&#34;https://kevinjmurphy.com/posts/competitive-advantage/&#34;&gt;competitive advantage&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>2021 Year-End Review</title>
       <link>https://kevinjmurphy.com/posts/2021-review/</link>
       <pubDate>Mon, 13 Dec 2021 17:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/2021-review/</guid>
       <description>&lt;p&gt;This isn&amp;rsquo;t a &amp;ldquo;real&amp;rdquo; post. This is a summary of all the things that made up myyear in 2021. Thanks to all that were a part of it.&lt;/p&gt;&lt;h2 id=&#34;writing&#34;&gt;Writing &lt;a href=&#34;#writing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I published 15 articles about Ruby or software development in general this year. I started the year sharing how to cache &lt;a href=&#34;https://kevinjmurphy.com/posts/caching-all-native-gem-platforms/&#34;&gt;native Ruby gems&lt;/a&gt;. That post ended up in Nokogiri&amp;rsquo;s &lt;a href=&#34;https://nokogiri.org/tutorials/installing_nokogiri.html#using-vendorcache-to-deploy-to-another-architecture&#34;&gt;docs&lt;/a&gt;, which was an &lt;a href=&#34;https://kevinjmurphy.com/posts/nokogiri-notoriety/&#34;&gt;exciting surprise&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I ended the year writing about what&amp;rsquo;s special with &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-setter-return-value/&#34;&gt;setter methods&lt;/a&gt; in Ruby. In between, I&amp;rsquo;ve written about &lt;a href=&#34;https://kevinjmurphy.com/posts/rubys-got-you-covered/&#34;&gt;coverage&lt;/a&gt;, &lt;a href=&#34;https://kevinjmurphy.com/posts/remote-ruby-143/&#34;&gt;best practices&lt;/a&gt;, &lt;a href=&#34;https://kevinjmurphy.com/posts/to-change-or-not-to-change/&#34;&gt;evaluating alternatives&lt;/a&gt;, and a handful of &lt;a href=&#34;https://kevinjmurphy.com/tags/ruby/&#34;&gt;Ruby&lt;/a&gt; and &lt;a href=&#34;https://kevinjmurphy.com/tags/rails/&#34;&gt;Rails&lt;/a&gt; topics.&lt;/p&gt;&lt;p&gt;I drastically increased my public writing in 2021, and it&amp;rsquo;s coincided with thefirst year I&amp;rsquo;m aware of people sharing my work. I already mentioned being inNokogiri&amp;rsquo;s docs. I&amp;rsquo;ve also had my writing featured in &lt;a href=&#34;https://rubyweekly.com/&#34;&gt;Ruby Weekly&lt;/a&gt; &lt;strong&gt;ten&lt;/strong&gt; times,&lt;a href=&#34;https://rubyradar.dev/&#34;&gt;Ruby Radar&lt;/a&gt; &lt;strong&gt;six&lt;/strong&gt; times, and &lt;a href=&#34;https://ruby.libhunt.com/&#34;&gt;Awesome Ruby&lt;/a&gt; once in 2021.&lt;/p&gt;&lt;h2 id=&#34;speaking&#34;&gt;Speaking &lt;a href=&#34;#speaking&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As of this post&amp;rsquo;s publication, I&amp;rsquo;m still not comfortable meeting in person(hopefully that changes in time for RailsConf 2022), but I enjoy speaking, so Idid my best to take part in virtual conferences I was aware of. I submitted sixproposals to three conferences (yes, you can submit multiple proposals toconferences!) that had a virtual component, and was accepted to one.&lt;/p&gt;&lt;p&gt;At RailsConf 2021, I shared the parts of a &lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba/&#34;&gt;MBA curriculum&lt;/a&gt; that I find valuableto me as a software developer.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6ldCGo29w5g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;One benefit of virtual events meant that I was able to speak with differentregional groups without needing to travel. This year, I presented to groups in:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/Phillyrb&#34;&gt;Philadelphia&lt;/a&gt; (twice!)&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/ChicagoRuby&#34;&gt;Chicago&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/bostonrb&#34;&gt;Boston&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/columbusrb&#34;&gt;Columbus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/nashrb&#34;&gt;Nashville&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://lrug.org/&#34;&gt;London&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Hopefully in future years I&amp;rsquo;ll be able to get to these areas in person, but fornow, I&amp;rsquo;m thankful to the organizers for allowing me to participate in theirvirtual events.&lt;/p&gt;&lt;p&gt;Lastly, I was invited as a podcast guest for the first time in 2021. I joinedRails with Jason (now Code with Jason) to talk neither Rails nor code; we&lt;a href=&#34;https://www.codewithjason.com/podcast/9478219-096-engineering-mba-with-kevin-murphy/&#34;&gt;discussed&lt;/a&gt;the skills I learned in a MBA program that are helpful to me as a softwaredeveloper. Later in the year, I was on Remote Ruby to &lt;a href=&#34;https://remoteruby.transistor.fm/143&#34;&gt;talk&lt;/a&gt;about best practices, and when they might not be the best.&lt;/p&gt;&lt;h2 id=&#34;reading&#34;&gt;Reading &lt;a href=&#34;#reading&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For the first time, I was a technical reviewer for a book. Twice, in fact! I wasprivileged to get an early peek and provide feedback on Noel Rappin&amp;rsquo;s two books.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://pragprog.com/titles/nrclient/modern-front-end-development-for-rails/&#34;&gt;Modern Front-End Development for Rails&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://pragprog.com/titles/tailwind/modern-css-with-tailwind/&#34;&gt;Modern CSS with Tailwind&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It was an unexpected, and weird, experience to receive final copies in the mailand see that my words (in the form of a blurb) are the first you read in eachbook. Don&amp;rsquo;t let that deter you though - each book gets better after that.&lt;/p&gt;&lt;h2 id=&#34;employer&#34;&gt;Employer &lt;a href=&#34;#employer&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After five years with &lt;a href=&#34;https://www.thegnar.com/&#34;&gt;The Gnar Company&lt;/a&gt;, I started aposition at &lt;a href=&#34;https://www.vendr.com/&#34;&gt;Vendr&lt;/a&gt; towards the end of this year. I&amp;rsquo;mthankful to all my teammates at both companies for being great collaborators.&lt;/p&gt;&lt;h2 id=&#34;personal&#34;&gt;Personal &lt;a href=&#34;#personal&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;2021 was a hard year personally, for reasons that were shared by most this year,and for other reasons that aren&amp;rsquo;t unique to me but just happened to occur thisyear. That&amp;rsquo;s all I have to say about that here, but let&amp;rsquo;s talk aboutthings that helped this year.&lt;/p&gt;&lt;h3 id=&#34;new-to-me-in-2021&#34;&gt;New (to me) in 2021 &lt;a href=&#34;#new-to-me-in-2021&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While a healthy dose of known comforts and familiar music played no small partin my year, here are the things I encountered for the first time that helped getme through 2021.&lt;/p&gt;&lt;h4 id=&#34;covid-19-vaccine&#34;&gt;COVID 19 Vaccine &lt;a href=&#34;#covid-19-vaccine&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If you are in an area where you&amp;rsquo;re eligible and able to get a COVID vaccine, Iencourage you to do so. For yourself. For me. For all of us. In the US, you canfind a place to do that &lt;a href=&#34;https://www.vaccines.gov/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h4 id=&#34;taskmaster&#34;&gt;Taskmaster &lt;a href=&#34;#taskmaster&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I&amp;rsquo;m a year late on this compared to everyone else in the US who discovered thison &lt;a href=&#34;https://www.youtube.com/c/Taskmaster&#34;&gt;YouTube&lt;/a&gt;, but maybe it&amp;rsquo;s better thatI had it saved for 2021. It&amp;rsquo;s a British panel game show where contestantscompete for the best completion of various &amp;ldquo;tasks&amp;rdquo;, making fun of themselves andeach other in the process.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7b9psaoeL-M&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h4 id=&#34;if-i-cant-have-love-i-want-power&#34;&gt;If I Can’t Have Love, I Want Power &lt;a href=&#34;#if-i-cant-have-love-i-want-power&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I know, I&amp;rsquo;m entirely predictable. Anything Trent Reznor is involved with I&amp;rsquo;mobligated to devour. That said, Halsey&amp;rsquo;s latest album is so powerful, layered,and enjoyable, that I&amp;rsquo;m sure if I were a Spotify user, it would be my mostplayed album of the year.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6E5s-KEKO3Q&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h4 id=&#34;broken-in-the-best-possible-way&#34;&gt;Broken (in the best possible way) &lt;a href=&#34;#broken-in-the-best-possible-way&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I&amp;rsquo;m no stranger to Jenny Lawson&amp;rsquo;s writing, and her latest from this year isanother of my favorites. Her bravery, irreverence, and humor are perfectlymatched with my sensibilities. Plus, you can order it online from her very ownphysical &lt;a href=&#34;https://www.nowherebookshop.com/book/9781250077035&#34;&gt;bookstore&lt;/a&gt; andget a signed copy.&lt;/p&gt;&lt;h4 id=&#34;john-5&#34;&gt;John 5 &lt;a href=&#34;#john-5&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This isn&amp;rsquo;t necessarily new (though he does have a new album that came out &lt;a href=&#34;https://john-5.com/main/discography/sinner-2021/&#34;&gt;thisyear&lt;/a&gt;), but I dug into hisentire catalogue this year. He&amp;rsquo;s a session guitarist clearly capable of playing&lt;a href=&#34;https://youtu.be/ayB-ir-NHb4&#34;&gt;any guitar in any style&lt;/a&gt;, but whose personal workmainly focuses on metal shredding (with a touch of bluegrass), all on aTelecaster.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/uxBwmY5NW-g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;looking-forward&#34;&gt;Looking Forward &lt;a href=&#34;#looking-forward&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;What am I hoping for in 2022?&lt;/p&gt;&lt;h3 id=&#34;further-engaging-with-the-ruby-and-developer-community&#34;&gt;Further engaging with the Ruby and developer community &lt;a href=&#34;#further-engaging-with-the-ruby-and-developer-community&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you have a podcast that you think I might be a good guest on, if you run aregional meetup looking for speakers, if you have a conference that I could be afit for, if you run a publication that features content I might write, if youhave an affinity group I can help out with, or if you&amp;rsquo;d just like to meet,please reach out.&lt;/p&gt;&lt;h3 id=&#34;covid-vaccines-available-to-children-under-5&#34;&gt;COVID vaccines available to children under 5 &lt;a href=&#34;#covid-vaccines-available-to-children-under-5&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can&amp;rsquo;t rush science, but I look forward to having a fully-vaccinated house.&lt;/p&gt;&lt;h3 id=&#34;bruce-springsteens-no-nukes-concert&#34;&gt;Bruce Springsteen&amp;rsquo;s No Nukes Concert &lt;a href=&#34;#bruce-springsteens-no-nukes-concert&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This won&amp;rsquo;t be new in 2022 - it&amp;rsquo;s from 1979 - and it&amp;rsquo;s available &lt;strong&gt;now&lt;/strong&gt;, but Ihave it on my Christmas list, so it may not be until 2022 that I can take inthis bit of history from the E Street Band.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LzsAPhGpMkA&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;thank-you&#34;&gt;Thank You &lt;a href=&#34;#thank-you&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you made it this far, I have to believe this isn&amp;rsquo;t your first introduction tome and you&amp;rsquo;re a repeat reader. Thank you for doing that this year, and I hopeyou continue to track my work in the future. It&amp;rsquo;s been a great joy to see peopleinteracting with things I produced this year, so if you&amp;rsquo;ve liked anything Iput out this year, please, let me know - and thanks!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Setter Method Return Values In Ruby</title>
       <link>https://kevinjmurphy.com/posts/ruby-setter-return-value/</link>
       <pubDate>Wed, 17 Nov 2021 19:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-setter-return-value/</guid>
       <description>&lt;h2 id=&#34;can-i-take-your-order&#34;&gt;Can I Take Your Order? &lt;a href=&#34;#can-i-take-your-order&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;re opening a brand new diner, and each customer can have their current orderset, which will add to their list of orders.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Customer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:orders&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @orders &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_order&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @orders&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(new_order)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @orders &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; new_order&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thank you for being our valued customer&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because customer service is our top priority, we provide a message wheneverthey place an order reminding them how lucky we feel to be serving themtheir meal.&lt;/p&gt;&lt;h2 id=&#34;negative-reviews&#34;&gt;Negative Reviews &lt;a href=&#34;#negative-reviews&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After our soft opening, we&amp;rsquo;re excited to read everyone&amp;rsquo;s favorable commentsabout their food. However, we&amp;rsquo;re getting slammed with badreviews about our curt interactions with customers when they place an order. Wewent out of our way to modify the setter&amp;rsquo;s return value to give a specialmessage; what&amp;rsquo;s wrong?&lt;/p&gt;&lt;h2 id=&#34;mystery-shopper&#34;&gt;Mystery Shopper &lt;a href=&#34;#mystery-shopper&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In order to get to the bottom of this, we put on our fake mustache and glassesto go undercover at our own restaurant. What we find &lt;strong&gt;shocks us&lt;/strong&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; definitely_not_the_owner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Customer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; definitely_not_the_owner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_order &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pancakes&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pancakes&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s not the welcoming experience we explicitly developed! We shouldn&amp;rsquo;t bebarking back their order in a matter of fact way; we should be thanking them.Something surprising is happening here; now we need to find what it is.&lt;/p&gt;&lt;h2 id=&#34;training-manual&#34;&gt;Training Manual &lt;a href=&#34;#training-manual&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our method is explicit about what the return value should be.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(new_order)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @orders &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; new_order&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thank you for being our valued customer&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We expect the last thing evaluated in the method to be what&amp;rsquo;s returned to thecaller. And that&amp;rsquo;s the case&amp;hellip;most of the time. After consulting Ruby&amp;rsquo;s&lt;a href=&#34;https://ruby-doc.org/core-3.0.1/doc/syntax/methods_rdoc.html#label-Return+Values&#34;&gt;documentation&lt;/a&gt;, we find an exception:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note that for assignment methods the return value will be ignored when using the assignment syntax. Instead, the argument will be returned&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is our exact case! Our setter method to set the current order is returningthe argument passed to it, and not the result of the last line. It&amp;rsquo;s beingcompletely ignored in favor of the argument.&lt;/p&gt;&lt;h2 id=&#34;demanding-exceptional-service&#34;&gt;Demanding Exceptional Service &lt;a href=&#34;#demanding-exceptional-service&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The documentation does provide a way in which customers can see our nice messagethough:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The actual return value will be returned when invoking the method directly&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So, while we cannot enforce it, if callers know the right way to ask, we&amp;rsquo;llthank them.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; customer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Customer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_order &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pancakes&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pancakes&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;public_send(&lt;span style=&#34;color:#e6db74&#34;&gt;:current_order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;french toast&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thank you for being our valued customer&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setting-the-table-for-next-time&#34;&gt;Setting The Table For Next Time &lt;a href=&#34;#setting-the-table-for-next-time&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby setter, or assignment, methods have a special understanding andexpectation for what they&amp;rsquo;ll return. This helps enforce a consistent API, butcan lead to surprising results when writing your own setter method.&lt;/p&gt;&lt;p&gt;Setter methods will return the argument passed to it, regardless of what thelast evaluated statement in the method is. Callers can receive the value of thelast statement if they call the method in a particular way; however, it would bevery unconventional to expect someone to do that.&lt;/p&gt;&lt;p&gt;In the case of our restaurant, that meant a pivoting in our branding. We startedpositioning ourselves as an outfit focused on intense efficiency and limitedcustomer interaction - with a secret message any customer in the know can passus to force a little more welcoming of a response with any new order.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Joining Vendr</title>
       <link>https://kevinjmurphy.com/posts/vendr-start/</link>
       <pubDate>Mon, 25 Oct 2021 07:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/vendr-start/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m happy to say that today is my first day as a member of &lt;a href=&#34;https://www.vendr.com/&#34;&gt;Vendr&lt;/a&gt;! I&amp;rsquo;m looking forward to meeting everyone. I&amp;rsquo;m excited to help the development team help everyone reduce the friction involved with buying SaaS products.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ruby&#39;s Got You Covered</title>
       <link>https://kevinjmurphy.com/posts/rubys-got-you-covered/</link>
       <pubDate>Thu, 21 Oct 2021 20:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubys-got-you-covered/</guid>
       <description>&lt;h2 id=&#34;coverage&#34;&gt;Coverage &lt;a href=&#34;#coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Perhaps you&amp;rsquo;ve heard of &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_coverage&#34;&gt;test coverage&lt;/a&gt;,which is a measurement of how much of your application code is executed whenyour tests run. That number is typically represented as a percentage, and peoplemay use that metric to assess the relative health of a codebase. The efficacy ofsuch metrics is &lt;a href=&#34;https://kevinjmurphy.com/posts/remote-ruby-143/&#34;&gt;debated&lt;/a&gt;, but the metrics arestill prevalent.&lt;/p&gt;&lt;p&gt;This article will demonstrate the mechanism ruby provides to measure coverageand present some examples for how to use it and is a summary of the informationI shared about coverage at &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EyLO0EEm3BQ&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;running-coverage&#34;&gt;Running Coverage &lt;a href=&#34;#running-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby ships with a &lt;a href=&#34;https://docs.ruby-lang.org/en/3.0.0/Coverage.html&#34;&gt;Coverage module&lt;/a&gt; as part of the language.To use it, you must first &lt;code&gt;require&lt;/code&gt; the module.&lt;/p&gt;&lt;p&gt;After doing that, you have access to &lt;code&gt;Coverage&lt;/code&gt;. Coverage begins running whenyou call the &lt;code&gt;start&lt;/code&gt; method. It then expects the file you want coverage to beassessed on to be &lt;code&gt;require&lt;/code&gt;d or &lt;code&gt;load&lt;/code&gt;ed. Finally, you can see coverage&amp;rsquo;s outputby calling &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, let&amp;rsquo;s say we&amp;rsquo;re all in a band and we&amp;rsquo;re practicing a new&lt;a href=&#34;https://youtu.be/_7Qk9MdyiOM&#34;&gt;cover song&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# rehearsal.rb&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;our_band &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Band&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blogger Band&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;song &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CoverMe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;song&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;original_artist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bruce Springsteen&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;song&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;band &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; our_band&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;song&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to run coverage on this file, we can do the following:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rehearsal.rb&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;coverage-modes&#34;&gt;Coverage Modes &lt;a href=&#34;#coverage-modes&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby&amp;rsquo;s coverage module has many modes, or different ways of assessing coverage.Each mode answers a different question about the code that was run under coverage:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lines - how many times was each line executed?&lt;/li&gt;&lt;li&gt;Oneshot Lines - which lines were executed?&lt;/li&gt;&lt;li&gt;Methods - how many times was each method executed?&lt;/li&gt;&lt;li&gt;Branches - how many times was each conditional executed?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can specify which modes to run by passing an argument to &lt;code&gt;Coverage.start&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&#34;lines-coverage&#34;&gt;Lines Coverage &lt;a href=&#34;#lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;lines&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the mode that runs if you do not pass any arguments to &lt;code&gt;Coverage.start&lt;/code&gt;.Each relevant line has a counter that is incremented each time the line isvisited in code execution while coverage is running. Irrelevant lines, thosethat are things like empty lines or &lt;code&gt;end&lt;/code&gt; statements, are ignored. At theconclusion, you will see how many times each line is executed.&lt;/p&gt;&lt;p&gt;Our guitarist wants to track how often they break a string during rehearsal. Astring is broken when the &lt;code&gt;@broken&lt;/code&gt; instance variable is set.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;break_string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @broken &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;BrokenStringSound&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Coverage&amp;rsquo;s result provides a hash, where the keys are all the files that wererun while coverage was running. Each value is a hash that has a key for themode(s) of coverage run.&lt;/p&gt;&lt;p&gt;For lines coverage, the value of that inner hash is an array showing how manytimes each line was executed. The integer at index 0 of this array shows howmany times line 1 was run.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string.rb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:lines&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;...]&lt;/span&gt;},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;nil&lt;/code&gt; represents an irrelevant line, in this case, an &lt;code&gt;end&lt;/code&gt; statement. Toanswer our question, we need to see how many times line 3 of the string file wasrun, which is index 2 in the array - and we see our guitarist broke 4 strings inone rehearsal.&lt;/p&gt;&lt;h3 id=&#34;oneshot-lines-coverage&#34;&gt;Oneshot Lines Coverage &lt;a href=&#34;#oneshot-lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;oneshot_lines&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to lines coverage, this also documents that a relevant line was executed while coverage was running. However, it’s a binary report of whether it was executed or not. It will not tell you how often. This may be sufficient in many cases, and comes with the benefit of being more performant every subsequent time a particular line of code is executed under coverage.&lt;/p&gt;&lt;p&gt;The drummer has a break in the song where they play a small fill.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Drum&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;small_fill&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bang_tom&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    roll_snare(&lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; extend_fill?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      hit_crash_cymbal&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    strike_ride_cymbal&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The band isn&amp;rsquo;t sure if the drummer is hitting the crash cymbal during the fill.To find out, they can use oneshot lines coverage, which will tell if the line ofcode is executed. They don&amp;rsquo;t care how many times; only if it ever happened.&lt;/p&gt;&lt;p&gt;The result looks similar to lines coverage:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drum.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:oneshot_lines&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;...]&lt;/span&gt;},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The values in the array are different from lines coverage though. Here, eachinteger in the array is a line number that was executed. Remember, oneshot lineswon&amp;rsquo;t tell you how many times a line was run. The order of elements does notmatter, unlike lines coverage.&lt;/p&gt;&lt;p&gt;In the case of our drum fill, 7 is in the array, which is the line number to hitthe crash cymbal, so the drummer is extending the fill.&lt;/p&gt;&lt;h3 id=&#34;methods-coverage&#34;&gt;Methods Coverage &lt;a href=&#34;#methods-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(methods: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Methods coverage brings the granularity of lines coverage up to a coarser grain. Rather than tracking individual lines, it’s concerned with whether a particular method is executed. It can be a 10 line method where the first line is the only line ever executed. Methods coverage will still consider that as executed the same as a 20 line method where each line is executed.&lt;/p&gt;&lt;p&gt;Now that our guitarist knows they break a lot of strings, they need to thin outthe gear they bring to gigs so they have more room in their bag for strings.They&amp;rsquo;re wondering which effects pedals they&amp;rsquo;re even using on their pedal board.They have a lot, and each of them responds to &lt;code&gt;trigger&lt;/code&gt;, which turns them offor on when you press them.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReverbPedal&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OverdrivePedal&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DelayPedal&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use methods coverage to see which of those pedals are being triggeredduring rehearsal.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reverb_pedal.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ReverbPedal&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:trigger&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;overdrive_pedal.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OverdrivePedal&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:trigger&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delay_pedal.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DelayPedal&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:trigger&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike the results we&amp;rsquo;ve seen thus far, this isn&amp;rsquo;t only returning an array inthe value of the mode hash. Instead, there&amp;rsquo;s another hash where the keyidentifies the method, and the value is the number of times the method isexecuted. Let&amp;rsquo;s dig into what each of the elements identifying a method are.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OverdrivePedal&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:trigger&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#       ^            ^      ^   ^   ^   ^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#       |            |      |   |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     Class          |      |   |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     Name           |      |   |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                  Method   |   |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                  Name     |   |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                           |   |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                         Start |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                         Line  |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                               |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                               |   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                             Start |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                             Column|   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                   |   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                  End  |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                  Line |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                       |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                       |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                      End&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                      Column&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To help our guitarist clean up their pedal board, we can see that the overdrivepedal isn&amp;rsquo;t used at all, and can be left at home next time.&lt;/p&gt;&lt;h3 id=&#34;branches-coverage&#34;&gt;Branches Coverage &lt;a href=&#34;#branches-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;branches&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Branches Coverage tracks execution of different conditional paths and documents how often those different paths are run. The unique benefit that this provides over lines coverage is in conditionals that execute multiple code paths in a single line, such as ternary statements. You may have a part of that conditional that’s never run or tested, but you would not know that if you’re relying on lines coverage alone.&lt;/p&gt;&lt;p&gt;Our singer wants to use an echo effect during the song, and has a friend settingthe intensity as they practice.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CoverMe&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chorus&lt;/span&gt;(number)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo_intensity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;positive? &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;even? ? &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Lyric&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;line&lt;/span&gt;: line, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:echo&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;effect_level&lt;/span&gt;: echo_intensity)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During one run-through of the song, they&amp;rsquo;re happy with the effect and want tocheck how often they used each intensity. Because this is expressed as aternary, we &lt;strong&gt;can&amp;rsquo;t&lt;/strong&gt; use lines coverage. We could use it if the method werestructured like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chorus&lt;/span&gt;(number)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo_intensity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;positive? &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;even?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, in either case, we &lt;em&gt;can&lt;/em&gt; use branches coverage to see which of thedifferent branches were followed.&lt;/p&gt;&lt;p&gt;The output of branches coverage looks similar to that of methods coverage.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cover_me.rb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:branches&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:if&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:then&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The differences from methods coverage are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Branches coverage nests each branch within its conditional, so the datastructure is nested one level deeper than methods coverage.&lt;/li&gt;&lt;li&gt;Branches coverage assigns a unique identifier to each conditional or branch.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let&amp;rsquo;s look at what each of the elements identifying a branch are.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:then&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   ^    ^   ^    ^    ^    ^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   |    |   |    |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Branch |   |    |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        |   |    |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        Id  |    |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#            |    |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#            |    |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#          Start  |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#          Line   |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                 |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                 |    |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#               Start  |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#               Column |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                      |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                      |    |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                     End   |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                     Line  |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                           |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                           |&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                          End&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                          Column&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the results, the satisfactory performance had the echo intensitycranked up the 30 the entire time. The &lt;code&gt;else&lt;/code&gt; condition of the ternary was theonly branch executed. Now the band knows how to set the effect for their nextperformance.&lt;/p&gt;&lt;h3 id=&#34;all-coverage-modes&#34;&gt;All Coverage Modes &lt;a href=&#34;#all-coverage-modes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;:all&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Passing the &lt;code&gt;:all&lt;/code&gt; symbol to &lt;code&gt;Coverage.start&lt;/code&gt; will ask it to run every coveragemode; however, if you inspect the output, you&amp;rsquo;ll notice that one is missing.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;:all&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rehearsal.rb&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guitar.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;keys&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:lines&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:branches&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Oneshot lines is missing!&lt;/p&gt;&lt;p&gt;Oneshot lines and lines modes &lt;a href=&#34;https://github.com/ruby/ruby/blob/d92f09a5eea009fa28cd046e9d0eb698e3d94c5c/ext/coverage/coverage.c#L53&#34;&gt;cannot be run at the same time&lt;/a&gt;,so lines coverageis run, as you can still use it to answer if a line was executed at all.&lt;/p&gt;&lt;h2 id=&#34;coverage-in-practice&#34;&gt;Coverage In Practice &lt;a href=&#34;#coverage-in-practice&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It may be unlikely that you use the &lt;code&gt;Coverage&lt;/code&gt; module directly. However, thereare tools you can use to measure code coverage that builds on this abstraction.&lt;/p&gt;&lt;p&gt;There are many tools for measuring test coverage, but one is &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov&#34;&gt;SimpleCov&lt;/a&gt;. It alsosupports &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov#branch-coverage-ruby--25&#34;&gt;branches coverage&lt;/a&gt;. To measure coverage of production code, check out&lt;a href=&#34;https://github.com/danmayer/coverband&#34;&gt;Coverband&lt;/a&gt;, which you can set up to use &lt;a href=&#34;https://github.com/danmayer/coverband/blob/43c5ac94febc7a961346b0e9408d829d4d2ef8ad/test/rails5_dummy/config/coverband.rb#L15&#34;&gt;oneshot lines&lt;/a&gt; mode.&lt;/p&gt;&lt;p&gt;Ruby&amp;rsquo;s coverage module includes many options that can answer different questionsabout your code. What do you think you could use it for in your application?&lt;a href=&#34;https://twitter.com/kevin_j_m&#34;&gt;Let me know&lt;/a&gt;!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Gnarly Endings</title>
       <link>https://kevinjmurphy.com/posts/gnarly-endings/</link>
       <pubDate>Fri, 15 Oct 2021 07:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/gnarly-endings/</guid>
       <description>&lt;p&gt;Today is my last day at &lt;a href=&#34;https://www.thegnar.com/&#34;&gt;The Gnar Company&lt;/a&gt;. I joinedthe company over five years ago excited to work with a great group ofindividuals, many of whom I&amp;rsquo;d worked with before. Though many of the people havechanged, and the team has grown, the people that work at The Gnar are stillsome of the greatest people I&amp;rsquo;ve had the pleasure to work with.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m thankful to every member of the team, past and present, who helped makeworking at The Gnar Company the special experience that it is.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Code Golf: Conditionally Add To An Array</title>
       <link>https://kevinjmurphy.com/posts/code-golf-conditionally-add-to-array/</link>
       <pubDate>Tue, 28 Sep 2021 19:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/code-golf-conditionally-add-to-array/</guid>
       <description>&lt;h2 id=&#34;the-grass-is-always-greener&#34;&gt;The Grass Is Always Greener &lt;a href=&#34;#the-grass-is-always-greener&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;re building a system to track a golfer&amp;rsquo;s statuses during a tournament. This isa competitive tournament with people who are much better than I will ever be, soif a golfer is currently scoring under &lt;a href=&#34;https://en.wikipedia.org/wiki/Par_(score)&#34;&gt;par&lt;/a&gt;, they&amp;rsquo;re in contention to win. On this 18 hole course, if they&amp;rsquo;ve played the first nine holes, they&amp;rsquo;ve made the &lt;a href=&#34;https://www.golfcompendium.com/2020/07/the-turn-definition-golf-course.html&#34;&gt;turn&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s explore a number of ways we can build up an array that keeps track ofwhich, if any, of these statuses a particular golfer qualifies for. Not contentto settle for one that works, we&amp;rsquo;ll dig into a variety of options.&lt;/p&gt;&lt;h2 id=&#34;teeing-up-an-option&#34;&gt;Teeing Up An Option &lt;a href=&#34;#teeing-up-an-option&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can start with an empty array, and explicitly add in any of the statuses thatthe golfer meets the conditions for.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  statuses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; under_par?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; back_nine?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  statuses&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s nothing tremendously exciting here, and that&amp;rsquo;s not a bad thing! It&amp;rsquo;sreasonably clear what this is doing.&lt;/p&gt;&lt;h2 id=&#34;tapping-it-in&#34;&gt;Tapping It In &lt;a href=&#34;#tapping-it-in&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can make the prior suggestion a little more terse by using &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Kernel.html#method-i-tap&#34;&gt;tap&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;[].&lt;/span&gt;tap &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;statuses&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; under_par?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; back_nine?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This eliminates the need for the &lt;code&gt;statuses&lt;/code&gt; temporary array from the priorsection.&lt;/p&gt;&lt;h2 id=&#34;taking-a-compact-swing&#34;&gt;Taking a Compact Swing &lt;a href=&#34;#taking-a-compact-swing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can also build our array to have an entry for each of the conditionals wehave, and removing the ones that aren&amp;rsquo;t relevant.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    under_par? ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    back_nine? ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;compact&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By using &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/Array.html#method-i-compact&#34;&gt;compact&lt;/a&gt;,we&amp;rsquo;ll remove any &lt;code&gt;nil&lt;/code&gt; values - and we&amp;rsquo;ll take advantage of that functionalityby explicitly adding &lt;code&gt;nil&lt;/code&gt; if the golfer doesn&amp;rsquo;t meet that condition.&lt;/p&gt;&lt;h2 id=&#34;working-on-your-backswing-takeaway&#34;&gt;Working On Your Backswing Takeaway &lt;a href=&#34;#working-on-your-backswing-takeaway&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Speaking of taking things away, we can also do the opposite of the firstapproach. We&amp;rsquo;ll start by having each status, and then &lt;em&gt;removing&lt;/em&gt; the ones thatdo &lt;strong&gt;not&lt;/strong&gt; meet the necessary condition.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  statuses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; under_par?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    statuses &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; back_nine?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    statuses &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  statuses&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This may be more helpful in situations where there are a lot more statuses, andonly a few of them may need to be removed for certain reasons. It may also helpwhen the full list of statuses persists on its own elsewhere, but then you alsoneed a subset of them in a particular case.&lt;/p&gt;&lt;h2 id=&#34;selecting-the-right-club&#34;&gt;Selecting The Right Club &lt;a href=&#34;#selecting-the-right-club&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Lastly, we&amp;rsquo;ll put together a hash keyed on the statuses where the value is the result of the conditions. We can then flex some familiarity with Ruby&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/Enumerable.html&#34;&gt;Enumerable module&lt;/a&gt; to pick out the applicable sections of the hash, returning only the statuses.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; under_par?,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; back_nine?,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;_status, condition&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; condition }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to the prior suggestion, this may be helpful when you want to have thefull list of statuses and their associated conditions all compiled in one place,but then want to peel off which are relevant for a particular golfer at thistime.&lt;/p&gt;&lt;h2 id=&#34;asking-help-from-the-caddie&#34;&gt;Asking Help From The Caddie &lt;a href=&#34;#asking-help-from-the-caddie&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here are some of the ways that we might solve this problem. What other wayscould we build this functionality? &lt;a href=&#34;https://twitter.com/kevin_j_m&#34;&gt;Let me know&lt;/a&gt;what other approaches you would take.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/code-golf-conditionally-add-to-array&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Buffered IO Streams In Ruby</title>
       <link>https://kevinjmurphy.com/posts/ruby-io-buffer/</link>
       <pubDate>Mon, 20 Sep 2021 09:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-io-buffer/</guid>
       <description>&lt;h2 id=&#34;object-permanence&#34;&gt;Object Permanence &lt;a href=&#34;#object-permanence&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We have some really important information in our console.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some really important information&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some really important information&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want to store that information to disk, but only temporarily. We&amp;rsquo;ll do sousing a &lt;code&gt;Tempfile&lt;/code&gt;, which is built in to Ruby, but must be required to be used.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tempfile&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tempfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a new temporary file on disk, and as it&amp;rsquo;s new, it is currentlyempty, which we&amp;rsquo;ll check two different ways.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt; we can write some really important information to disk, after whichwe&amp;rsquo;ll check the size again.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/IO.html#method-i-write&#34;&gt;write&lt;/a&gt; to theIO stream (in this case a file), we get the number of bytes written, 33,returned. After writing to the file, we asked for the size of the file with&lt;code&gt;File.size&lt;/code&gt; and got 0. Then, we asked the file for its size and got 33. Whathappened?&lt;/p&gt;&lt;h2 id=&#34;wheres-that-string&#34;&gt;Where&amp;rsquo;s that string? &lt;a href=&#34;#wheres-that-string&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Maybe the string was written to the file instance in memory before beingcommitted to disk. Let&amp;rsquo;s look at the &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.1/libdoc/objspace/rdoc/ObjectSpace.html#method-c-memsize_of&#34;&gt;size&lt;/a&gt; of our objects.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;objspace&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ObjectSpace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memsize_of(data)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ObjectSpace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memsize_of(file)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, &lt;code&gt;memsize_of&lt;/code&gt; is a hint/guess - and the docs are clear about that:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note that the return size is incomplete. You need to deal with this information as only a HINT.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That&amp;rsquo;ll work for us; we&amp;rsquo;ll just use it to see if it changed at all.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s try to write again, now that we&amp;rsquo;ve seen the file is currently 80 bytes inmemory.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ObjectSpace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memsize_of(file)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The size of the &lt;code&gt;file&lt;/code&gt; object itself didn&amp;rsquo;t change, so I guess it&amp;rsquo;s not hidingin there.&lt;/p&gt;&lt;p&gt;As we saw previously, passing the path to &lt;code&gt;File.size&lt;/code&gt; doesn&amp;rsquo;t show thenewly-written bytes being written to the file, but asking the &lt;code&gt;file&lt;/code&gt; instanceitself for its &lt;code&gt;size&lt;/code&gt; does.&lt;/p&gt;&lt;p&gt;Also, after asking for &lt;code&gt;file.size&lt;/code&gt;, &lt;code&gt;File.size(file.path)&lt;/code&gt; &lt;strong&gt;does&lt;/strong&gt; have thesize including the newly-written bytes. So they do &lt;em&gt;eventually&lt;/em&gt; agree on thefile&amp;rsquo;s size.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sizing-up-the-difference&#34;&gt;Sizing Up The Difference &lt;a href=&#34;#sizing-up-the-difference&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Calling &lt;code&gt;size&lt;/code&gt; on the file instance has a &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.1/libdoc/tempfile/rdoc/Tempfile.html#method-i-size&#34;&gt;documented&lt;/a&gt; side effect.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;As a side effect, the IO buffer is flushed before determining the size.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That explains where our string went after writing it! It was stored in Ruby&amp;rsquo;sIO buffer. Flushing the buffer &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/IO.html#method-i-flush&#34;&gt;pushes&lt;/a&gt;its contents to the operating system.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s observe that by checking the size of the file, writing more bytes to it,checking the size of the file doesn&amp;rsquo;t change, and explicitly flushing the buffer.&lt;/p&gt;&lt;p&gt;After flushing the buffer, the size of the file &lt;em&gt;does&lt;/em&gt; change by the number ofbytes written.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flush&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://ruby-doc.org/core-3.0.1/IO.html#method-i-rewind&#34;&gt;Rewinding&lt;/a&gt; the fileafter writing it also appears to flush the buffer.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rewind&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;no-buffering&#34;&gt;No Buffering &lt;a href=&#34;#no-buffering&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can bypass Ruby&amp;rsquo;s IO buffer by setting the stream&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/IO.html#method-i-sync&#34;&gt;sync mode&lt;/a&gt;.By default, this is set to buffer; however, setting it to true will immediatelyflush the stream contents to the operating system.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; new_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tempfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sync&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sync &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; streaming &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no buffering&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(streaming)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;File.size&lt;/code&gt; is recognizing the bytes in the file without needing to flush thebuffer, either directly or via a method that does so as a side effect. The syncmode is pushing whatever we write directly to disk (at least, through theoperating system).&lt;/p&gt;&lt;h2 id=&#34;closing-our-stream&#34;&gt;Closing Our Stream &lt;a href=&#34;#closing-our-stream&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby will buffer writes in an IO stream, such as a file, and you need to bemindful of when or if that buffer is flushed should you then immediately checkthe impact that writing to a stream had on the item being written to.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/ruby-io-buffer&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Best Practices Are The Best For Whom?</title>
       <link>https://kevinjmurphy.com/posts/remote-ruby-143/</link>
       <pubDate>Thu, 26 Aug 2021 19:13:09 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/remote-ruby-143/</guid>
       <description>&lt;p&gt;I had a great time talking to Andrew Mason, Jason Charnes , and Chris Oliver on Remote Ruby. The episode was just released, and you can listen to it &lt;a href=&#34;https://remoteruby.transistor.fm/143&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;There&amp;rsquo;s something bothering me that I feel I didn&amp;rsquo;t say all that clearly. I mention that these rules (test coverage, DRY, and performant code are the examples given in the conversation) feel easy, but are hard to apply in practice.&lt;/p&gt;&lt;p&gt;Who am I saying they&amp;rsquo;re easy for? You may think I&amp;rsquo;m talking about the people who we ask to use them. And that may be true - it may be easy, or easier, to follow the rule.&lt;/p&gt;&lt;p&gt;However, that&amp;rsquo;s not what gets me worked up about this. Instead, I think it&amp;rsquo;s easy or easier for the people who &lt;strong&gt;say&lt;/strong&gt; the rule, and does a disservice to those who we ask to apply it, unless it&amp;rsquo;s backed up with a lot more support.&lt;/p&gt;&lt;h2 id=&#34;testing-for-coverage&#34;&gt;Testing for coverage &lt;a href=&#34;#testing-for-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My thoughts here apply in a lot of scenarios, but let&amp;rsquo;s use a tangible example. I&amp;rsquo;ll choose test coverage because we spend a lot of the episode talking about it, and metrics in general, and I think it&amp;rsquo;s pretty illustrative for what I want to say.&lt;/p&gt;&lt;p&gt;I like writing tests. They give me fast feedback. They allow me to validate my architecture and design. They give me confidence to make future changes. I&amp;rsquo;m bought in. Writing tests is part of my workflow. Having a test coverage bar or metric that we track isn&amp;rsquo;t likely to change the way I write code - at least, not in what I consider a materially valuable way. No, the apps I work with don&amp;rsquo;t have 100% test coverage. My goal is to have sufficient coverage that I feel confident making a change and documenting current behavior. That&amp;rsquo;s a lot harder to quantify - but if you know how to quantify confidence - let me know!&lt;/p&gt;&lt;p&gt;But what about the person who doesn&amp;rsquo;t write tests? Mandating tests will be good for the project, right? People who aren&amp;rsquo;t as familiar with writing tests will do so, and the project will be better off because there are tests now, right? Maybe.&lt;/p&gt;&lt;h2 id=&#34;impacts-of-best-practices-as-mandates&#34;&gt;Impacts of best practices as mandates &lt;a href=&#34;#impacts-of-best-practices-as-mandates&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The person who isn&amp;rsquo;t familiar with or comfortable writing tests likely still has ways that they get confidence that their code works or validates their assumptions or gets feedback on their progress. A new tester isn&amp;rsquo;t going to start getting that comfort from tests solely because they have to write them.&lt;/p&gt;&lt;p&gt;Why is the team writing tests now? Because a computer will yell at them if they don&amp;rsquo;t, and/or their code won&amp;rsquo;t get merged. It&amp;rsquo;s a box to check. Without the training and backing of why testing is important and valuable, and giving people the space to learn, grow, and experiment - they can resent it.&lt;/p&gt;&lt;p&gt;What good are the tests you have then? They made your metric look good, but what are you going to use them for? It&amp;rsquo;s unclear, beyond demonstrating that they exist and giving your CI provider more money if you&amp;rsquo;re billed by minute usage.&lt;/p&gt;&lt;p&gt;Are these tests going to help you catch a bug before it gets into production, or fix one that&amp;rsquo;s already there? Did these tests help inform the choices developers made while writing the code that accompanies the test? Did these tests allow for immediate, small steps with fast feedback?&lt;/p&gt;&lt;p&gt;I don&amp;rsquo;t know - and neither do you probably. Those things are hard to measure. They&amp;rsquo;re also a lot of the value people believe they get out of testing. Capturing or enforcing test coverage metrics in a vacuum does nothing to help inform how much better off you are than if you had no tests at all. It&amp;rsquo;s a proxy measure that&amp;rsquo;s difficult to draw conclusions from without digging deeper.&lt;/p&gt;&lt;h2 id=&#34;why-bother-following-the-rules&#34;&gt;Why bother following the rules? &lt;a href=&#34;#why-bother-following-the-rules&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This doesn&amp;rsquo;t mean don&amp;rsquo;t write tests. It can give you insights you didn&amp;rsquo;t have before! Chris Oliver talked about the pay gem, and how different vendors may support features differently, or not at all. Testing can reveal that to you in a quicker/safer way than other explorations. Not only because a test may fail - but because the work Chris does, and things he researched, in order to have that test fail, gives more information about how the vendor&amp;rsquo;s feature works. If you want to know more about that, I have another talk about testing (and designing interactions with) third-party dependencies &lt;a href=&#34;https://kevinjmurphy.com/posts/railsconf-2020/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m on &amp;ldquo;team testing&amp;rdquo;. My process of getting there came from a lot of opportunities to learn from testing, experiencing it, and having the chance to be &amp;ldquo;saved&amp;rdquo; by them. Forcing tests may increase the likelihood those things happen, but I think you&amp;rsquo;ll have a harder time convincing people on the value of tests if they exist to appease a number.&lt;/p&gt;&lt;p&gt;A test you wish you&amp;rsquo;d written may have more impact on your career than one you wrote perfectly. The experience of not having that safety net, of not having that immediate feedback, and coming to terms with the consequences of that over the life of a project will stick with you. That doesn&amp;rsquo;t mean don&amp;rsquo;t write tests. But recognize it might not click for someone until they &lt;em&gt;know&lt;/em&gt; this concept exists, they &lt;em&gt;know&lt;/em&gt; they didn&amp;rsquo;t use it, and now they &lt;em&gt;know&lt;/em&gt; how much worse off they are right now without it.&lt;/p&gt;&lt;p&gt;This doesn&amp;rsquo;t mean don&amp;rsquo;t track test coverage. It can be motivating! Jason Charnes mentioned using it to drive an increase in coverage on a project. Once he got the value he sought out of the tests, the metric/number itself didn&amp;rsquo;t matter as much, so he moved on. Jason got the benefit he wanted, and the metric may have helped drive him there, but I&amp;rsquo;m betting that the benefit wasn&amp;rsquo;t seeing a bigger number on his test coverage %.&lt;/p&gt;&lt;h2 id=&#34;put-in-the-work&#34;&gt;Put in the work &lt;a href=&#34;#put-in-the-work&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s easy to say these rules and walk away feeling like we&amp;rsquo;ve shared some wisdom. What&amp;rsquo;s harder is putting in the work to help a person grow so they happen upon their own wisdom. We need to have support structures in place so people can learn about these things, and wrestle with them, and gain familiarity. Then they&amp;rsquo;re not rules to be followed - they become shared values we benefit from, and they&amp;rsquo;re used when we see a benefit.&lt;/p&gt;&lt;p&gt;Thanks Andrew, Jason, and Chris for having me on.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Temporary State With Blocks Post Sharing</title>
       <link>https://kevinjmurphy.com/posts/temporary-state-blocks-sharing/</link>
       <pubDate>Sun, 22 Aug 2021 19:13:09 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/temporary-state-blocks-sharing/</guid>
       <description>&lt;p&gt;Last week, I wrote a &lt;a href=&#34;https://kevinjmurphy.com/posts/temporary-state-in-tests/&#34;&gt;post&lt;/a&gt; on myemployer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/temporary-state-in-tests&#34;&gt;blog&lt;/a&gt; about using blocks in ruby to temporarily alter the state ofthe application, and how that can be particularly helpful in tests.&lt;/p&gt;&lt;p&gt;That post was featured in Ruby Radar &lt;a href=&#34;https://rubyradar.dev/issues/ruby-radar-12-back-to-our-regularly-scheduled-programming-726989&#34;&gt;#12&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_radar_12.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;This post was also featured in Ruby Weekly &lt;a href=&#34;https://rubyweekly.com/issues/568&#34;&gt;#568&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_568.png&#34;&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>Temporary State in Tests: Bloc(k) Party</title>
       <link>https://kevinjmurphy.com/posts/temporary-state-in-tests/</link>
       <pubDate>Sat, 14 Aug 2021 14:05:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/temporary-state-in-tests/</guid>
       <description>&lt;h2 id=&#34;testing-around-the-clock-sundayhttpsyoutubeveqiwt9ejdy&#34;&gt;Testing Around the Clock (&lt;a href=&#34;https://youtu.be/vEqIWT9EjDY&#34;&gt;Sunday&lt;/a&gt;) &lt;a href=&#34;#testing-around-the-clock-sundayhttpsyoutubeveqiwt9ejdy&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Tests will sometimes require us to bend the truth and modifythe state of the world in order to have repeatable, consistent results andfeedback.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;re building an application that sends a notification on Sunday. Inorder to test it sending a notification, we need it to be Sunday. The problemwith that is I don&amp;rsquo;t really like working on Sundays.&lt;/p&gt;&lt;p&gt;If I&amp;rsquo;m writing code on Wednesday, I want to make sure I don&amp;rsquo;t breaknotifications. Rather than waiting until Sunday to run my tests, I can trick mytest into thinking it&amp;rsquo;s Sunday. Rails has built-in &lt;a href=&#34;https://api.rubyonrails.org/v5.2.6/classes/ActiveSupport/Testing/TimeHelpers.html&#34;&gt;helpers&lt;/a&gt;we can use to simulate that.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;travel_to &lt;span style=&#34;color:#66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local(&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;notifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Notifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;expect(notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_notification?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we do this, we want to ensure that the results are &lt;em&gt;temporary&lt;/em&gt;. Othertests, or even areas within a given test, shouldn&amp;rsquo;t be affected by this statechange. It should still be whatever day the tests are &lt;strong&gt;really&lt;/strong&gt; run otherwise.&lt;/p&gt;&lt;p&gt;Now, in the case of these helpers from Rails, according to the documentation:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The stubs are automatically removed at the end of the test.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;However, we want to be clear to readers who may not have perused the Railsdocumentation (nor have encyclopedic knowledge of it). Additionally, we may onlywant part of the test to think it&amp;rsquo;s Sunday. In order to isolate this change, wecan limit its impact to be within a block.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;notifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Notifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;travel_to &lt;span style=&#34;color:#66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local(&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_notification?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;travel_to &lt;span style=&#34;color:#66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local(&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expect(notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_notification?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;benefits-of-the-block-little-thoughtshttpsyoutubeq6cs26oex64&#34;&gt;Benefits of the Block (&lt;a href=&#34;https://youtu.be/q6cS26oEX64&#34;&gt;Little Thoughts&lt;/a&gt;) &lt;a href=&#34;#benefits-of-the-block-little-thoughtshttpsyoutubeq6cs26oex64&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The block helps visually distinguish the scope of the change, in addition toensuring that the change is limited to the code within the block. Ifind it to be more readable and clear using a block. We have temporarilychanged the state of the world, but only in a limited capacity.&lt;/p&gt;&lt;p&gt;As far as thetest is concerned, it&amp;rsquo;s Sunday in the first block, Monday in the second block,and whatever day of the week you&amp;rsquo;re reading this before and after the blocks.&lt;/p&gt;&lt;h2 id=&#34;disregarding-bullet-recommendations-real-talkhttpsyoutubemmmmoriaooc&#34;&gt;Disregarding Bullet Recommendations (&lt;a href=&#34;https://youtu.be/mmMmoRiAoOc&#34;&gt;Real Talk&lt;/a&gt;) &lt;a href=&#34;#disregarding-bullet-recommendations-real-talkhttpsyoutubemmmmoriaooc&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;ve used &lt;a href=&#34;https://github.com/flyerhzm/bullet&#34;&gt;Bullet&lt;/a&gt; before for eager loading optimization, you may have runinto situations in which you wished it wouldn&amp;rsquo;t tell you something either needed ordidn&amp;rsquo;t need to be eagerly loaded.&lt;/p&gt;&lt;p&gt;Now, some times that&amp;rsquo;s the tool doing its job: giving you feedback you may nothave expected (or wanted). However, in tests, it may be giving you a falsepositive because of your test setup.&lt;/p&gt;&lt;p&gt;In a test that calls a method where only one record exists in your database,Bullet may suggest that you don&amp;rsquo;t need the eager loading. And Bullet iscorrect - in this case, for this test. However, the setup in that test may notreflect reality or the expectation most of the time. It&amp;rsquo;s much more likely thatthere are &lt;strong&gt;many&lt;/strong&gt; records, which will cause Bullet to recommend the &lt;code&gt;includes&lt;/code&gt;were you to get rid of it.&lt;/p&gt;&lt;p&gt;How can we keep our test and satisfy Bullet? We don&amp;rsquo;t; instead, let&amp;rsquo;s turnBullet off. But, we don&amp;rsquo;t want Bullet to stay off for the rest of the test run.We only want it off when calling that one method in this one test.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;re using RSpec, you can use tags to &lt;a href=&#34;https://tosbourn.com/ignore-bullet-rspec/&#34;&gt;turn Bullet off&lt;/a&gt;for an entire test, file, or context. It&amp;rsquo;s a clever and succinct approach.&lt;/p&gt;&lt;p&gt;This is a post about blocks, so let&amp;rsquo;s discuss another way.&lt;/p&gt;&lt;h2 id=&#34;turn-it-off-and-on-again-fluxhttpsyoutubettcboe1grng&#34;&gt;Turn It Off And On Again (&lt;a href=&#34;https://youtu.be/ttcboE1GrNg&#34;&gt;Flux&lt;/a&gt;) &lt;a href=&#34;#turn-it-off-and-on-again-fluxhttpsyoutubettcboe1grng&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ve discussed how to &lt;strong&gt;use&lt;/strong&gt; a method that takes a block to temporarilychange state in our application, specifically tests. Let&amp;rsquo;s start by writing thecode we want:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doesn&amp;#39;t complain about Bullet warnings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  disable_bullet &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(&lt;span style=&#34;color:#66d9ef&#34;&gt;Notification&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method_that_eager_loads_associations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s write an implementation of &lt;code&gt;disable_bullet&lt;/code&gt;. We can use &lt;code&gt;yield&lt;/code&gt; to wrapturning Bullet off and on again inside of &lt;code&gt;disable_bullet&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disable_bullet&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Calling this method turns Bullet off, runs whatever code is in the block passedto it, and then turns Bullet back on after the block completes. We can make theblock optional by calling the &lt;code&gt;block_given?&lt;/code&gt; method:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disable_bullet&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; block_given?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we&amp;rsquo;re going to remove that in this case because there&amp;rsquo;s no use case forcalling this method otherwise. We&amp;rsquo;ll get an error without passing a block to&lt;code&gt;disable_bullet&lt;/code&gt;, and that&amp;rsquo;s ok.&lt;/p&gt;&lt;h2 id=&#34;why-did-i-do-this-again-i-still-rememberhttpsyoutube5r-9igwd36a&#34;&gt;Why Did I Do This Again? (&lt;a href=&#34;https://youtu.be/5R-9IgWD36A&#34;&gt;I Still Remember&lt;/a&gt;) &lt;a href=&#34;#why-did-i-do-this-again-i-still-rememberhttpsyoutube5r-9igwd36a&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When you&amp;rsquo;re writing the test that you need to disable Bullet, you likely havethe context of why Bullet needed to be turned off. However, when you&amp;rsquo;re readingit later, you may forget. And maybe someone else wrote this test and youdon&amp;rsquo;t know to begin with. Is it &lt;em&gt;reasonable&lt;/em&gt; to have turned Bullet off? We canforce this to be documented in the test by making an addition to our method.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disable_bullet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;reason&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Callers are now required to pass in a &lt;strong&gt;reason&lt;/strong&gt; why Bullet has beenturned off. It&amp;rsquo;s not used in the method, but it helps enforce a thoughtfulunderstanding of why this tool is being turned off when the method iscalled.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doesn&amp;#39;t complain about Bullet warnings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  disable_bullet(&lt;span style=&#34;color:#e6db74&#34;&gt;reason&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Trust me. But seriously, here&amp;#39;s why...&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expect(&lt;span style=&#34;color:#66d9ef&#34;&gt;Notification&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method_that_eager_loads_associations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By using a block here, we have provided a way to &lt;em&gt;temporarily&lt;/em&gt; change the stateof the world with an aesthetic that clearly denotes the scope of the change, andwe also added a way to force users to justify their use of the method tothemselves and others.&lt;/p&gt;&lt;h2 id=&#34;inspiration-pioneershttpsyoutubejrpmikap2ss&#34;&gt;Inspiration (&lt;a href=&#34;https://youtu.be/JrpMIkaP2ss&#34;&gt;Pioneers&lt;/a&gt;) &lt;a href=&#34;#inspiration-pioneershttpsyoutubejrpmikap2ss&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/purinkle&#34;&gt;Rob Whittaker&lt;/a&gt;for &lt;a href=&#34;https://twitter.com/purinkle/status/1412071536819851268&#34;&gt;asking me&lt;/a&gt; aboutother ways I like to use blocks, based on an &lt;a href=&#34;https://kevinjmurphy.com/posts/activerecord-new-block/&#34;&gt;earlier post&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/temporary-state-in-tests&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>CSV Validation Post Sharing</title>
       <link>https://kevinjmurphy.com/posts/csv-validation-sharing/</link>
       <pubDate>Tue, 27 Jul 2021 19:13:09 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/csv-validation-sharing/</guid>
       <description>&lt;p&gt;Last week, I wrote a &lt;a href=&#34;https://kevinjmurphy.com/posts/active-model-validations-csv/&#34;&gt;post&lt;/a&gt; on myemployer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/active-model-validations-csv&#34;&gt;blog&lt;/a&gt; aboutvalidating input from a CSV file using &lt;code&gt;ActiveModel::Validations&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;That post was featured in Ruby Weekly &lt;a href=&#34;https://rubyweekly.com/issues/562&#34;&gt;#562&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_562.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;It was also shared in Awesome Ruby &lt;a href=&#34;https://ruby.libhunt.com/newsletter/270&#34;&gt;#270&lt;/a&gt;. This is the first time I&amp;rsquo;ve been inAwesome Ruby!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/awesome_ruby_270.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;All of my blog posts are cross-posted on &lt;a href=&#34;https://dev.to/kevin_j_m&#34;&gt;dev.to&lt;/a&gt;,and their ruby community was nice enough to share my post with their twitterfollowers.&lt;/p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ro&#34; dir=&#34;ltr&#34;&gt;Validate CSV Input With ActiveModel::Validations&lt;br&gt;&lt;br&gt;{ author: &lt;a href=&#34;https://twitter.com/kevin_j_m?ref_src=twsrc%5Etfw&#34;&gt;@kevin_j_m&lt;/a&gt; } &lt;a href=&#34;https://twitter.com/hashtag/DEVCommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#DEVCommunity&lt;/a&gt;&lt;a href=&#34;https://t.co/8AYMpkX7yc&#34;&gt;https://t.co/8AYMpkX7yc&lt;/a&gt;&lt;/p&gt;&amp;mdash; The Ruby Dev (@the_ruby_dev) &lt;a href=&#34;https://twitter.com/the_ruby_dev/status/1417522440431968261?ref_src=twsrc%5Etfw&#34;&gt;July 20, 2021&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;p&gt;In case you can&amp;rsquo;t read that, the tweet says:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Validate CSV Input With ActiveModel::Validations&lt;/p&gt;&lt;p&gt;{ author: @kevin_j_m } #DEVCommunity&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Lastly, Ruby Radar &lt;a href=&#34;https://rubyradar.dev/issues/ruby-radar-9-junior-spotlight-705164&#34;&gt;#9&lt;/a&gt;featured the post!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_radar_9.png&#34;&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>Validate CSV Input With ActiveModel::Validations</title>
       <link>https://kevinjmurphy.com/posts/active-model-validations-csv/</link>
       <pubDate>Mon, 19 Jul 2021 08:08:53 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/active-model-validations-csv/</guid>
       <description>&lt;h2 id=&#34;standard-library-parsing&#34;&gt;Standard Library Parsing &lt;a href=&#34;#standard-library-parsing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;re maintaining a system that tracks information about books, including theirpublication dates. On occasion, publishers will send us CSVs with updatedpublication dates, and we need to update our Rails application to have thosedates.&lt;/p&gt;&lt;p&gt;We want a repeatable process, so rather than updating these by hand, let&amp;rsquo;s useRuby&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.1/libdoc/csv/rdoc/CSV.html&#34;&gt;CSV class&lt;/a&gt;to parse this data.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(csv_text, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ISBN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Four lines and we have a functionally complete parser that updates our systemhow we expect. That all seems great. Until, that is, we actually run it.&lt;/p&gt;&lt;h2 id=&#34;book-checked-out&#34;&gt;Book Checked Out &lt;a href=&#34;#book-checked-out&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We execute our parser on the first data file we receive, and it quickly stopswith the following error:&lt;/p&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NoMethodError: undefined method `update&amp;#39; for nil:NilClass&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On inspecting the state of our database, we see that the first three books inthe CSV file had their publication dates updated, but the rest didn&amp;rsquo;t. Lookingat the fourth row in the CSV, we discover that the ISBN for that row isn&amp;rsquo;t inour database. In that case &lt;code&gt;find_by&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, and calling &lt;code&gt;update&lt;/code&gt; on&lt;code&gt;nil&lt;/code&gt; is exactly our problem. An exception is raised, and further rows of theCSV aren&amp;rsquo;t parsed.&lt;/p&gt;&lt;p&gt;We can fix that! If we don&amp;rsquo;t find the book, let&amp;rsquo;s log the error and move on tothe next row, without calling &lt;code&gt;update&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(csv_text, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ISBN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not find book&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the entire CSV processes, our books are updated, and everyone&amp;rsquo;s happy.Right?&lt;/p&gt;&lt;h2 id=&#34;blank-pages&#34;&gt;Blank Pages &lt;a href=&#34;#blank-pages&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Days later, we discover that a book which previously had a publication datedoesn&amp;rsquo;t anymore. It&amp;rsquo;s not unusual for a book to not have a publication date - wehave records of books that haven&amp;rsquo;t been published yet. However, books shouldn&amp;rsquo;t&lt;em&gt;lose&lt;/em&gt; an existing publication date.&lt;/p&gt;&lt;p&gt;We see that the book in question was in the CSV, and the Pub Date column wasempty for that row. Turns out, that was an error from the publisher in preparingthe CSV. Any book in that file should always have a publication date - thepurpose of this process is to provide publication dates.&lt;/p&gt;&lt;p&gt;We can prevent this from happening in the future by ensuring that a row has apublication date before attempting to process it:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(csv_text, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;blank?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skipped updating book with no publication date&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ISBN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not find book&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;losing-the-plot&#34;&gt;Losing The Plot &lt;a href=&#34;#losing-the-plot&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our &amp;ldquo;simple&amp;rdquo; parser is now a lot more complicated. Business rules about theshape, structure, and expectations of the data are now littered alongwith actions consuming the data to do things like find the book and update itwith the appropriate publication date. It&amp;rsquo;s harder to identify what the coreresponsibility of this snippet of code is.&lt;/p&gt;&lt;h2 id=&#34;adding-chapters&#34;&gt;Adding Chapters &lt;a href=&#34;#adding-chapters&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s try to increase the clarity of our code by separating out how to processan individual row of the CSV.&lt;/p&gt;&lt;h3 id=&#34;first-act-establishing-a-new-character-class&#34;&gt;First Act: Establishing A New Character (Class) &lt;a href=&#34;#first-act-establishing-a-new-character-class&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;ll start by making a class that takes in the needed data from the CSV row andfinds the book associated with the ISBN.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookPublicationDateImportRow&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:isbn&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:publication_date&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @isbn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; isbn&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @publication_date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; publication_date&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;book&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @book &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: isbn)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perhaps you&amp;rsquo;ve heard of a &lt;a href=&#34;https://thoughtbot.com/blog/activemodel-form-objects&#34;&gt;form object&lt;/a&gt;to represent data associated with a particular form on your web application. Youcan consider that&amp;rsquo;s what we&amp;rsquo;re doing here, except our input isn&amp;rsquo;t from a form ona web page - it&amp;rsquo;s a row from a CSV file.&lt;/p&gt;&lt;h3 id=&#34;second-act-rising-validations&#34;&gt;Second Act: Rising Validations &lt;a href=&#34;#second-act-rising-validations&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now, rather than rewriting validation logic, as we had in our procedural codeinitially, we can use ActiveModel&amp;rsquo;s &lt;a href=&#34;https://api.rubyonrails.org/v6.1.3.1/classes/ActiveModel/Validations.html&#34;&gt;Validations&lt;/a&gt;module. That&amp;rsquo;ll allow us access to the validation &lt;a href=&#34;https://guides.rubyonrails.org/active_record_validations.html#validation-helpers&#34;&gt;helpers&lt;/a&gt;we&amp;rsquo;re used to using with other Rails ActiveRecord models.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookPublicationDateImportRow&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Validations&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  validates &lt;span style=&#34;color:#e6db74&#34;&gt;:book&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;presence&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  validates &lt;span style=&#34;color:#e6db74&#34;&gt;:publication_date&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;presence&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We would have caught our last problem of losing publication dates if thatvalidation were on the Book model itself - and we may be tempted to look to addit now. However, remember - having a book with no publication date is totallynormal for our application. It&amp;rsquo;s only in &lt;strong&gt;this&lt;/strong&gt; instance of receiving apublication date update from a publisher with no publication date where it&amp;rsquo;sunacceptable to have a value for that attribute.&lt;/p&gt;&lt;h3 id=&#34;third-act-update-resolution&#34;&gt;Third Act: Update Resolution &lt;a href=&#34;#third-act-update-resolution&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;ll also mirror ActiveRecord&amp;rsquo;s API by adding in a &lt;code&gt;save&lt;/code&gt; method that makessure our instance is passing its own validations before updating the book:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookPublicationDateImportRow&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; valid?&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: @publication_date)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rewriting-the-intro&#34;&gt;Rewriting The Intro &lt;a href=&#34;#rewriting-the-intro&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that we have something that&amp;rsquo;s responsible for managing an individual row, wecan update our parsing code to be responsible for iterating through that CSV andpass off the details of how to manage that data to our new class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(csv_text, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  book_import &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BookPublicationDateImportRow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ISBN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;book_import&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(book_import&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;errors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full_messages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue &lt;a href=&#34;#epilogue&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;By adding this new class, we&amp;rsquo;ve given ourselves an extension point foradditional logic on the row. Any data transformation, like converting thepublication date string to a date object, can be handled here (however, for CSVparsing, do take a look at the standard library&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.1/libdoc/csv/rdoc/CSV.html#class-CSV-label-Built-In+Field+Converters&#34;&gt;converters&lt;/a&gt;as well!).&lt;/p&gt;&lt;p&gt;Any further validations that need to be exercised on the data can take place inthis separate class. Moreover, we can use framework features and concepts thatwe&amp;rsquo;re already familiar with, rather than rewriting our own business logic forvalidation.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/active-model-validations-csv&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Appearance on Rails With Jason Podcast</title>
       <link>https://kevinjmurphy.com/posts/rails-with-jason-podcast/</link>
       <pubDate>Thu, 17 Jun 2021 11:45:52 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rails-with-jason-podcast/</guid>
       <description>&lt;p&gt;Jason Swett was kind enough to him me on his podcast, &lt;a href=&#34;https://www.codewithjason.com/rails-with-jason-podcast/&#34;&gt;Rails With Jason&lt;/a&gt;. We discussed the contents of my RailsConf 2021 talk: Engineering MBA.&lt;/p&gt;&lt;p&gt;Thanks for having me on Jason! You can give it a listen &lt;a href=&#34;https://www.codewithjason.com/rails-with-jason-podcast/episodes/096-engineering-mba-with-kevin-murphy-jumSoete/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ruby Weekly 554</title>
       <link>https://kevinjmurphy.com/posts/ruby-weekly-554/</link>
       <pubDate>Fri, 28 May 2021 07:50:04 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-weekly-554/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m excited to be in this week&amp;rsquo;s Ruby Weekly, &lt;a href=&#34;https://rubyweekly.com/issues/554&#34;&gt;#554&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_554.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;The article they included is a &lt;a href=&#34;https://kevinjmurphy.com/posts/activerecord-new-block/&#34;&gt;post&lt;/a&gt;from my employer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/activerecord-new-block&#34;&gt;blog&lt;/a&gt;about passing a block to ActiveRecord methods, and how it differs from using&lt;code&gt;tap&lt;/code&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>RailsConf Roundup 2021</title>
       <link>https://kevinjmurphy.com/posts/railsconf-roundup-2021/</link>
       <pubDate>Wed, 19 May 2021 10:50:20 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/railsconf-roundup-2021/</guid>
       <description>&lt;h1 id=&#34;railsconf-2021&#34;&gt;RailsConf 2021 &lt;a href=&#34;#railsconf-2021&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf.com/&#34;&gt;RailsConf&lt;/a&gt; wrapped up in mid-April with a virtualgathering, featuring attendees from 61 different countries. The talks are nowavailable to all on &lt;a href=&#34;https://www.youtube.com/c/rubycentral/videos&#34;&gt;YouTube&lt;/a&gt;, soif you&amp;rsquo;re looking for some suggestions on where to start, please allow me tocurate a list for you.&lt;/p&gt;&lt;h2 id=&#34;recommended-talks&#34;&gt;Recommended Talks &lt;a href=&#34;#recommended-talks&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;refactoring-a-developers-guide-to-writing-well&#34;&gt;Refactoring: A developer&amp;rsquo;s guide to writing well &lt;a href=&#34;#refactoring-a-developers-guide-to-writing-well&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is my favorite session that I&amp;rsquo;ve had the opportunity to watch thus far.Writing is such a critical component of our jobs (and lives), and this primer ispresented in such a friendly manner.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/BbIILUSmSk4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;hiring-is-not-hazing&#34;&gt;Hiring is Not Hazing &lt;a href=&#34;#hiring-is-not-hazing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you&amp;rsquo;re associated with a tech company, and reading this around the time thatthis published - you&amp;rsquo;re probably hiring. Whether you are or not, take thisopportunity to evaluate the process you use to lead to better outcomes forcandidates and the organization.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KLHYZT2I28k&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;missing-guide-to-service-objects-in-rails&#34;&gt;Missing Guide to Service Objects in Rails &lt;a href=&#34;#missing-guide-to-service-objects-in-rails&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&amp;ldquo;Service objects&amp;rdquo; as a concept means so many different things to differentpeople. This talk introduces different philosophies people take in constructingservice objects and presents the trade-offs of each.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/XH1fbvexqyU&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;a-day-in-the-life-of-a-ruby-object&#34;&gt;A Day in the Life of a Ruby Object &lt;a href=&#34;#a-day-in-the-life-of-a-ruby-object&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Garbage collection, mark and sweep, page size, memory allocation - all conceptsthat can feel very intimidating. However, when presented so masterfullyeloquently, this talk is a great way to make these topics feel moreapproachable.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/PuNbdfdFBjk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;viewcomponents-in-the-real-world&#34;&gt;ViewComponents in the Real World &lt;a href=&#34;#viewcomponents-in-the-real-world&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Encapsulating view logic and presentation in &lt;a href=&#34;https://viewcomponent.org/&#34;&gt;ViewComponents&lt;/a&gt; helps promote reusable and testable objects to the view layer of your Rails app.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QoetqsBCsbE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;speed-up-your-test-suite-by-throwing-computers-at-it&#34;&gt;Speed up your test suite by throwing computers at it &lt;a href=&#34;#speed-up-your-test-suite-by-throwing-computers-at-it&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This has a number of keen insights on improving the performance of your overalltest suite.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/T3TipTdx_2k&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;engineering-mba-be-the-boss-of-your-own-work&#34;&gt;Engineering MBA: Be The Boss of Your Own Work &lt;a href=&#34;#engineering-mba-be-the-boss-of-your-own-work&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;ll be honest: I did not actually watch this talk. But let&amp;rsquo;s just say I&amp;rsquo;m&lt;strong&gt;very&lt;/strong&gt; familiar with the subject matter and the presentation.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6ldCGo29w5g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;talks-i-look-forward-to&#34;&gt;Talks I Look Forward To &lt;a href=&#34;#talks-i-look-forward-to&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I did not have the opportunity to watch everything I wanted to during theconference. Here is a small sampling of what&amp;rsquo;s still on my list.&lt;/p&gt;&lt;h3 id=&#34;the-history-of-making-mistakes&#34;&gt;The History of Making Mistakes &lt;a href=&#34;#the-history-of-making-mistakes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As someone that has &lt;em&gt;certainly&lt;/em&gt; never made a mistake before, I can&amp;rsquo;t wait tolearn what all the fuss is about.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/har1kdHqCDw&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;how-reference-librarians-can-help-us-help-each-other&#34;&gt;How Reference Librarians Can Help Us Help Each Other &lt;a href=&#34;#how-reference-librarians-can-help-us-help-each-other&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Anything that talks about how awesome librarians are is ok by me. I look forwardto hearing more about how I can approach my day-to-day work with the mindset andtools that a reference librarian brings to bear in their profession.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/A2Tr0DWfwAE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;what-the-fork&#34;&gt;What the fork()? &lt;a href=&#34;#what-the-fork&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Need something to be faster? We&amp;rsquo;ll fork a process and it&amp;rsquo;ll magically be better,because concurrency&amp;hellip;right? I&amp;rsquo;ll let you know after I give this talk a view.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/4crIuSj-irQ&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/railsconf-roundup-2021&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>ActiveRecord&#39;s New Takes a Block, Kid</title>
       <link>https://kevinjmurphy.com/posts/activerecord-new-block/</link>
       <pubDate>Fri, 14 May 2021 12:20:07 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/activerecord-new-block/</guid>
       <description>&lt;h2 id=&#34;making-new-activerecord-models-lets-try-it-againhttpsenwikipediaorgwikilet27s_try_it_again&#34;&gt;Making New ActiveRecord Models (&lt;a href=&#34;https://en.wikipedia.org/wiki/Let%27s_Try_It_Again&#34;&gt;Let&amp;rsquo;s Try It Again&lt;/a&gt;) &lt;a href=&#34;#making-new-activerecord-models-lets-try-it-againhttpsenwikipediaorgwikilet27s_try_it_again&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If we want to make a new instance of an ActiveRecord model with particularattributes, we have a number of options.&lt;/p&gt;&lt;p&gt;We can pass the attributes in as a hash:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can set the attributes after creating the object:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And there&amp;rsquo;s a third option - we can &lt;em&gt;also&lt;/em&gt; pass &lt;code&gt;new&lt;/code&gt; a block:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;when-could-we-use-this-the-blockhttpsenwikipediaorgwikithe_block_album&#34;&gt;When Could We Use This? (&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Block_(album)&#34;&gt;The Block&lt;/a&gt;) &lt;a href=&#34;#when-could-we-use-this-the-blockhttpsenwikipediaorgwikithe_block_album&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say we have a system that members of a band use to check their tourschedule. Band members are users, and when we add a member, we want to make auser for them.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_member&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @members &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: first_name, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: last_name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additionally, users have a username attribute, and we want to keep that uniquewithin a given band. We also want the system to define the username when we adda band member.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_member&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;band_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;last_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @members&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:last_name&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(last_name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; unique_value&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @members &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: first_name,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: last_name,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;username&lt;/span&gt;: username,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unique_value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, if we prefer the aesthetic, we can also define those attributes in ablock:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_member&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @members &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; last_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;band_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;last_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @members&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:last_name&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(last_name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; unique_value&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;seeing-the-result-the-right-stuffhttpsenwikipediaorgwikiyou_got_it_the_right_stuff&#34;&gt;Seeing The Result (&lt;a href=&#34;https://en.wikipedia.org/wiki/You_Got_It_(The_Right_Stuff)&#34;&gt;The Right Stuff&lt;/a&gt;) &lt;a href=&#34;#seeing-the-result-the-right-stuffhttpsenwikipediaorgwikiyou_got_it_the_right_stuff&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s check our work to see the usernames of our band members.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Band&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New Kids on the Block&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_member(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_member(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Donnie&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wahlberg&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_member(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;members&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:username&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New_Kids_on_the_Block_Knight&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New_Kids_on_the_Block_Wahlberg&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New_Kids_on_the_Block_Knight_65&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jonathan&amp;rsquo;s username has additional characters appended to it, as Jordan alreadyclaimed the username &lt;code&gt;&amp;quot;New_Kids_on_the_Block_Knight&amp;quot;&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;tap-dance-step-by-stephttpsenwikipediaorgwikistep_by_step_new_kids_on_the_block_song&#34;&gt;Tap Dance (&lt;a href=&#34;https://en.wikipedia.org/wiki/Step_by_Step_(New_Kids_on_the_Block_song)&#34;&gt;Step By Step&lt;/a&gt;) &lt;a href=&#34;#tap-dance-step-by-stephttpsenwikipediaorgwikistep_by_step_new_kids_on_the_block_song&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re familiar with Ruby&amp;rsquo;s &lt;code&gt;tap&lt;/code&gt; &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Kernel.html#method-i-tap&#34;&gt;method&lt;/a&gt;,you might be wondering what all the fuss is about. We can do the same thingwith &lt;code&gt;tap&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_member&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @members &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tap &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; last_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;band_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;last_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @members&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:last_name&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(last_name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; unique_value&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works with any Ruby object, not just those that inherit from&lt;code&gt;ActiveRecord::Base&lt;/code&gt;, so why bother with having to know if we can pass a blockto &lt;code&gt;new&lt;/code&gt; or not, based on what the object inherits from?&lt;/p&gt;&lt;p&gt;That&amp;rsquo;s fair, but &lt;code&gt;new&lt;/code&gt; is not the only ActiveRecord method that takes a block.Others include &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, and &lt;code&gt;find_or_initialize_by&lt;/code&gt;. There thedifferences with &lt;code&gt;tap&lt;/code&gt; start to show:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tap &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;new_user&lt;/code&gt; has the first name of Jonathan, resulting from the call to &lt;code&gt;tap&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, that&amp;rsquo;s only persisted in memory - not in the database. What we storedin the database is what we passed to &lt;code&gt;create&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also pass a block to &lt;code&gt;create&lt;/code&gt; directly:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in that case, the first name of the user in memory and in the database isJonathan.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why would we mix setting attributes with &lt;code&gt;create&lt;/code&gt; both by passing a hash &lt;em&gt;and&lt;/em&gt;a block, either with or without &lt;code&gt;tap&lt;/code&gt;? Other than to explain quirks anddifferences in what method you&amp;rsquo;re passing a block to, I am also interested inknowing. If you have real-world use cases, &lt;a href=&#34;https://twitter.com/kevin_j_m&#34;&gt;let me know&lt;/a&gt;!&lt;/p&gt;&lt;h2 id=&#34;finding-blocks-in-rails-source-code-face-the-musichttpsenwikipediaorgwikiface_the_music_new_kids_on_the_block_album&#34;&gt;Finding Blocks in Rails Source Code (&lt;a href=&#34;https://en.wikipedia.org/wiki/Face_the_Music_(New_Kids_on_the_Block_album)&#34;&gt;Face the Music&lt;/a&gt;) &lt;a href=&#34;#finding-blocks-in-rails-source-code-face-the-musichttpsenwikipediaorgwikiface_the_music_new_kids_on_the_block_album&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re curious about where in Rails&amp;rsquo; source code &lt;code&gt;new&lt;/code&gt; is set up to take ablock, we can start by &lt;a href=&#34;https://github.com/rails/rails/blob/70c5496542e5dc82ca28840cb01e710200ce5d14/activerecord/lib/active_record/base.rb#L299&#34;&gt;looking&lt;/a&gt;in &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. As of the time this article was published, there&amp;rsquo;s notmuch implementation in that class. Instead, we have to look in the &lt;code&gt;Core&lt;/code&gt; &lt;a href=&#34;https://github.com/rails/rails/blob/70c5496542e5dc82ca28840cb01e710200ce5d14/activerecord/lib/active_record/core.rb#L582&#34;&gt;module&lt;/a&gt;to find the &lt;code&gt;initialize&lt;/code&gt; method that takes a block.&lt;/p&gt;&lt;p&gt;Initializing an ActiveRecord model with a block is also defined in the&lt;a href=&#34;https://github.com/rails/rails/blob/70c5496542e5dc82ca28840cb01e710200ce5d14/activerecord/lib/active_record/base.rb#L35-L40&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Thanks for &lt;a href=&#34;https://en.wikipedia.org/wiki/Hangin%27_Tough&#34;&gt;hangin&amp;rsquo; tough&lt;/a&gt; tothe end of this article. I hope you learned a thing or two about passing blocksto ActiveRecord methods.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/activerecord-new-block&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Consistency Conundrum</title>
       <link>https://kevinjmurphy.com/posts/consistency-conundrum/</link>
       <pubDate>Sat, 24 Apr 2021 14:14:09 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/consistency-conundrum/</guid>
       <description>&lt;h2 id=&#34;evaluating-alternatives&#34;&gt;Evaluating Alternatives &lt;a href=&#34;#evaluating-alternatives&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/to-change-or-not-to-change/&#34;&gt;To Change Or Not To Change&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Consistency Conundrum&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;consistent-starting-point&#34;&gt;Consistent Starting Point &lt;a href=&#34;#consistent-starting-point&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our &lt;a href=&#34;https://kevinjmurphy.com/posts/to-change-or-not-to-change/&#34;&gt;previous&lt;/a&gt; post, we wrote the followingcode:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex_calculation&lt;/span&gt;(base_price, promo_code)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# calculation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We received this suggestion in code review:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You could consider using keyword arguments for this method.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;On the whole, we agree that keyword arguments would benefit this method.However, if keyword arguments are never used in this application, does that meanwe shouldn&amp;rsquo;t do it? We don&amp;rsquo;t want to be inconsistent!&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s consider some choices we could make specifically in regards to consistencywithin our application.&lt;/p&gt;&lt;h2 id=&#34;options&#34;&gt;Options &lt;a href=&#34;#options&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;do-nothing&#34;&gt;Do Nothing &lt;a href=&#34;#do-nothing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Generally, I don&amp;rsquo;t think this gets the credit it deserves as anexplicitly-defined option. The inertia of the system may be too great to warrantmaking the change. The choice to write or structure code in the application thisway may be intentional and necessary. It may introduce too much cognitiveoverhead to justify making the change. There are lots of excuses I could make tojustify not doing the work!&lt;/p&gt;&lt;p&gt;I don&amp;rsquo;t think any of these apply to our keyword arguments example. However, ifsomeone suggested:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This computation is natively supported in &lt;a href=&#34;https://numpy.org/&#34;&gt;NumPy&lt;/a&gt;. Haveyou considered integrating that?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Then I may want to cross-reference the implementations for correctness, but Imay not want to rewrite my application in Python or explore Ruby/Python bridgesto use that one function. I&amp;rsquo;m drawing on the consistency of the rest of myapplication being written in Ruby to justify that choice.&lt;/p&gt;&lt;h3 id=&#34;make-the-change-everywhere&#34;&gt;Make The Change Everywhere &lt;a href=&#34;#make-the-change-everywhere&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We could decide to invest the time and energy to use this convention&lt;em&gt;everywhere&lt;/em&gt; immediately. Then, we&amp;rsquo;d be consistent throughout our application!&lt;/p&gt;&lt;p&gt;In the case of our keyword arguments example, I would advise against that,unless there are only one or two other places where we&amp;rsquo;d use them, and they&amp;rsquo;reeasily identified.&lt;/p&gt;&lt;p&gt;Even then, I&amp;rsquo;d think twice about it. Any change has a risk, and changing theworking code purely in the name of consistency is a risk with limited upside.&lt;/p&gt;&lt;p&gt;However, consider this change:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;desired_widgets&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status IN &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;user_input&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the following code review suggestion:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;We should modify this method to sanitize user input before sending it as partof a database query.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If we created the query like this because it&amp;rsquo;s consistent with how otherqueries are written, then it&amp;rsquo;s time to drop everything and change that everywhere.We&amp;rsquo;ve opened ourselves up to &lt;a href=&#34;https://owasp.org/www-community/attacks/SQL_Injection&#34;&gt;SQL injection&lt;/a&gt;attacks and we need to immediately invest the time to remediate those issues forour application&amp;rsquo;s health and safety.&lt;/p&gt;&lt;p&gt;As a side note, consider a static security analysis tool like&lt;a href=&#34;https://brakemanscanner.org/&#34;&gt;Brakeman&lt;/a&gt; to &lt;a href=&#34;https://github.com/TheGnarCo/gnarails/blob/fe72e5fe74455400088d89f7af2a2d9bf1899d26/templates/bin/brakeman&#34;&gt;run automatically&lt;/a&gt;as part of your &lt;a href=&#34;https://github.com/TheGnarCo/gnarails/blob/fe72e5fe74455400088d89f7af2a2d9bf1899d26/templates/.circleci/config.yml#L49-L51&#34;&gt;build process&lt;/a&gt;so that your application is not solely relying on reviewers&amp;rsquo; eyes to catchcritical security implications.&lt;/p&gt;&lt;h3 id=&#34;make-the-change-here-and-going-forward&#34;&gt;Make The Change Here, And Going Forward &lt;a href=&#34;#make-the-change-here-and-going-forward&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For our keyword arguments example, I suggested not to make the changeeverywhere. However, that doesn&amp;rsquo;t mean we should ignore it in the name ofconsistency. If there&amp;rsquo;s a demonstrated benefit, we should take advantage ofthat. Instead, we can embrace the consistency of the standard &lt;em&gt;going forward&lt;/em&gt;.As you make future changes, be mindful of current best practices andconventions, and change existing code to meet those conventions as you haveanother reason to change the code.&lt;/p&gt;&lt;p&gt;Lastly, document these conventions so that it&amp;rsquo;s clear to all team members whatthe expectations are going forward if you encounter this question. That canreduce ambiguity and help people understand why this internal inconsistency exists.&lt;/p&gt;&lt;p&gt;This approach of leaving the code better than you found it can applyto long-reaching goals as well. If you&amp;rsquo;re converting an application from&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html&#34;&gt;JavaScript to TypeScript&lt;/a&gt;,you can convert files as you need to change them. Ifyou&amp;rsquo;re updating an application from &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec&#34;&gt;feature specs&lt;/a&gt;to &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/system-specs/system-spec&#34;&gt;system specs&lt;/a&gt;,you can do that as you change the area of code the feature spec is testing.&lt;/p&gt;&lt;h2 id=&#34;being-consistently-inconsistent&#34;&gt;Being Consistently Inconsistent &lt;a href=&#34;#being-consistently-inconsistent&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Software development is a rapidly evolving ecosystem of best practices, tools,and approaches. While we don&amp;rsquo;t intend to chase trends, we also need toincorporate new improvements that will benefit our applications - as long aswe&amp;rsquo;re intentional about them. For a healthy, long-running application, thatcan mean applying new paradigms in areas under active development, while leavingexisting work in its current state for the time being.&lt;/p&gt;&lt;p&gt;Living in the two worlds can be uncomfortable, and it is inconsistent. But it&amp;rsquo;sintentional inconsistency with a plan towards consistency and based on a valuejudgement on the cost of the change vs. the benefit it&amp;rsquo;ll provide.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/consistency-conundrum&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>To Change or Not to Change</title>
       <link>https://kevinjmurphy.com/posts/to-change-or-not-to-change/</link>
       <pubDate>Sun, 18 Apr 2021 07:29:25 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/to-change-or-not-to-change/</guid>
       <description>&lt;h2 id=&#34;evaluating-alternatives&#34;&gt;Evaluating Alternatives &lt;a href=&#34;#evaluating-alternatives&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;To Change Or Not To Change&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/consistency-conundrum/&#34;&gt;Consistency Conundrum&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;optional-feedback&#34;&gt;Optional Feedback &lt;a href=&#34;#optional-feedback&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Imagine you&amp;rsquo;ve just wrapped up a new feature and submitted it for code review,which includes the following method:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex_calculation&lt;/span&gt;(base_price, promo_code)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# calculation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One of your team members reviews the change, and leaves a suggestion.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You could consider using keyword arguments for this method.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That would change the method to look like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex_calculation&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;base_price&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;promo_code&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# calculation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Do you make this change? How do you decide?&lt;/p&gt;&lt;h2 id=&#34;evaluating-this-suggestion&#34;&gt;Evaluating This Suggestion &lt;a href=&#34;#evaluating-this-suggestion&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At &lt;a href=&#34;https://railsconf.com/2019/program/sessions#session-759&#34;&gt;RailsConf 2019&lt;/a&gt;, Iasked the question, &amp;ldquo;&lt;a href=&#34;https://www.youtube.com/watch?v=2NiePLJVjNI&#34;&gt;I know I can, but should I?&lt;/a&gt;&amp;rdquo;The talk provides a set of criteria you can use to make a choice betweenalternatives. Let&amp;rsquo;s apply that here.&lt;/p&gt;&lt;h3 id=&#34;impact&#34;&gt;Impact &lt;a href=&#34;#impact&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;From a functionality perspective, this makes no perceived difference. The codewill work the same one way or another and neither have any known or noticeableimplications, such as performance.&lt;/p&gt;&lt;p&gt;However, this alternative arose from a reaction a team member had who also needsto work on this code, so there must be some value in this suggestion to them.Additionally, this change, one way or another, will end up serving as prior artthat may be used to base future decisions on.&lt;/p&gt;&lt;p&gt;The change itself has very limited impact on the code itself, but it does looklike there&amp;rsquo;s a possible impact to the team worth exploring.&lt;/p&gt;&lt;h3 id=&#34;cost&#34;&gt;Cost &lt;a href=&#34;#cost&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Any change involves risk - and risk has a cost. For example, here we can&amp;rsquo;t onlymake the change to the method&amp;rsquo;s signature. We also need to modify any callersto use the keyword arguments. If we miss one,and don&amp;rsquo;t have complete test coverage, we may miss a call site - resulting in aruntime exception when the code is executed in production.&lt;/p&gt;&lt;p&gt;Considering that this is the place this method is introduced, this risk&lt;em&gt;should&lt;/em&gt; be clear to mitigate. Any callers will be in this changeset, so weshould be able to identify them while reviewing this change. Making this changeitself is not particularly risky.&lt;/p&gt;&lt;p&gt;Changing this method to keyword arguments should not take much time - I&amp;rsquo;vealready made the change to the method above! Now we only need to change thecallers. Even if this were an urgent need to get deployed as soon as possible,it seems reasonable that we could implement this here and now should we chooseto.&lt;/p&gt;&lt;h3 id=&#34;maintenance&#34;&gt;Maintenance &lt;a href=&#34;#maintenance&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Using keyword arguments here provides two benefits to callers: readability andflexibility.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m going to intentionally obscure variable names to make a point here, butcalling our method before looked like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_calculation_results&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  calculator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Calculator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#3c3d38&#34;&gt;&lt;span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;complex_calculation(@x, @y)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts result&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compare this to the keyword args approach:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_calculation_results&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  calculator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Calculator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#3c3d38&#34;&gt;&lt;span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_calculation(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#3c3d38&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;base_price&lt;/span&gt;: @x,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#3c3d38&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;promo_code&lt;/span&gt;: @y,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#3c3d38&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts result&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s more verbose, but subjectively, I think it&amp;rsquo;s also more readable andunderstandable.&lt;/p&gt;&lt;p&gt;It also frees us from caring about the position or order of the arguments.Calling the method this way works as well:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_calculation(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;promo_code&lt;/span&gt;: @y,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;base_price&lt;/span&gt;: @x,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I would tend to believe that the clarity and flexibility gained from the keywordarguments would make it easier to maintain code that used this method. It canalso prevent against subtle bugs, where you accidentally meant to pass &lt;code&gt;@x&lt;/code&gt; as thebase price, but instead you passed &lt;code&gt;@y&lt;/code&gt; first, because you forgot which argumentshould be in what order.&lt;/p&gt;&lt;p&gt;This seems like a maintenance win!&lt;/p&gt;&lt;h3 id=&#34;consistency&#34;&gt;Consistency &lt;a href=&#34;#consistency&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Keyword arguments were added to the ruby langauge in &lt;a href=&#34;https://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/&#34;&gt;Ruby 2.0.0&lt;/a&gt;, originallyreleased in 2013. In my experience, its usage is not a surprise to mostrubyists, nor an unwelcome one. Even if someone is unfamiliar with them,understanding the basic usage of them is well-received.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll talk more about consistency at the end.&lt;/p&gt;&lt;h2 id=&#34;verdict&#34;&gt;Verdict &lt;a href=&#34;#verdict&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We have an alternative that has no identified net impact on the function of thecode, but that a team member has a stated preference for. The change would notrequire an intense lift to accommodate, nor maintain. It (subjectively) improvesreadability and can prevent against subtle errors, and it uses a languagefeature that&amp;rsquo;s been supported for many, many years.&lt;/p&gt;&lt;p&gt;In a vacuum, this suggestion seems like a net positive. Given our criteria here,we should accept this change!&lt;/p&gt;&lt;p&gt;Different changes will be evaluated against thecriteria differently, and the weighted importance of the criteria will change,but we can still use the rubric as a framework for how to make a decision.&lt;/p&gt;&lt;p&gt;For an in-depth explanation of these criteria, I recommend watching the &lt;a href=&#34;https://www.youtube.com/watch?v=2NiePLJVjNI&amp;amp;feature=youtu.be&#34;&gt;fulltalk&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;is-it-that-simple&#34;&gt;Is It That Simple? &lt;a href=&#34;#is-it-that-simple&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I said above that when considering this suggestion in isolation, it seems like anet benefit. However, this code does not exist in a vacuum. It&amp;rsquo;s part of anexisting application, and needs to fit in with the rest of the ecosystem. Ileft out any discussion of consistency with the application itself.&lt;/p&gt;&lt;p&gt;If keyword arguments aren&amp;rsquo;t used anywhere else in the application, should wereject the change because it&amp;rsquo;s inconsistent? What criteria can we use todetermine how to maintain consistency &lt;strong&gt;and&lt;/strong&gt; support change? We&amp;rsquo;ll explore thatin our &lt;a href=&#34;https://kevinjmurphy.com/posts/consistency-conundrum/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/to-change-or-not-to-change&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Wrapping Up Rails Exceptional Behavior</title>
       <link>https://kevinjmurphy.com/posts/wrapping-up-rails-exceptional-behavior/</link>
       <pubDate>Sun, 28 Mar 2021 14:15:20 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/wrapping-up-rails-exceptional-behavior/</guid>
       <description>&lt;h2 id=&#34;exceptional-behavior-in-rails&#34;&gt;Exceptional Behavior in Rails &lt;a href=&#34;#exceptional-behavior-in-rails&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/&#34;&gt;(W)rapping About Exceptional Behavior In Rails&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Wrapping Up Rails Exceptional Behavior&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;reset&#34;&gt;Reset &lt;a href=&#34;#reset&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our &lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/&#34;&gt;last post&lt;/a&gt;, weencountered some inconsistent behavior between Rails 5 and Rails 6. In Rails 5,raising a &lt;code&gt;RuntimeError&lt;/code&gt; in a controller after rescuing from an&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception was still returning a 404 HTTP statuscode. In Rails 6, the status code is a 500.&lt;/p&gt;&lt;p&gt;We looked around, and we think we&amp;rsquo;ve isolated the area of interest to be in the&lt;code&gt;ExceptionWrapper&lt;/code&gt; &lt;a href=&#34;https://github.com/rails/rails/blob/63d3f3f4d868a5ed9eacf00af2a80278aa005051/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb&#34;&gt;class&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;revisit-the-wrapper&#34;&gt;Revisit The Wrapper &lt;a href=&#34;#revisit-the-wrapper&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We looked into what was creating our wrapper and discovered that we were alwayspassing it the &lt;code&gt;RuntimeError&lt;/code&gt;. After taking a much-needed break, we startreading the code again, and, almost immediately, we see a &lt;a href=&#34;https://github.com/rails/rails/blob/63d3f3f4d868a5ed9eacf00af2a80278aa005051/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L36&#34;&gt;transformation&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(backtrace_cleaner, exception)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @backtrace_cleaner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backtrace_cleaner&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @exception &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; original_exception(exception)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The exception that is passed in is modified. Let&amp;rsquo;s look at this&lt;code&gt;original_exception&lt;/code&gt; &lt;a href=&#34;https://github.com/rails/rails/blob/63d3f3f4d868a5ed9eacf00af2a80278aa005051/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L106-L112&#34;&gt;method&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;original_exception&lt;/span&gt;(exception)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_key?(exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cause&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cause&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exception&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recall that our &lt;code&gt;RuntimeError&lt;/code&gt; is raised as a result of handling an&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception. The &lt;code&gt;RecordNotFound&lt;/code&gt; exception &lt;strong&gt;is&lt;/strong&gt; the&lt;a href=&#34;https://ruby-doc.org/core-3.0.0/Exception.html#method-i-cause&#34;&gt;cause&lt;/a&gt; of the &lt;code&gt;RuntimeError&lt;/code&gt;. We previously discovered that &lt;code&gt;RecordNotFound&lt;/code&gt; is added to &lt;code&gt;@@rescue_responses&lt;/code&gt; in ActiveRecord&amp;rsquo;s &lt;a href=&#34;https://github.com/rails/rails/blob/d75c2a175215c0f6d011b60f1c9f2b6466184adb/activerecord/lib/active_record/railtie.rb#L22-L27&#34;&gt;railtie&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The cause of our exception is in the hash, and as such, the &lt;strong&gt;cause&lt;/strong&gt; is set asthe &lt;code&gt;@exception&lt;/code&gt; variable in the initializer. That cause is &lt;code&gt;RecordNotFound&lt;/code&gt;,and a &lt;code&gt;RecordNotFound&lt;/code&gt; exception is supposed to return a 404 status code.&lt;/p&gt;&lt;p&gt;We can now explain why a 404 is returned!&lt;/p&gt;&lt;h2 id=&#34;regifting-rails-6-redux&#34;&gt;Regifting (Rails 6 Redux) &lt;a href=&#34;#regifting-rails-6-redux&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We now have a handle on the behavior in Rails 5; however, this investigationstarted because we noticed it was different in Rails 5 and Rails 6. Let&amp;rsquo;s checkin on the &lt;code&gt;ExceptionWrapper&lt;/code&gt; initializer in &lt;a href=&#34;https://github.com/rails/rails/blob/0440369d03ae99f9f044b00e39dcd3d9871c65c2/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L46-L48&#34;&gt;Rails 6&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(backtrace_cleaner, exception)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @backtrace_cleaner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backtrace_cleaner&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @exception &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exception&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No longer are we retrieving the &lt;code&gt;original_exception&lt;/code&gt;. That doesn&amp;rsquo;t tell thewhole story though. When we ask for the &lt;a href=&#34;https://github.com/rails/rails/blob/4c78cc8b04861f02d660aefc37979eb2244db6ba/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L62&#34;&gt;status code&lt;/a&gt;, we&amp;rsquo;re not using &lt;code&gt;@exception&lt;/code&gt;. Instead, we now have an &lt;code&gt;unwrapped_exception&lt;/code&gt; to &lt;a href=&#34;https://github.com/rails/rails/blob/4c78cc8b04861f02d660aefc37979eb2244db6ba/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L49-L55&#34;&gt;investigate&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unwrapped_exception&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; wrapper_exceptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cause&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exception&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rather than looking in &lt;code&gt;rescue_responses&lt;/code&gt;, we&amp;rsquo;re now looking in&lt;code&gt;wrapper_exceptions&lt;/code&gt;, which it appears is a &lt;a href=&#34;https://github.com/rails/rails/blob/4c78cc8b04861f02d660aefc37979eb2244db6ba/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L35-L37&#34;&gt;list&lt;/a&gt; of one exception that shouldbehave particularly exceptionally.&lt;/p&gt;&lt;p&gt;If the exception is an &lt;code&gt;ActionView::Template::Error&lt;/code&gt;, then look up the statuscode based on the cause of the exception. Otherwise, determine it based on theexception itself.&lt;/p&gt;&lt;p&gt;&lt;code&gt;RuntimeError&lt;/code&gt; isn&amp;rsquo;t in this list of &lt;code&gt;wrapper_exceptions&lt;/code&gt;, so we don&amp;rsquo;t use thecause (&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;) to determine the status code. We use the&lt;code&gt;RuntimeError&lt;/code&gt; itself. That has no special handling in &lt;code&gt;rescue_responses&lt;/code&gt;, so a500 HTTP status code is returned.&lt;/p&gt;&lt;h2 id=&#34;thank-you-card&#34;&gt;Thank You Card &lt;a href=&#34;#thank-you-card&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/rails/rails/pull/35049/commits/ef40fb6fd88f2e3c3f989aef65e3ddddfadee814&#34;&gt;commit&lt;/a&gt; that makes this change contains a very well-worded description of this scenario, including:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When the cause is mapped to an HTTP status code the last exception is unexpectedly uwrapped&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/yuki24&#34;&gt;Yuki Nishijima&lt;/a&gt; for fixing this!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/wrapping-up-rails-exceptional-behavior&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>(W)rapping About Exceptional Behavior in Rails</title>
       <link>https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/</link>
       <pubDate>Sun, 21 Mar 2021 20:24:01 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/</guid>
       <description>&lt;h2 id=&#34;exceptional-behavior-in-rails&#34;&gt;Exceptional Behavior in Rails &lt;a href=&#34;#exceptional-behavior-in-rails&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;(W)rapping About Exceptional Behavior In Rails&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-up-rails-exceptional-behavior/&#34;&gt;Wrapping Up Rails Exceptional Behavior&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;reset&#34;&gt;Reset &lt;a href=&#34;#reset&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&#34;pop-quiz&#34;&gt;Pop Quiz &lt;a href=&#34;#pop-quiz&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Consider the following controller:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FoosController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActionController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;API&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rescue_from &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RecordNotFound&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;with&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:raise_not_found&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RecordNotFound&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    head &lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raise_not_found&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;What status code?&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we have an endpoint that that always raises &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;.However, we&amp;rsquo;re &lt;a href=&#34;https://api.rubyonrails.org/v6.1.1/classes/ActiveSupport/Rescuable/ClassMethods.html&#34;&gt;using&lt;/a&gt;&lt;code&gt;rescue_from&lt;/code&gt; to handle this exception, and raise a new &lt;code&gt;RuntimeError&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;When you hit this controller endpoint, what status code do you expect toreceive?&lt;/p&gt;&lt;h2 id=&#34;it-depends&#34;&gt;It Depends &lt;a href=&#34;#it-depends&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In Rails 6, we get a 500.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; curl -I -X POST localhost:3000/foos&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; Internal Server Error&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, in Rails 5, we get a 404.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; curl -I -X POST localhost:3000/foos&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt; Not Found&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why does this difference exist? Let&amp;rsquo;s dig into how to investigate.&lt;/p&gt;&lt;h2 id=&#34;research&#34;&gt;Research &lt;a href=&#34;#research&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;ve ever hit the &lt;code&gt;#show&lt;/code&gt; route for a resource, passing it an ID that doesn&amp;rsquo;texist, you may have noticed that Rails responds with a 404 Not Found HTTP statuscode. Rails is intercepting the exception that&amp;rsquo;s raised from calling &lt;code&gt;find&lt;/code&gt;(&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;) and, rather than returning a 500, it knows toreturn a 404 instead.&lt;/p&gt;&lt;h3 id=&#34;start-with-what-you-know&#34;&gt;Start With What You Know &lt;a href=&#34;#start-with-what-you-know&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To give us some grounding, let&amp;rsquo;s begin by explicitly stating what we believe to betrue:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rails has some special handling of certain exceptions to respond with adifferent HTTP status code.&lt;/li&gt;&lt;li&gt;If we &lt;code&gt;rescue_from&lt;/code&gt; one of those exceptions in Rails 5 and re-raise a newexception, we&amp;rsquo;ll still see that special handling behavior.&lt;/li&gt;&lt;li&gt;In Rails 6, with the same implementation, the server now responds with a 500,no longer considering it a special case.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;go-explore&#34;&gt;Go Explore &lt;a href=&#34;#go-explore&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The exception that we know exhibits this behavior is&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;. We also know that Rails returns a 404 Not Foundstatus code. If we search through the Rails codebase for &lt;a href=&#34;https://github.com/rails/rails/search?p=1&amp;amp;q=RecordNotFound&#34;&gt;RecordNotFound&lt;/a&gt; or &lt;a href=&#34;https://github.com/rails/rails/search?p=1&amp;amp;q=not_found&#34;&gt;not_found&lt;/a&gt; (which is the &lt;a href=&#34;https://guides.rubyonrails.org/layouts_and_rendering.html#using-render&#34;&gt;symbol representation&lt;/a&gt; of the status code), we get a number of results - but there are fewer for &lt;code&gt;not_found&lt;/code&gt;, so let&amp;rsquo;s look through that.&lt;/p&gt;&lt;p&gt;Towards the bottom of the first page of results (as of this writing), we see the&lt;code&gt;ExceptionWrapper&lt;/code&gt; class, which includes &lt;a href=&#34;https://github.com/rails/rails/blob/291a3d2ef29a3842d1156ada7526f4ee60dd2b59/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L8-L24&#34;&gt;this&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cattr_accessor &lt;span style=&#34;color:#e6db74&#34;&gt;:rescue_responses&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Hash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;:internal_server_error&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge!(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::RoutingError&amp;#34;&lt;/span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AbstractController::ActionNotFound&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::MethodNotAllowed&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:method_not_allowed&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::UnknownHttpMethod&amp;#34;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:method_not_allowed&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::NotImplemented&amp;#34;&lt;/span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_implemented&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::UnknownFormat&amp;#34;&lt;/span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_acceptable&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionDispatch::Http::MimeNegotiation::InvalidType&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_acceptable&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::MissingExactTemplate&amp;#34;&lt;/span&gt;             &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_acceptable&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::InvalidAuthenticityToken&amp;#34;&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:unprocessable_entity&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::InvalidCrossOriginRequest&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:unprocessable_entity&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionDispatch::Http::Parameters::ParseError&amp;#34;&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::BadRequest&amp;#34;&lt;/span&gt;                       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::ParameterMissing&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rack::QueryParser::ParameterTypeError&amp;#34;&lt;/span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rack::QueryParser::InvalidParameterError&amp;#34;&lt;/span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This looks like a big list of exceptions that are mapped to HTTP status codes.This seems promising - but &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; isn&amp;rsquo;t in this hash!&lt;/p&gt;&lt;p&gt;If we search further, we will eventually run into &lt;a href=&#34;https://github.com/rails/rails/blob/d75c2a175215c0f6d011b60f1c9f2b6466184adb/activerecord/lib/active_record/railtie.rb#L22-L27&#34;&gt;ActiveRecord&amp;rsquo;s railtie&lt;/a&gt;,which includes:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;action_dispatch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge!(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::RecordNotFound&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::StaleObjectError&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:conflict&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::RecordInvalid&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:unprocessable_entity&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::RecordNotSaved&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:unprocessable_entity&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is adding ActiveRecord exceptions to that same hash we saw above in&lt;code&gt;ActionDispatch&lt;/code&gt;. We&amp;rsquo;ve found where the special handling of mapping exceptionsto status codes occurs!&lt;/p&gt;&lt;h3 id=&#34;pull-out-some-tools&#34;&gt;Pull Out Some Tools &lt;a href=&#34;#pull-out-some-tools&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Returning to the &lt;code&gt;ExceptionWrapper&lt;/code&gt; class, we see the &lt;code&gt;status_code_for_exception&lt;/code&gt; &lt;a href=&#34;https://github.com/rails/rails/blob/291a3d2ef29a3842d1156ada7526f4ee60dd2b59/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L117-L119&#34;&gt;method&lt;/a&gt;, which looks to take in an exception class and convert it to a status code, based on the &lt;code&gt;@@rescue_responses&lt;/code&gt; hash.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status_code_for_exception&lt;/span&gt;(class_name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Rack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code(@@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;class_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maybe if we could see what class name is getting passed into that, we could seeif the exception is somehow getting transformed before or after that point. But,we need a way to get into the rails source code on our running rails app -that&amp;rsquo;s not our code; how can we do that?&lt;/p&gt;&lt;h4 id=&#34;opening-a-world-of-possibilities&#34;&gt;&lt;code&gt;Open&lt;/code&gt;ing A World of Possibilities &lt;a href=&#34;#opening-a-world-of-possibilities&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Rails 5 appears to be showing confusing results - we&amp;rsquo;re explicitly raising a&lt;code&gt;RuntimeError&lt;/code&gt;, but it&amp;rsquo;s returning a 404. As such, let&amp;rsquo;s look in Rails 5.&lt;/p&gt;&lt;p&gt;You can &lt;a href=&#34;https://boringrails.com/tips/bundle-open-debug-gems&#34;&gt;access the source&lt;/a&gt;of any dependency using bundler&amp;rsquo;s &lt;code&gt;open&lt;/code&gt; &lt;a href=&#34;https://bundler.io/bundle_open.html&#34;&gt;command&lt;/a&gt;.Rails itself is a series of gems, and we can see that this &lt;code&gt;ExceptionWrapper&lt;/code&gt;is part of &lt;code&gt;actionpack&lt;/code&gt;, so let&amp;rsquo;s open that up:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle open actionpack&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will open up the source code for the &lt;code&gt;actionpack&lt;/code&gt; gem in the editor you havedefined. We open the &lt;code&gt;ExceptionWrapper&lt;/code&gt; class, and we know we want to find outwhat value is passed to it, but we&amp;rsquo;re not sure what else we might want to seewhile we&amp;rsquo;re there. Using &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.0/libdoc/irb/rdoc/Binding.html&#34;&gt;Ruby&amp;rsquo;s&lt;/a&gt; &lt;code&gt;binding.irb&lt;/code&gt;, we can &lt;a href=&#34;https://jemma.dev/blog/binding-irb&#34;&gt;start a console&lt;/a&gt; when we hit that method.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status_code_for_exception&lt;/span&gt;(class_name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  binding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;irb&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Rack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code(@@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;class_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After starting a rails server, and issuing a request to our endpoint via curl,we eventually hit our breakpoint:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;From&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;/ruby/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ruby&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gems&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gems&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;actionpack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;action_dispatch&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;middleware&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;exception_wrapper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rb &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt; line &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; :&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;:         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Full Trace&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; full_trace_with_ids&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;:       }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status_code_for_exception&lt;/span&gt;(class_name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;:       binding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;irb&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;:       &lt;span style=&#34;color:#66d9ef&#34;&gt;Rack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code(@@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;class_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;source_extracts&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;:       backtrace&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;trace&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  class_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RuntimeError&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This isn&amp;rsquo;t surprising that we&amp;rsquo;re getting the &lt;code&gt;RuntimeError&lt;/code&gt;, but doesn&amp;rsquo;t helpexplain how we&amp;rsquo;re getting a 404 returned. Let&amp;rsquo;s exit and regroup on a newstrategy.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; exit&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Completed&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;ms (&lt;span style=&#34;color:#e6db74&#34;&gt;ActiveRecord&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;ms)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;From&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;/ruby/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ruby&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gems&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gems&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;actionpack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;action_dispatch&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;middleware&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;exception_wrapper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rb &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt; line &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; :&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;:         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Full Trace&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; full_trace_with_ids&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;:       }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status_code_for_exception&lt;/span&gt;(class_name)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;:       binding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;irb&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;:       &lt;span style=&#34;color:#66d9ef&#34;&gt;Rack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code(@@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;class_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;source_extracts&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;:       backtrace&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;trace&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait! This method is called a second time. And that time, the class name is&lt;em&gt;still&lt;/em&gt; &lt;code&gt;&amp;quot;RuntimeError&amp;quot;&lt;/code&gt;. It gets called a &lt;strong&gt;third&lt;/strong&gt; time, and that time, we see:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; class_name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::RecordNotFound&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ve found our &lt;code&gt;NotFound&lt;/code&gt;! But - what do we do now?&lt;/p&gt;&lt;h3 id=&#34;calling-in-a-favor&#34;&gt;&lt;code&gt;Call&lt;/code&gt;ing In A Favor &lt;a href=&#34;#calling-in-a-favor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;re still in our console session, and we&amp;rsquo;ve executed the &lt;code&gt;status_code_for_exception&lt;/code&gt; for the third time when processing a single HTTP request. What&amp;rsquo;s calling this method? Ruby will tell us its &lt;a href=&#34;https://ruby-doc.org/core-3.0.0/Kernel.html#method-i-caller&#34;&gt;caller&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; caller&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/workspace.rb:85:in `eval&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/workspace.rb:85:in `evaluate&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/context.rb:385:in `evaluate&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:493:in `block (2 levels) in eval_input&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:647:in `signal_status&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:490:in `block in eval_input&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:246:in `block (2 levels) in each_top_level_statement&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:232:in `loop&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:232:in `block in each_top_level_statement&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:231:in `catch&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:231:in `each_top_level_statement&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:489:in `eval_input&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:428:in `block in run&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:427:in `catch&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:427:in `run&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:796:in `irb&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/exception_wrapper.rb:86:in `status_code_for_exception&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/exception_wrapper.rb:46:in `status_code&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/debug_exceptions.rb:105:in `render_for_browser_request&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/debug_exceptions.rb:87:in `render_exception&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/extensions.rb:28:in `render_exception_with_web_console&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/debug_exceptions.rb:71:in `rescue in call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/debug_exceptions.rb:59:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:135:in `call_app&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:30:in `block in call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:20:in `catch&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:20:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/show_exceptions.rb:33:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/railties-5.2.4.5/lib/rails/rack/logger.rb:38:in `call_app&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/railties-5.2.4.5/lib/rails/rack/logger.rb:26:in `block in call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/activesupport-5.2.4.5/lib/active_support/tagged_logging.rb:71:in `block in tagged&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/activesupport-5.2.4.5/lib/active_support/tagged_logging.rb:28:in `tagged&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/activesupport-5.2.4.5/lib/active_support/tagged_logging.rb:71:in `tagged&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/railties-5.2.4.5/lib/rails/rack/logger.rb:26:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/sprockets-rails-3.2.2/lib/sprockets/rails/quiet_assets.rb:13:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/remote_ip.rb:81:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/request_id.rb:27:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/rack-2.2.3/lib/rack/method_override.rb:24:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/rack-2.2.3/lib/rack/runtime.rb:22:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/activesupport-5.2.4.5/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/executor.rb:14:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/static.rb:127:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/rack-2.2.3/lib/rack/sendfile.rb:110:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/railties-5.2.4.5/lib/rails/engine.rb:524:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/configuration.rb:227:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/server.rb:706:in `handle_request&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/server.rb:476:in `process_client&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/server.rb:334:in `block in run&amp;#39;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/thread_pool.rb:135:in `block in spawn_thread&amp;#39;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starting from the bottom, we can see the full path that leads us to executing&lt;code&gt;status_code_for_exception&lt;/code&gt;. Tracing our way backwards from&lt;code&gt;status_code_for_exception&lt;/code&gt;, we eventually find where the &lt;code&gt;ExceptionWrapper&lt;/code&gt; is&lt;a href=&#34;https://github.com/rails/rails/blob/63d3f3f4d868a5ed9eacf00af2a80278aa005051/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb#L78&#34;&gt;created&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;render_exception&lt;/span&gt;(request, exception)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  backtrace_cleaner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_dispatch.backtrace_cleaner&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wrapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(backtrace_cleaner, exception)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We drop a &lt;code&gt;binding.irb&lt;/code&gt; in here, and it looks like the exception is always our&lt;code&gt;RuntimeError&lt;/code&gt;. It looks like something inside of &lt;code&gt;ExceptionWrapper&lt;/code&gt; is doing&lt;em&gt;something&lt;/em&gt; to change this to an &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception.&lt;/p&gt;&lt;h3 id=&#34;walk-away&#34;&gt;Walk Away &lt;a href=&#34;#walk-away&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;ve been at this for a while, and we&amp;rsquo;ve got a lead to track down, but at thispoint, let&amp;rsquo;s take a break. We should clean up our mess by &lt;a href=&#34;https://bundler.io/man/bundle-pristine.1.html&#34;&gt;restoring&lt;/a&gt;&lt;code&gt;actionpack&lt;/code&gt; back to how it was before.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle pristine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take stock in what we&amp;rsquo;ve done:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identified that Rails has a list of exceptions that it maps to specific HTTPstatus codes.&lt;/li&gt;&lt;li&gt;Used &lt;code&gt;bundle open&lt;/code&gt; to manipulate the source code of our dependency.&lt;/li&gt;&lt;li&gt;Inserted a &lt;code&gt;binding.irb&lt;/code&gt; to play around in a method that we think isinteresting, and asked where it&amp;rsquo;s being invoked with &lt;code&gt;caller&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Confirmed that what&amp;rsquo;s calling our class in question is always passing it a &lt;code&gt;RuntimeError&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We still don&amp;rsquo;t know where the &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception is comingfrom.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll take another look at this with fresh eyes in our &lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-up-rails-exceptional-behavior/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/wrapping-about-exceptional-behavior-in-rails&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Engineering MBA</title>
       <link>https://kevinjmurphy.com/posts/engineering-mba/</link>
       <pubDate>Fri, 12 Mar 2021 20:30:07 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/engineering-mba/</guid>
       <description>&lt;h2 id=&#34;apply-to-graduate&#34;&gt;Apply To Graduate &lt;a href=&#34;#apply-to-graduate&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Congratulations on completing your coursework. To receive your diploma, pleasefill out the form below.&lt;/p&gt;&lt;p style=&#34;text-align: center;&#34;&gt;  &lt;a href=&#34;https://engineering-mba-diploma.herokuapp.com/&#34;)&gt;Claim Your Diploma&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6ldCGo29w5g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://youtu.be/6ldCGo29w5g&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/engineering-mba&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba-proposal/&#34;&gt;Proposal&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/situational-leadership/&#34;&gt;Situational Leadership&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/competitive-advantage/&#34;&gt;Competitive Advantage&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/core-competency/&#34;&gt;Core Competency&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/business-process-management/&#34;&gt;Business Process Management&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;curriculum&#34;&gt;Curriculum &lt;a href=&#34;#curriculum&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;situational-leadership&#34;&gt;Situational Leadership &lt;a href=&#34;#situational-leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Situational_leadership_theory&#34;&gt;Situational Leadership Model&lt;/a&gt; posits that there are four different styles ofleadership.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directing - provide close, detailed supervision with clear instructions andexpectations.&lt;/li&gt;&lt;li&gt;Coaching - focus on getting buy-in from the team on explaining why decisionsare made the way they are.&lt;/li&gt;&lt;li&gt;Supporting - shift decision-making ownership to the team and facilitatediscussion amongst the team to reach decisions and provide encouragement.&lt;/li&gt;&lt;li&gt;Delegating - focus on overall vision, trusting the team with autonomy onday-to-day decision-making.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A leader must be able to exhibit all of these styles. Otherwise, they&amp;rsquo;ll only beeffective in very specific scenarios with a very specific group of people at agiven time. In order to determine which style to use at a given time, considerhow much relationship and task behavior is required by the individual or team atthe moment.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/situational-leadership.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;Consider this model when you&amp;rsquo;re in a position of leadership, or to identify whattype of leadership you or your team would benefit from at the moment. Sprintplanning exercises are an opportunity to understand how different leadershipstyles can benefit different people on a specific task.&lt;/p&gt;&lt;h3 id=&#34;competitive-advantage&#34;&gt;Competitive Advantage &lt;a href=&#34;#competitive-advantage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A firm&amp;rsquo;s &lt;a href=&#34;https://corporatefinanceinstitute.com/resources/knowledge/strategy/competitive-advantage/&#34;&gt;competitive advantage&lt;/a&gt; is the attributes that allow it to flourish against competitors. There are three general competitive &lt;a href=&#34;https://www.ifm.eng.cam.ac.uk/research/dstools/porters-generic-competitive-strategies/&#34;&gt;strategies&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cost.&lt;/li&gt;&lt;li&gt;Differentiation.&lt;/li&gt;&lt;li&gt;Focus.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;core-competency&#34;&gt;Core Competency &lt;a href=&#34;#core-competency&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A firm&amp;rsquo;s &lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-662-41482-8_46&#34;&gt;core competencies&lt;/a&gt; are the very specific set of qualities or characteristics that drive success. A core competency must meet all of the following criteria:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Provides access to various markets.&lt;/li&gt;&lt;li&gt;Contributes to perceived customer benefit.&lt;/li&gt;&lt;li&gt;Difficult for competitors to imitate.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Identification of core competencies can aid in more quickly answering your nextbuild vs. buy vs. borrow conundrum when building out a feature.&lt;/p&gt;&lt;h3 id=&#34;business-process-management&#34;&gt;Business Process Management &lt;a href=&#34;#business-process-management&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Dr. Thomas Davenport &lt;a href=&#34;https://books.google.com/books?id=kLlIOMGaKnsC&amp;amp;lpg=PP1&amp;amp;pg=PA5#v=onepage&amp;amp;q&amp;amp;f=false&#34;&gt;defines a process&lt;/a&gt; as:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;a structured, measured set of activities designed to produce a specificoutput.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The Association of Business Process Management &lt;a href=&#34;https://www.abpmp.org/page/BPM_Profession&#34;&gt;states&lt;/a&gt;that Business Process Management&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;enables an enterprise to align its business processes to its businessstrategy.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Managing and delivering iterative improvements of a &lt;a href=&#34;https://www.bpminstitute.org/resources/articles/what-bpm-anyway-business-process-management-explained&#34;&gt;business process&lt;/a&gt; involvesfollowing these cyclical steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Design - document the existing process and propose an improved future state.&lt;/li&gt;&lt;li&gt;Model - perform &amp;ldquo;what if&amp;rdquo; analysis to subject different theoreticalconstraints to the proposed future state.&lt;/li&gt;&lt;li&gt;Execute - in an automated &lt;em&gt;or&lt;/em&gt; manual fashion, roll out the future state to asmall group.&lt;/li&gt;&lt;li&gt;Monitor - track and report on key performance indicators (KPIs) to observethe impact of the change.&lt;/li&gt;&lt;li&gt;Optimize - identify current bottlenecks and feed that in to future designiterations.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;business-process-reengineering&#34;&gt;Business Process Reengineering &lt;a href=&#34;#business-process-reengineering&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://hbr.org/1990/07/reengineering-work-dont-automate-obliterate&#34;&gt;Reengineering&lt;/a&gt; is the big rewrite of processes. The process is reimagined from the ground-up, ensuring that each step in the flow directly contributes to the intended goal and adds value.&lt;/p&gt;&lt;p&gt;Much of our work as software developers involves managing processes. Whetherwe&amp;rsquo;re optimizing our individual developer workflow, or automating businessprocesses, we can follow the same methodical approach to know if we&amp;rsquo;ve succeededin improving stakeholders&amp;rsquo; well-being.&lt;/p&gt;&lt;p&gt;Ensure that the ultimate focus is notpurely on solving the optimization problem - consider the impact andconsequences of the work being delivered for users of the system and thoseotherwise impacted by the decisions made by the system.&lt;/p&gt;&lt;p&gt;Dr. Hammer, credited with introducing the concept of Business ProcessReengineering, later &lt;a href=&#34;https://www.wsj.com/articles/SB848961197738163500&#34;&gt;stated&lt;/a&gt; that,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I was reflecting my engineering background and was insufficientlyappreciative of the human dimension.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Dr. Davenport, who provided our definition of a process above, also&lt;a href=&#34;https://www.fastcompany.com/26310/fad-forgot-people&#34;&gt;remarked&lt;/a&gt;,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The rock that reengineering has foundered on is simple: people.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Consider the consequences of our work. Not only for the team building thesystem, or using the system, or that uses its output. Consider the impact onsystems and individuals who are affected by the decisions your system makes whodon&amp;rsquo;t even know your system exists.&lt;/p&gt;&lt;h2 id=&#34;extra-credit-reading&#34;&gt;Extra Credit Reading &lt;a href=&#34;#extra-credit-reading&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Getting-Yes-Negotiating-Agreement-Without/dp/0143118757&#34;&gt;Getting To Yes&lt;/a&gt;: This is a seminal read on negotiation tactics. If you&amp;rsquo;ve heard of BATNA, best alternative to a negotiated agreement, this is where that comes from.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Reengineering-Corporation-Manifesto-Business-Revolution/dp/0887306403&#34;&gt;Reengineering the Corporation&lt;/a&gt;: Our coursework introduces the topic of Business Process Reengineering. If you&amp;rsquo;d like to dig in further, this is the book to pick up.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Blue-Ocean-Strategy-Expanded-Uncontested/dp/1625274491&#34;&gt;Blue Ocean Strategy&lt;/a&gt;: If you&amp;rsquo;re interested in how to explore different strategies for a successful business, I recommend reading this.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Good-Great-Some-Companies-Others/dp/0066620996/&#34;&gt;Good to Great&lt;/a&gt;: This is a fascinating dissection of the characteristics and qualities that define successful companies over the long-term.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Essentials-Business-Communication-Ellen-Guffey/dp/1337386499/&#34;&gt;Essentials of Business Communication&lt;/a&gt;: I&amp;rsquo;m only familiar with the 7th edition of this textbook, but it&amp;rsquo;s a reference I continue to use today when I need to structure a certain kind of written business report or communication.&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Engineering MBA @ RailsConf</title>
       <link>https://kevinjmurphy.com/posts/engineering-mba-railsconf/</link>
       <pubDate>Mon, 08 Mar 2021 08:12:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/engineering-mba-railsconf/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be speaking as part of RailsConf 2021, which you can join from&lt;a href=&#34;http://railsconf.com/&#34;&gt;wherever&lt;/a&gt; you are. I hope you&amp;rsquo;ll join &lt;a href=&#34;https://railsconf.com/program/sessions#session-1136&#34;&gt;my session&lt;/a&gt;and many others from April 13 - 15, 2021.&lt;/p&gt;&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Improve your work as a developer with an introduction to strategic planning,situational leadership, and process management. No balance sheets or incomestatements here; join me to learn the MBA skills valuable to developers withoutthe opportunity costs of lost wages or additional student loans.&lt;/p&gt;&lt;p&gt;Demystify the strategic frameworks your management team may use to makedecisions and learn how you can use those same concepts in your daily work.Explore the synergy one developer achieved by going to business school (sorry,the synergy comment slipped out - old habit).&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Featured in Ruby Weekly 541</title>
       <link>https://kevinjmurphy.com/posts/ruby-weekly-541/</link>
       <pubDate>Thu, 25 Feb 2021 18:20:36 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-weekly-541/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m excited to be in this week&amp;rsquo;s Ruby Weekly, &lt;a href=&#34;https://rubyweekly.com/issues/541&#34;&gt;#541&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_541.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;The article they included is a &lt;a href=&#34;https://kevinjmurphy.com/posts/querying-papertrail-object-changes-json/&#34;&gt;post&lt;/a&gt;from my employer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/querying-papertrail-object-changes-json&#34;&gt;blog&lt;/a&gt;about querying for JSON data in your database. The specific use case is usingPaperTrail&amp;rsquo;s versions to query for what changed.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Querying PaperTrail Object Changes in JSON</title>
       <link>https://kevinjmurphy.com/posts/querying-papertrail-object-changes-json/</link>
       <pubDate>Mon, 15 Feb 2021 16:47:03 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/querying-papertrail-object-changes-json/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail&#34;&gt;PaperTrail&lt;/a&gt; may be a fit foryour rails app if you&amp;rsquo;ve ever wanted help answering the question, &amp;ldquo;whatseries of events conspired to put my database in this state?&amp;rdquo; It acts as a timecapsule, storing each change made to instances of your models that you havePaperTrail turned on for.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s create a user. Unfortunately, we can&amp;rsquo;t make up our mind about whichemail to use, so we change that a few times.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kevin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Murphy&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevinfinal@example.com&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have PaperTrail set to &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail#only&#34;&gt;track changes&lt;/a&gt;made to a user&amp;rsquo;s email. Later on, we may need to do some archaeology to figureout why this user&amp;rsquo;s email address isn&amp;rsquo;t &amp;ldquo;km@example.com&amp;rdquo;. Let&amp;rsquo;s investigate howPaperTrail can help with that.&lt;/p&gt;&lt;h2 id=&#34;using-papertrails-api&#34;&gt;Using PaperTrail&amp;rsquo;s API &lt;a href=&#34;#using-papertrails-api&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PaperTrail provides a few options to &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail#3b-navigating-versions&#34;&gt;navigate&lt;/a&gt;changes made over the history of our object. We&amp;rsquo;re going to use&lt;code&gt;where_object_changes&lt;/code&gt; to figure out what happened with &amp;ldquo;km@example.com&amp;rdquo;.&lt;code&gt;where_object_changes&lt;/code&gt; will find any time the provided attributes changed to&lt;strong&gt;or&lt;/strong&gt; from the values provided.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s first find out if this user&amp;rsquo;s email ever was &amp;ldquo;km@example.com&amp;rdquo;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where_object_changes(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we know that at some point in time, this user&amp;rsquo;s email was stored as&amp;ldquo;km@example.com&amp;rdquo;. We can hone in on the changes, and specifically only look atthe email address changes.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where_object_changes(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:object_changes&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevinfinal@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Any PaperTrail Version has an &lt;code&gt;object_changes&lt;/code&gt; attribute. The value of thatattribute is a hash. The keys of that hash are the attributes that changed, andthe value is a tuple (as an array) that shows first the value that attributechanged from, and the value it changed to.&lt;/p&gt;&lt;p&gt;Here we&amp;rsquo;re finding all versions that have to do with the email address&amp;ldquo;km@example.com&amp;rdquo; and only showing the changes to the email address.&lt;/p&gt;&lt;p&gt;This first version shows that the email address changed from &amp;ldquo;kevin@example.com&amp;rdquo;to &amp;ldquo;km@example.com&amp;rdquo;. Later on, the second version shows the email addresschanging from &amp;ldquo;km@example.com&amp;rdquo; to &amp;ldquo;kevinfinal@example.com&amp;rdquo;.&lt;/p&gt;&lt;h2 id=&#34;enhanced-json-querying&#34;&gt;Enhanced JSON Querying &lt;a href=&#34;#enhanced-json-querying&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail#postgresql-json-column-type-support&#34;&gt;PaperTrail versions&lt;/a&gt;are stored as JSON or JSONB in Postgres, we have some more detailed queries wecan write by digging into Postgres&amp;rsquo; &lt;a href=&#34;https://www.postgresql.org/docs/9.4/functions-json.html&#34;&gt;JSON functions&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;changed&#34;&gt;Changed &lt;a href=&#34;#changed&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Sometimes we may not have an attribute value that we want to search for. We mayneed to first know when an attribute changed to anything at all. Let&amp;rsquo;s look forany time that this user&amp;rsquo;s email attribute changed.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object_changes -&amp;gt; &amp;#39;email&amp;#39; IS NOT NULL&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:object_changes&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;},&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevinfinal@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first version is logged when you initially create the row in your database,which is why it changes from the empty string to &amp;ldquo;kevin@example.com&amp;rdquo;. Fromthere, we see the additional updates to email, as all versions have changed theemail address.&lt;/p&gt;&lt;h3 id=&#34;changing-from&#34;&gt;Changing From &lt;a href=&#34;#changing-from&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While the prior query gives us &lt;em&gt;less&lt;/em&gt; specificity than PaperTrail provides with&lt;code&gt;where_object_changes&lt;/code&gt;, we may also benefit from &lt;em&gt;more&lt;/em&gt; specificity. Forexample, we may want to know when the user&amp;rsquo;s email changed from&amp;ldquo;km@example.com&amp;rdquo;, and not care about when it changed to &amp;ldquo;km@example.com&amp;rdquo;.&lt;/p&gt;&lt;p&gt;We &lt;strong&gt;can&lt;/strong&gt; use &lt;code&gt;where_object_changes&lt;/code&gt;, but to find out which changes are onlychanging the value from &amp;ldquo;km@example.com&amp;rdquo;, we&amp;rsquo;ll need to scan the resultsourselves or in memory, rather than relying on the database.&lt;/p&gt;&lt;p&gt;However, we can construct a query ourselves to tell us only when an attributechanged from a value.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object_changes -&amp;gt;&amp;gt;&amp;#39;email&amp;#39; ILIKE &amp;#39;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;km@example.com&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,%&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:object_changes&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevinfinal@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember that the object changes of an attribute are stored as a tuple in anarray. The first value in the array is the value the attribute changed from, andthe second value is the value the attribute changed to.&lt;/p&gt;&lt;p&gt;This query looks within the &lt;code&gt;object_changes&lt;/code&gt; attribute, and checks to see if thevalue of the &lt;code&gt;email&lt;/code&gt; field within that attribute has the email address we&amp;rsquo;relooking for as the first element in the tuple. The opening bracket before theemail address in escaped quotes is the start of the array/tuple.&lt;/p&gt;&lt;h3 id=&#34;changing-to&#34;&gt;Changing To &lt;a href=&#34;#changing-to&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can also construct a query to look for versions on the other side of theequation. We can find all instances where the attribute changed &lt;em&gt;to&lt;/em&gt; aparticular value.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object_changes -&amp;gt;&amp;gt;&amp;#39;email&amp;#39; ILIKE &amp;#39;[%,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;km@example.com&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:object_changes&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When looking for what the value changed to, we want to look in our tuple to findthe email address in question as the last element, which will be preceded by acomma and have an ending bracket after it.&lt;/p&gt;&lt;h2 id=&#34;trailing-off&#34;&gt;Trailing Off &lt;a href=&#34;#trailing-off&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks to storing our PaperTrail versions in a JSON format, we were able tosneak in an applied lesson on Postgres&amp;rsquo; powerful JSON functions andoperators while also reviewing the structure of data that&amp;rsquo;s used by PaperTrailto track any versions of our database records.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/querying-papertrail-object-changes-json&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Featured in Ruby Weekly</title>
       <link>https://kevinjmurphy.com/posts/ruby-weekly-539/</link>
       <pubDate>Thu, 11 Feb 2021 15:20:36 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-weekly-539/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be in this week&amp;rsquo;s Ruby Weekly, &lt;a href=&#34;https://rubyweekly.com/issues/539&#34;&gt;#539&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_539.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;The article they included is a &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;post&lt;/a&gt; from my employer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/using-sonic-pi-to-play-music-with-ruby&#34;&gt;blog&lt;/a&gt; that waspart of my self-described &amp;ldquo;Software Design Concert Series&amp;rdquo;. You can read it tolearn about how to trigger Sonic Pi from within your ruby code.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Nokogiri Notoriety</title>
       <link>https://kevinjmurphy.com/posts/nokogiri-notoriety/</link>
       <pubDate>Wed, 13 Jan 2021 18:20:36 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/nokogiri-notoriety/</guid>
       <description>&lt;p&gt;Last week, I wrote a &lt;a href=&#34;https://kevinjmurphy.com/posts/caching-all-native-gem-platforms/&#34;&gt;post&lt;/a&gt; onmy employer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/caching-all-native-gem-platforms&#34;&gt;blog&lt;/a&gt;about how to set up the correct bundler configurationto support caching multiple platforms of gems. This came up with the latest Nokogirirelease, where pre-built binaries for various platforms are now available, soyou don&amp;rsquo;t need to install from source.&lt;/p&gt;&lt;p&gt;That post has been featured in Ruby Weekly &lt;a href=&#34;https://rubyweekly.com/issues/534&#34;&gt;#534&lt;/a&gt;!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_534.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;I was also humbled to receive this tweet reply from a Nokogiri maintainer:&lt;/p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;ve linked out to your post from the &amp;quot;Troubleshooting&amp;quot; section of the installation guide. Thanks again!&lt;a href=&#34;https://t.co/tG76v2bojF&#34;&gt;https://t.co/tG76v2bojF&lt;/a&gt;&lt;/p&gt;&amp;mdash; mike dalessio (@flavorjones) &lt;a href=&#34;https://twitter.com/flavorjones/status/1347195095079137285?ref_src=twsrc%5Etfw&#34;&gt;January 7, 2021&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;p&gt;In case you can&amp;rsquo;t read that, the tweet from Mike Dalessio says:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I&amp;rsquo;ve linked out to your post from the &amp;ldquo;Troubleshooting&amp;rdquo; section of the installation guide. Thanks again!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And &lt;a href=&#34;https://nokogiri.org/tutorials/installing_nokogiri.html#using-vendorcache-to-deploy-to-another-architecture&#34;&gt;here I am&lt;/a&gt;in the Nokogiri tutorials!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/nokogiri_tutorial.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;The commit adding me to the guide is &lt;a href=&#34;https://github.com/sparklemotion/nokogiri.org/commit/173ecdc110c738d0c5708934eb51d03e8e9f418d&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Thanks to Peter Cooper for featuring me in Ruby Weekly, and Mike Dalessio foradding me to Nokogiri&amp;rsquo;s guides!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Caching All Native Ruby Gem Platforms</title>
       <link>https://kevinjmurphy.com/posts/caching-all-native-gem-platforms/</link>
       <pubDate>Wed, 06 Jan 2021 12:20:07 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/caching-all-native-gem-platforms/</guid>
       <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR &lt;a href=&#34;#tldr&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Some dependencies, like nokogiri, ship with multiple libraries for differentarchitectures. If you cache your gems, you may need to cache multiple platforms,because your development team is spread across various platforms or you deployto a different platform. To do this, you can use:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle cache &lt;span style=&#34;color:#75715e&#34;&gt;# cache gems in vendor/cache &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle lock --add-platform x86_64-linux &lt;span style=&#34;color:#75715e&#34;&gt;# add additional platforms &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle package --all-platforms &lt;span style=&#34;color:#75715e&#34;&gt;# cache multiple platforms &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On bundler version 1.x, add:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle config specific_platform true &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;native-nokogiri&#34;&gt;Native Nokogiri &lt;a href=&#34;#native-nokogiri&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Nokogiri 1.11.0 has been released, and one of the exciting &lt;a href=&#34;https://github.com/sparklemotion/nokogiri/blob/007662fc216902a5ae186cb78b0d46f7f48b8d92/CHANGELOG.md#v1110--2021-01-03&#34;&gt;updates&lt;/a&gt;is the inclusion of pre-compiled native gems for various platforms! If you&amp;rsquo;reusing a supported platform, your days of installing nokogiri with nativeextensions may be over. These &lt;a href=&#34;https://nokogiri.org/tutorials/installing_nokogiri.html#installing-native-gems&#34;&gt;changes&lt;/a&gt;result, &amp;ldquo;in much faster installation and more reliable installation&amp;rdquo;. Manythanks to the maintainers and contributors for this great update.&lt;/p&gt;&lt;p&gt;Updating to these pre-compiled gems should be a seamless experience. Bundlerwill grab the appropriate pre-compiled &lt;code&gt;.gem&lt;/code&gt; file, if you&amp;rsquo;re on asupported version, and use that. However, if you &lt;a href=&#34;https://bundler.io/man/bundle-cache.1.html&#34;&gt;cache&lt;/a&gt;your gems, and you&amp;rsquo;d like to cache multiple platforms, you have a few moresteps to complete.&lt;/p&gt;&lt;h2 id=&#34;cache-hit&#34;&gt;Cache Hit &lt;a href=&#34;#cache-hit&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Gem dependencies can be cached along with your app and then you can use thatcache to retrieve your application&amp;rsquo;s dependencies, rather than RubyGems.We take advantage of this on a number of projects for various reasons, but themost important one that requires all gems to be vendored is that someapplications are deployed to, and the deployments are created in, environmentswhere they &lt;strong&gt;cannot&lt;/strong&gt; access &lt;a href=&#34;https://rubygems.org/&#34;&gt;RubyGems&lt;/a&gt; directly.&lt;/p&gt;&lt;p&gt;We need to tell bundler to cache our gems.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle cache &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running that on an existing application will add &lt;code&gt;.gem&lt;/code&gt; files into the &lt;code&gt;vendor/cache&lt;/code&gt;&lt;a href=&#34;https://github.com/kevin-j-m/bundler_2_cache_all_platforms/commit/75c7ddb8f569e33cdd09e0ee1c4a377885318416&#34;&gt;directory&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;platform-dependence&#34;&gt;Platform Dependence &lt;a href=&#34;#platform-dependence&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You need to tell bundler that you require multiple platforms. In the case ofthis example, I&amp;rsquo;m developing on a computer running macOS, so installing nokogiriwill &lt;a href=&#34;https://github.com/kevin-j-m/bundler_2_cache_all_platforms/commit/61b73d01e929ec3b43c43ae9ea1af00df273a4b1&#34;&gt;give me&lt;/a&gt;the pre-compiled gem for that architecture. That&amp;rsquo;s great, but I also need thelinux native gem for my deployment environments.&lt;/p&gt;&lt;p&gt;First, I need to tell &lt;a href=&#34;https://bundler.io/v2.0/bundle_lock.html&#34;&gt;bundler&lt;/a&gt; toadd the platform.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle lock --add-platform x86_64-linux&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After doing that, the &lt;code&gt;Gemfile.lock&lt;/code&gt; file is &lt;a href=&#34;https://github.com/kevin-j-m/bundler_2_cache_all_platforms/commit/d36495a715c26fb1f674021ffc19dc61c1787e4f&#34;&gt;updated&lt;/a&gt;to list that platform.&lt;/p&gt;&lt;h2 id=&#34;platform-independence&#34;&gt;Platform Independence &lt;a href=&#34;#platform-independence&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;However, even if you add the platform &lt;em&gt;before&lt;/em&gt; installing the dependency, addingthe platform will still not retrieve and cache both platform&amp;rsquo;s &lt;code&gt;.gem&lt;/code&gt; files.We also need to tell bundler to cache those&lt;a href=&#34;https://bundler.io/man/bundle-cache.1.html#SUPPORT-FOR-MULTIPLE-PLATFORMS&#34;&gt;other platforms&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle package --all-platforms&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our other platform is &lt;a href=&#34;https://github.com/kevin-j-m/bundler_2_cache_all_platforms/commit/a9ef611df04114921e71b4d8e4100894d00e2925&#34;&gt;cached&lt;/a&gt;,along with the existing platforms.&lt;/p&gt;&lt;p&gt;If you are using Bundler version 1.x, you may also need to set the&lt;code&gt;specific_platform&lt;/code&gt; configuration &lt;a href=&#34;https://github.com/rubygems/bundler/issues/5863#issuecomment-315800951&#34;&gt;setting&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bundle config specific_platform true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you should have all your gem dependencies cached across all platformsspecified in your &lt;code&gt;Gemfile.lock&lt;/code&gt;. You no longer need to compile nokogiri!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/caching-all-native-gem-platforms&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Stringing Code Together to Play Music</title>
       <link>https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/</link>
       <pubDate>Tue, 15 Dec 2020 07:03:46 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Stringing Code Together To Play Music&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;last post&lt;/a&gt;, I talked about how I built an interface to &lt;a href=&#34;https://sonic-pi.net&#34;&gt;Sonic Pi&lt;/a&gt; whenI was preparing my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt; talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module. At theend of that post, we could send sounds to Sonic Pi. Today, we&amp;rsquo;ll have our codeplay the guitar, and send those sounds to our amplifier.&lt;/p&gt;&lt;h2 id=&#34;string-theory&#34;&gt;String Theory &lt;a href=&#34;#string-theory&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A guitar is a string instrument, and each of those strings make a sound when youplay them. For this example we&amp;rsquo;ll focus on the happy path, which is thatplucking the string plays the expected note. The code I built also considersthat strings can break, and attempting to play broken strings won&amp;rsquo;t work. Youcan look at the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar/string.rb#L20-L28&#34;&gt;full implementation&lt;/a&gt;to see how that works.&lt;/p&gt;&lt;p&gt;Plucking an individual string creates a new sound.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pluck&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    play_note(fret)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play_note&lt;/span&gt;(fret)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;StringSound&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;string_number&lt;/span&gt;: @number,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;tuning_note&lt;/span&gt;: tuning_note,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;fret_number&lt;/span&gt;: fret,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;@number&lt;/code&gt; variable is which string on the guitar it is, with index 0 beingthe low E, and index 5 being the high E, in standard tuning. The &lt;code&gt;tuning_note&lt;/code&gt;is what note that string is tuned to, because any string &lt;strong&gt;can&lt;/strong&gt; be tuned to anynote. Again, for simplicity here, we&amp;rsquo;ll assume standard tuning (EADGBE).&lt;/p&gt;&lt;p&gt;Our &lt;code&gt;StringSound&lt;/code&gt; class converts that information into the command we&amp;rsquo;ll send toSonic Pi. All notes in Sonic Pi are represented with a &lt;a href=&#34;https://sonic-pi.net/tutorial#section-2-1&#34;&gt;number&lt;/a&gt;,and we can also use &amp;ldquo;traditional&amp;rdquo; note names, passed to it as a symbol. We canuse that to figure out the note our string would play if you plucked it withoutpressing down on a fret.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringSound&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;playable_note_root&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    playable_note_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dig(@string_number, @tuning_note)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;playable_note_key&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e2&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a2&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:d3&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;g&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:g3&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:b3&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e4&lt;/span&gt; },&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The number next to the note (the &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;:e2&lt;/code&gt; for the low E string) representsthe octave.&lt;/p&gt;&lt;p&gt;A helpful thing here is that the note is still a number to Sonic Pi. We can addthe fret number pressed on the string to the root note of the string and SonicPi will know what note that is.We&amp;rsquo;ll construct a Sonic Pi command to send to our &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;amplifier&lt;/a&gt;to play that note.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringSound&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amp_value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(note(:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;playable_note_root&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) + &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;@fret_number&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is all in a string (the data type, not the part of the instrument),because we&amp;rsquo;re going to pass it to Sonic Pi via the&lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/&#34;&gt;sonic-pi-cli gem&lt;/a&gt;.This is going to execute the &lt;code&gt;note&lt;/code&gt; method in Sonic Pi to play that singletone.&lt;/p&gt;&lt;h2 id=&#34;plucking-a-single-string&#34;&gt;Plucking a Single String &lt;a href=&#34;#plucking-a-single-string&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our guitarist is interfacing with the guitar as a whole, which is &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;composed&lt;/a&gt; ofmany strings. They&amp;rsquo;ll first place their fingers on the neck of the guitar.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FingerPlacement&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:fret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:string_number&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And pluck an individual string with that placement.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt;(finger_placement, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;finger_placement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;string_number&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: finger_placement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fret)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(sound_output(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;play &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;amp_value&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: duration))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here our guitar is adding details to the command that we&amp;rsquo;ll send toSonic Pi. We have the information about the note to play from the string, butnow we want it to sound like a note from a guitar, and we&amp;rsquo;ll rely on theguitarist to say how long to play the note for (the duration).&lt;/p&gt;&lt;p&gt;We can do this in Sonic Pi by specifying the synthesizer to use when playing thenote, and we&amp;rsquo;ll choose one that sounds like a guitar.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sound_output&lt;/span&gt;(play_operation, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;with_synth :pluck do&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;play_operation&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, release: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;duration&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you wanted to play this directly in Sonic Pi&amp;rsquo;s IDE, it would look morefamiliar:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with_synth &lt;span style=&#34;color:#e6db74&#34;&gt;:pluck&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  play note(&lt;span style=&#34;color:#e6db74&#34;&gt;:e2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;release&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we need to package this all up in a string to then send that commandover to Sonic Pi via the sonic-pi-cli gem.&lt;/p&gt;&lt;p&gt;Our amplifier, passed in via &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;,then takes that command and sends it to Sonic Pi, producing a sound!&lt;/p&gt;&lt;h2 id=&#34;strike-a-chord&#34;&gt;Strike a Chord &lt;a href=&#34;#strike-a-chord&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Sonic Pi already knows how to play &lt;a href=&#34;https://sonic-pi.net/tutorial#section-8-2&#34;&gt;chords&lt;/a&gt;,so this could be a quick section; however, we&amp;rsquo;re going to replicate thatfunctionality a little differently. We&amp;rsquo;re doing this because of the reality Imentioned when talking about strings - and that is, they can break. If a stringis broken, the note in the chord that string would regularly play shouldn&amp;rsquo;t beheard.&lt;/p&gt;&lt;p&gt;As such, we need to go string by string to determine the notes to play. Eventhough the reasoning is to handle broken strings, we&amp;rsquo;re not going to considerthat case in this explanation. You can view the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar.rb#L23-L41&#34;&gt;fullimplementation&lt;/a&gt;to see how that&amp;rsquo;s handled.&lt;/p&gt;&lt;p&gt;We first need to know which notes we should play:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_fret),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;second_fret),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;third_fret),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fourth_fret),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fifth_fret),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sixth_fret),&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:amp_value&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll then take all of those notes and pass them to our amplifier, using SonicPi&amp;rsquo;s &lt;code&gt;play_pattern_timed&lt;/code&gt; &lt;a href=&#34;https://github.com/hashbangstudio/Sonic-Pi-Examples/blob/master/10-play-pattern-timed.rb&#34;&gt;method&lt;/a&gt;.This also allows us to define a time between each note, so we can place a smallamount of time in between each to simulate the time it would take your hand tocomplete a downstroke across all the strings.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[...].&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:amp_value&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      sound_output(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;play_pattern_timed [&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;pattern_notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], 0.05&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: duration,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The 0.05 is our amount of time it&amp;rsquo;ll take to pluck from one string to the nextwhen playing a chord.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Combining a few key software design principles, we were able to create aflexible, extensible, and testable system for playing music over the course of afew blog posts.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;re now armed with an amplifier that knows how to communicate with &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Sonic Pi&lt;/a&gt;that&amp;rsquo;s passed in to our guitar via &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt; (but could send the notes anywhere as long as the injected class &lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;responds&lt;/a&gt; to the right methods). Our guitar is &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;composed&lt;/a&gt; of various strings, each of which are responsible for knowing what sound to make.&lt;/p&gt;&lt;p&gt;Given a songwriter who knows how to&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;consistently write&lt;/a&gt; for our band, we canplay chords and individual notes on our guitar as the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/songs/the_line_begins_to_blur.rb&#34;&gt;song&lt;/a&gt; requires.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GncJGXdS6R8?rel=0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;If you listen closely at :14, you can hear a string break. Even with theseprinciples in place, mistakes and errors happen. Make sure your system isprepared to handle errors in a fault-tolerant way - but that&amp;rsquo;s a different blogseries altogether. Thanks for joining me in this exploration.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/stringing-code-together-to-play-music&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Using Sonic Pi to Play Music With Ruby</title>
       <link>https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/</link>
       <pubDate>Mon, 14 Dec 2020 18:48:24 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Using Sonic Pi To Play Music With Ruby&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; moduleuses examples about playing live music. As such, I had the ambitious goal ofdelivering a live performance of some music during the presentation. This endedup getting cut for a variety of reasons (time, concern about the audio workingon the streaming platform, the reality of ambition turning into actual work todo), but I built out the structure to support this for one instrument, theguitar. I integrated this into my &lt;a href=&#34;https://kevinjmurphy.com/posts/play-guitar/&#34;&gt;RubyConf Mini 2022&lt;/a&gt;talk, though with some &lt;a href=&#34;https://kevinjmurphy.com/posts/revisiting-calling-sonic-pi-from-ruby/&#34;&gt;modifications&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This is the first of two posts that&amp;rsquo;ll describe the work that I did tosupport this.&lt;/p&gt;&lt;p&gt;First, I had to figure out if it was possible to make this happen. I wanted tohook into my existing code samples and trigger musical notes from them somehow.As such, I decided to build my first amplifier, virtually, without fear ofblowing up any capacitors.&lt;/p&gt;&lt;h2 id=&#34;parts-list&#34;&gt;Parts List &lt;a href=&#34;#parts-list&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the earlier post on &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;,I created a &lt;code&gt;PracticeAmplifier&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/practice_amplifier.rb&#34;&gt;class&lt;/a&gt;that did nothing so I could use it in tests, rather than the &amp;ldquo;regular&amp;rdquo; amplifier.&lt;/p&gt;&lt;p&gt;What the &amp;ldquo;regular&amp;rdquo; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/amplifier.rb&#34;&gt;amplifier&lt;/a&gt;does is interface with &lt;a href=&#34;https://sonic-pi.net/&#34;&gt;Sonic Pi&lt;/a&gt;, which is awesomesoftware that&amp;rsquo;ll make sound and music driven by code. Sonic Pi comes withan &lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-1-2&#34;&gt;IDE&lt;/a&gt; of sorts that you canuse to program the composition you&amp;rsquo;d like to play, and get immediate feedbackfrom hearing how your code is translated into audio. It&amp;rsquo;s a great way to losetrack of time for a night or two (or more). However, I was envisioningcontrolling my audio from the code examples directly. I didn&amp;rsquo;t want to have towork within the IDE.&lt;/p&gt;&lt;p&gt;To get around using the IDE directly, I found the &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli&#34;&gt;sonic-pi-cli&lt;/a&gt;gem. This gem works with Sonic Pi versions 2.7 - 3.2. Its principal use case is to be used directly in the&lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/c4280f98edcec4de99801d013ec946cc47787932/bin/sonic_pi&#34;&gt;terminal&lt;/a&gt;.However, it&amp;rsquo;s a gem, and written in ruby, and the core functionality isavailable in a &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/c4280f98edcec4de99801d013ec946cc47787932/lib/sonic_pi.rb&#34;&gt;class&lt;/a&gt;that you can use in any of your code.&lt;/p&gt;&lt;h2 id=&#34;wiring-schematic&#34;&gt;Wiring Schematic &lt;a href=&#34;#wiring-schematic&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;With enough knowledge and conviction to be dangerous, I set out wiring up myamplifier. The CLI requires that Sonic Pi itself is running, and first ensuresit can communicate with it - and to do so, it needs to know what port thesoftware is running on. Sonic Pi used to always run on the same port; however,it has since changed to run on a &lt;a href=&#34;https://github.com/sonic-pi-net/sonic-pi/commit/d245d93c5b797ad76fa333f829c32d67480af96c&#34;&gt;dynamically-determined&lt;/a&gt; port.&lt;/p&gt;&lt;p&gt;The CLI already implemented the functionality to &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/20a18f91b4aa24de9f4b187aa20c69334ddf0329/bin/sonic_pi#L13-L33&#34;&gt;find the port&lt;/a&gt;to send to the &lt;code&gt;SonicPi&lt;/code&gt; class, so for demonstration purposes, I copied that inmy constructor.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_port&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @speaker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SonicPi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(@port)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_port&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Code from sonic-pi-cli&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Needing to find the port is now something that the &lt;code&gt;SonicPi&lt;/code&gt; class can do &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/pull/23&#34;&gt;by itself&lt;/a&gt;as of version v0.2.0; however, this work preceded that.&lt;/p&gt;&lt;p&gt;The rest of the functionality in the &lt;code&gt;Amplifier&lt;/code&gt; class is now to &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;delegate&lt;/a&gt; commands to the &lt;code&gt;@speaker&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Amplifier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @speaker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(sound)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Using this amplifier still requires knowing all the correct&lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-2-1&#34;&gt;commands&lt;/a&gt; to send to Sonic Pi,and Sonic Pi must be running; however, we can now trigger it to execute thesecommands from outside of its IDE. We have a way to &lt;em&gt;send&lt;/em&gt; soundout of our ruby code.&lt;/p&gt;&lt;p&gt;In our next post, we&amp;rsquo;ll take a look at how we &lt;em&gt;generate&lt;/em&gt; the sound to send froma &lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;guitar&lt;/a&gt; to an amplifier.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/using-sonic-pi-to-play-music-with-ruby&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Inheritance: Derivative Songwriting</title>
       <link>https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/</link>
       <pubDate>Thu, 10 Dec 2020 16:56:38 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Inheritance: Derivative Songwriting&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Inheritance sets up a relationship or a taxonomy between classes to allow forcode reuse. It is both a commonly reached for and commonly derided tool whichhas its place, but must be wielded with care. We&amp;rsquo;ll use inheritance to write newsongs for our concert setlist, an example which comes from my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;talk about Ruby&amp;rsquo;s&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;song-structure&#34;&gt;Song Structure &lt;a href=&#34;#song-structure&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When you create a song, it needs a name (or at least a working title) and aseries of notes. The notes may change over time, and the title may be refined,but for our purposes, we&amp;rsquo;re not calling it a song until there&amp;rsquo;s a bit more thanan empty page.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;notes&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;, name:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you&amp;rsquo;re writing songs for a band or yourself, you need to be able to play thesong. In this example, our song is written for a band that has a known number ofinstruments.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For every note (representing a beat or measure of the song) each member of theband needs to play their part simultaneously. All of these instruments playingtogether note for note comprise the song.&lt;/p&gt;&lt;h2 id=&#34;on-repeat&#34;&gt;On Repeat &lt;a href=&#34;#on-repeat&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A touring band is going to play the same song &lt;strong&gt;many&lt;/strong&gt; times night after night.For each concert on the tour, the band needs to construct a setlist of all thesongs that they&amp;rsquo;ll play that night, and in what order.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Setlist&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_song&lt;/span&gt;(song)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @songs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; song&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Transcribing all the notes for each song over and over again for every concertwould be tedious and unnecessary. To save all that work, each song that couldappear in the band&amp;rsquo;s setlist is catalogued as a separate class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Line Begins To Blur&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; verse_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; verse_2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; outro&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t need to accept any arguments for the name of the song or the notesbecause it&amp;rsquo;s already a fully-formed song. We&amp;rsquo;re not going to change thearrangement in the middle of the tour. However, we &lt;strong&gt;do&lt;/strong&gt; need to be able toplay the song. As such, let&amp;rsquo;s copy and paste the &lt;code&gt;play&lt;/code&gt; method as something wecan do for our specific song here.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is great because we now have a stable of songs we can pull from every nightwhen creating our setlist; however, rewriting the &lt;code&gt;play&lt;/code&gt; method in each song isnot great. If the implementation of &lt;code&gt;play&lt;/code&gt; needs to change, we need topropagate that change across every song. If we forget to add a &lt;code&gt;play&lt;/code&gt; method toone of our songs, everyone is going to look foolish when the band is staringblankly at each other, unsure of what to do.&lt;/p&gt;&lt;h2 id=&#34;composing-a-song&#34;&gt;Composing a Song &lt;a href=&#34;#composing-a-song&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Taking a note from our earlier post on&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;composition and delegation&lt;/a&gt;, we canbuild a class that&amp;rsquo;s solely responsible for playing the song.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SongPerformer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(notes)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of our songs can then use that performer and delegate the responsibility ofplaying to it.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SongPerformer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(@notes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have now isolated the responsibility of playing the song to one place. If weneed to change the way in which songs are played in totality, we can do so inthe &lt;code&gt;SongPerformer&lt;/code&gt; and that change will be reflected in all of our songs. Wecan even &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency inject&lt;/a&gt; the performer classinto the song, allowing us to set up different arrangements of the same song.Even with those benefits, we &lt;em&gt;do&lt;/em&gt; still have to remember to implement a &lt;code&gt;play&lt;/code&gt;method that calls our &lt;code&gt;SongPerformer&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;There is another option we can explore: inheritance.&lt;/p&gt;&lt;h2 id=&#34;playing-the-hits&#34;&gt;Playing the Hits &lt;a href=&#34;#playing-the-hits&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can leverage our existing, generic, &lt;code&gt;Song&lt;/code&gt; class and have all of our classesabout specific songs &lt;em&gt;inherit&lt;/em&gt; the behavior of the &lt;code&gt;Song&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;By doing this, our different songs don&amp;rsquo;t need to implement the &lt;code&gt;play&lt;/code&gt; method.They&amp;rsquo;ll get this behavior from &lt;code&gt;Song&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Song&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Line Begins To Blur&amp;#34;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;notes&lt;/span&gt;: verse_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; verse_2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; outro,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We denote that we&amp;rsquo;re inheriting from the &lt;code&gt;Song&lt;/code&gt; class with &lt;code&gt;&amp;lt; Song&lt;/code&gt;. &lt;code&gt;Song&lt;/code&gt; isour &amp;ldquo;base class&amp;rdquo;. In our constructor, we then call &lt;code&gt;Song&lt;/code&gt;&amp;rsquo;s constructor with&lt;code&gt;super&lt;/code&gt;, passing in the title of the song and the notes that should be playedwith the song. &lt;code&gt;TheLineBeginsToBlur&lt;/code&gt; has no reference to &lt;code&gt;play&lt;/code&gt; in its classdefinition. It still responds to it because &lt;code&gt;Song&lt;/code&gt; does, and we&amp;rsquo;reinheriting all of &lt;code&gt;Song&lt;/code&gt;s behavior.&lt;/p&gt;&lt;p&gt;When we discussed composition, we mentioned Sandi Metz&amp;rsquo;s &lt;a href=&#34;https://www.poodr.com/&#34;&gt;Practical Object-Oriented Design In Ruby&lt;/a&gt;for her recommendation to use composition when modeling a &lt;em&gt;has a&lt;/em&gt; relationship.In that same section, she recommends using inheritance when you encounter an&lt;em&gt;is a&lt;/em&gt; relationship. In our case, a particular song is a &lt;strong&gt;specialized&lt;/strong&gt;version of our &lt;code&gt;Song&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;Inheritance is a common design choice in Object-Oriented languages. Specificallyin Ruby, if you&amp;rsquo;ve worked with Rails, then you&amp;rsquo;ve likely used inheritance allover the place. All of your models inherit from &lt;code&gt;ApplicationRecord&lt;/code&gt; (ultimatelyinheriting from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;) and all of your controllers inheritfrom &lt;code&gt;ApplicationController&lt;/code&gt; (ultimately inheriting from&lt;code&gt;ActionController::Base&lt;/code&gt;).&lt;/p&gt;&lt;h2 id=&#34;a-measured-approach&#34;&gt;A Measured Approach &lt;a href=&#34;#a-measured-approach&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Inheritance does come with some drawbacks. Enough that it&amp;rsquo;s commonly recommendedto avoid. You may have encountered the phrase, &amp;ldquo;prefer composition overinheritance&amp;rdquo; before. Let&amp;rsquo;s discuss why that is.&lt;/p&gt;&lt;h3 id=&#34;transparency&#34;&gt;Transparency &lt;a href=&#34;#transparency&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Inheritance makes it more difficult to know what behaviors a particular classhas. None of our song classes that inherit from &lt;code&gt;Song&lt;/code&gt; have a &lt;code&gt;play&lt;/code&gt; methodin their class definition. However, because they all inherit from &lt;code&gt;Song&lt;/code&gt;, theyall respond to &lt;code&gt;play&lt;/code&gt;. Determining that is not obvious based on a quick readingof the class.&lt;/p&gt;&lt;h3 id=&#34;limitations-of-base-class&#34;&gt;Limitations of Base Class &lt;a href=&#34;#limitations-of-base-class&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Any inheriting classes shouldn&amp;rsquo;t necessarily do things differently than how thebase class does. Of course, you &lt;em&gt;can&lt;/em&gt; do this, but it should be used veryjudiciously. We could redefine the &lt;code&gt;play&lt;/code&gt; method in a particular class - sharingthe rest of the behavior and redefining &lt;code&gt;play&lt;/code&gt; for our one-off specialexception. The issue is that these exceptions start to pile up, we end upchipping away at the commonality, and the shared understanding of what it meansto inherit from the base class gets eroded with each change that seems smallon its own.&lt;/p&gt;&lt;p&gt;For our songs, if we suddenly need to write a song for a string quartet, our&lt;code&gt;Song&lt;/code&gt; class isn&amp;rsquo;t helpful. It assumes a guitar, vocalist, drummer, andkeyboardist. While particularly in Ruby we have an out by being able to redefineany method definition, from a design perspective, we should be willing to acceptthe limitations that inheritance places on us within the scope of our domain.If those limitations cannot be respected, then consider another organizationalstructure, like composition.&lt;/p&gt;&lt;h3 id=&#34;future-inflexibility&#34;&gt;Future Inflexibility &lt;a href=&#34;#future-inflexibility&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It&amp;rsquo;s often impossible to know how your system will evolve over time. Inheritancecan lock you in to a very specific representation of how your system should bemodeled, and the assumptions that went into developing that structure may nothold true as features are needed to be added and the needs that the applicationmust serve grow.&lt;/p&gt;&lt;p&gt;This rigidity over time ends up getting pushed and strainedenough that maintaining inheritance structures becomes difficult. In myopinion, it is this long-view perspective that becomes the principal reason whyinheritance is sparsely recommended by practitioners. It can work great aslong as you have perfect knowledge about both the current and future state ofyour system. The reality is, it&amp;rsquo;s extremely rare to be in that situation.&lt;/p&gt;&lt;p&gt;In this example, our application is modeling a concert tour for one band, themembers and makeup of which &lt;strong&gt;shouldn&amp;rsquo;t&lt;/strong&gt; change throughout the course of thetour. We&amp;rsquo;ve made the bet that even if the guitarist we start the tour with isreplaced, there will still &lt;strong&gt;be&lt;/strong&gt; a guitarist, and we will not have picked up afrench horn player along the way to play two of the songs. From a practicalitystandpoint, it&amp;rsquo;s reasonable to be tied to this rigid structure of how to playeach of these songs on stage in the context of this application. However, fromthe onset, we&amp;rsquo;ve already identified one way in which this structure may comeback to haunt us.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Inheritance is often reached for as a quick and easy way to achieve code reuse.It does just that; however, it imposes limitations and constraints on your systemthat can make it more difficult or painful to change over time. Thoselimitations may be intentional and required guardrails - but often times, theyend up being factors that cause pain, tears, multiple &amp;ldquo;code spikes&amp;rdquo;, and&amp;ldquo;technical debt sprints&amp;rdquo; to allow for needed future functionality. Inheritanceshouldn&amp;rsquo;t be avoided wholesale based on this, but it should be carefully andjudiciously applied in your systems.&lt;/p&gt;&lt;p&gt;Our next post will move a little further from theory and explore how to build an&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;interface to Sonic Pi&lt;/a&gt;,so that these principles can work together to actually make sounds on yourcomputer.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/inheritance-derivative-songwriting&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Synthesizing Composition With Delegation</title>
       <link>https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/</link>
       <pubDate>Sat, 05 Dec 2020 14:00:55 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Synthesizing Composition With Delegation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Any application will be comprised of multiple components - in Object-Orientedlanguages, typically classes. Sometimes these classes even work together!External users of one of these classes may not know that behind the scenes thereare more classes working together, nor do they care. The public API does whatthey need it to, and anything else is an implementation detail. However, keepingthe specialization of these different classes apart, but using them together,is beneficial.&lt;/p&gt;&lt;p&gt;To demonstrate using composition to model a complex system and using delegationin that composition, we will explore how a synthesizer can handle memorymanagement to store presets of sounds. This example comes from my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;talk about Ruby&amp;rsquo;s&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;noise-reduction&#34;&gt;Noise Reduction &lt;a href=&#34;#noise-reduction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Synthesizer&#34;&gt;synthesizer&lt;/a&gt; is an instrumentcapable of producing a wide array of sounds. A collection of sounds and effects are known as a patch.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Patch&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:sound&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:effect&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:filter&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:oscillator&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can save these patches on the synthesizer&amp;rsquo;s memory and recall them later foreasy access.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Patch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;synth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Synthesizer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;synth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_patch(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:b1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;: patch)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;synth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_patch(patch)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;synth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play_key(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;save-you-the-trouble&#34;&gt;Save You the Trouble &lt;a href=&#34;#save-you-the-trouble&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Much like the actual instrument is comprised of various subcomponents, our&lt;code&gt;Synthesizer&lt;/code&gt; is made up of various classes that specialize in its area ofexpertise.&lt;/p&gt;&lt;p&gt;For example, our synthesizer above doesn&amp;rsquo;t know how to save a patch to itsonboard memory. It relies on its patch memory to handle that.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Synthesizer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save_patch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @patch_memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;: location, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;: patch)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All the synthesizer itself knows is what &lt;em&gt;message&lt;/em&gt; to send to the memory tohave it do that. The synthesizer is &lt;strong&gt;delegating&lt;/strong&gt; the responsibility of storingthese patches to the patch memory instance.&lt;/p&gt;&lt;p&gt;Anyone playing the synthesizer does not need to be concerned with how it&amp;rsquo;sstoring these patches, just that it&amp;rsquo;s doing it. Anyone using our synthesizerclass isn&amp;rsquo;t aware that there is a separate patch memory class that thesynthesizer is using.&lt;/p&gt;&lt;p&gt;At the same time, our synthesizer doesn&amp;rsquo;t know directly how to access its memory.It relies on the &lt;code&gt;PatchMemory&lt;/code&gt; class for that, and delegates any responsibilityrelated to memory management to that class. As Sandi Metz describes in&lt;a href=&#34;https://www.poodr.com/&#34;&gt;Practical Object-Oriented Design In Ruby&lt;/a&gt;, a synthesizer&lt;em&gt;has a&lt;/em&gt; patch memory, as it &lt;em&gt;has a&lt;/em&gt; series of other parts, and those arecomposed together to deliver all the functionality that a synthesizerprovides.&lt;/p&gt;&lt;h2 id=&#34;key-benefits-to-delegation&#34;&gt;Key Benefits to Delegation &lt;a href=&#34;#key-benefits-to-delegation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Delegation provides a few important drivers that make it easier to wranglecomplex systems.&lt;/p&gt;&lt;h3 id=&#34;specialization&#34;&gt;Specialization &lt;a href=&#34;#specialization&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Our patch memory component is solely focused on interfacing with the onboardmemory of the instrument, which is where it saves and recalls stored sounds.Its tests can dig into all of the edge cases and minutiae that need to beaccounted for. The implementation can make very specific decisions so that itis extremely performant without other areas of the system needing to worryabout that.&lt;/p&gt;&lt;p&gt;A synthesizer itself is a complex system. The memory management is only onesmall part of it. The strength and value-add of our &lt;code&gt;Synthesizer&lt;/code&gt; class is inorganizing all of these components together, knowing the right messages to passto them, with a public API that doesn&amp;rsquo;t require intimate knowledge of all thosedetails. If the internals of our &lt;code&gt;Synthesizer&lt;/code&gt; class handled all of thisresponsibility itself, it would quickly become unwieldy, difficult to navigate,hard to read, a challenge to troubleshoot, a burden to test, and feared whenchanges are required.&lt;/p&gt;&lt;h3 id=&#34;flexibility--reuse&#34;&gt;Flexibility &amp;amp; Reuse &lt;a href=&#34;#flexibility--reuse&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In reality, there are many different kinds of synthesizer, all of which havedifferent capabilities. Some may be able to store 1,000 different patches onboard. Others may only have capacity for four. Still more may have expandablememory, where you can plug in a USB device for nearly infinite storage.&lt;/p&gt;&lt;p&gt;Rather than needing to create entirely different synthesizer classes to handleany of these scenarios, instead we only need to model those differences in patchmemory classes. Our synthesizer can then use any of those and still maintain therest of its functionality, without needing to duplicate it across differentclasses.&lt;/p&gt;&lt;p&gt;In this &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/synthesizer.rb#L41-L47&#34;&gt;example&lt;/a&gt;,our synthesizer changes its memory capabilities based on the brand that it is.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_memory&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @brand &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:moog&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @patch_memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MoogPatchMemory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; @brand &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:nord&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @patch_memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NordPatchMemory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;duck typing&lt;/a&gt;, as long as these patchmemory classes respond to the same messages, our &lt;code&gt;Synthesizer&lt;/code&gt; class can useeither of them interchangeably.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Composing classes together allows us to create a fully-functional system. Aclass that uses another class to handle a request or responsibility isdelegating that duty to the helper class. Delegation can encapsulate theknowledge of different specialties for code organization without externalconsumers needing to know or care about that implementation detail. Delegatingresponsibility to different classes can also make it easier for the system tochange, making it more likely to promote code reuse.&lt;/p&gt;&lt;p&gt;Next we&amp;rsquo;re going to play one of the greatest hits in software design:&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;inheritance&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/synthesizing-composition-with-delegation&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Shedding a Light on Duck Typing</title>
       <link>https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/</link>
       <pubDate>Thu, 03 Dec 2020 12:10:31 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Shedding a Light on Duck Typing&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Duck typing is commonly used by Rubyists and other users of dynamic languages.We&amp;rsquo;ll demonstrate duck typing by helping a concert lighting team set up thelighting for a band, which comes from my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt; talk about Ruby&amp;rsquo;s&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;stage-design&#34;&gt;Stage Design &lt;a href=&#34;#stage-design&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To light the stage for our concert, we have a wide range of lights touse.&lt;/p&gt;&lt;p&gt;We have our trusty can, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Stage_lighting_instrument#PAR_lights&#34;&gt;PAR&lt;/a&gt;, lights.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CanLight&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have &lt;a href=&#34;https://en.wikipedia.org/wiki/Stage_lighting_instrument#Spotlights&#34;&gt;spotlights&lt;/a&gt; tasked on each band member.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spotlight&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have fancy &lt;a href=&#34;https://en.wikipedia.org/wiki/Intelligent_lighting&#34;&gt;moving lights&lt;/a&gt; for versatile coverage across the stage.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MovingLight&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We even have a &lt;a href=&#34;https://en.wikipedia.org/wiki/Beam_projector&#34;&gt;beam projector&lt;/a&gt;for a more powerful spotlight effect.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BeamProjector&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What any of these lights do isn&amp;rsquo;t important here. What is key to notice is thatyou operate them all by calling the &lt;code&gt;trigger&lt;/code&gt; method.&lt;/p&gt;&lt;h2 id=&#34;a-light-touch&#34;&gt;A Light Touch &lt;a href=&#34;#a-light-touch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The stage lighting technicians, just like the band, are performers in theconcert. For every single note of every single song, they need to make sure thatthe visual aesthetic of the stage is set &lt;em&gt;just so&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;All of these lights are managed by a central controller, from which they canpower on all the lights in preparation for a show.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @powered_lights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turn_on_lights&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:beam_projector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BeamProjector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:can&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CanLight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:moving_light&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MovingLight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:spotlight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Spotlight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As I mentioned, for every note of every song, they need to make sure the lightslook exactly as they&amp;rsquo;re supposed to. This is tracked as the lighting&amp;rsquo;scomposition.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingComposition&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:light_name&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:color&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:effect&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ducking-into-lights-on-stage&#34;&gt;Ducking into Lights on Stage &lt;a href=&#34;#ducking-into-lights-on-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As the band is playing the show, the lighting technicians follow note-for-noteand need to apply the composition.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#3c3d38&#34;&gt;&lt;span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @lighting&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_lighting(note) }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because each of our different lights respond to the same message (&lt;code&gt;trigger&lt;/code&gt;)with the same signature, the lighting controller doesn&amp;rsquo;t need to care, or evenknow, about which light it&amp;rsquo;s operating. All it knows is that it needs to sendit the trigger signal and apply the required composition.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_lighting&lt;/span&gt;(note)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lighting_composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lighting&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trigger(@powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;lighting_composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;light_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, lighting_composition)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(light, composition)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    light&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trigger(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;: composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;: composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;effect,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;LightingController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;trigger&lt;/code&gt; method is taking advantage of duck typing.Ruby doesn&amp;rsquo;t care what kind of object it&amp;rsquo;s calling in its &lt;code&gt;light&lt;/code&gt; argument. Allthat matters is that it responds to &lt;code&gt;trigger&lt;/code&gt;. We also used duck typing when wediscussed &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;. Our guitardidn&amp;rsquo;t care how the amplifier made sound, or even if it did make sound. All thatmatters at runtime to satisfy Ruby is that the object we pass in responds to&lt;code&gt;play&lt;/code&gt; and accepts an argument.&lt;/p&gt;&lt;h2 id=&#34;static-lighting&#34;&gt;Static Lighting &lt;a href=&#34;#static-lighting&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re more familiar with static languages or different typing systems, andyou need to define common behavior for what a set of classes do, you may befamiliar with an interface. For example, let&amp;rsquo;s use Java to define an interfacefor our lights.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Light&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(Color color, LightingEffect effect)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each of our lights would then implement this interface, defining their ownimplementation of what they do when the light is triggered.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spotlight&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Light {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(Color color, LightingEffect effect) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Turn the light on or off&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now set our &lt;code&gt;LightingController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;trigger&lt;/code&gt; method to accept any kind oflight.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(Light light, LightingComposition composition) {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    light.&lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(composition.&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;, composition.&lt;span style=&#34;color:#a6e22e&#34;&gt;effect&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This satisfies Java&amp;rsquo;s type system, because anything that implementsthe &lt;code&gt;Light&lt;/code&gt; interface is required to respond to the &lt;code&gt;trigger&lt;/code&gt; method acceptingthose types of arguments.&lt;/p&gt;&lt;p&gt;Because of duck typing in Ruby, defining this contract and enforcing it isunnecessary. However, Ruby 3 will be &lt;a href=&#34;https://www.ruby-lang.org/en/news/2020/09/25/ruby-3-0-0-preview1-released/&#34;&gt;shipping&lt;/a&gt; with a way to define typesignatures, called &lt;a href=&#34;https://github.com/ruby/rbs&#34;&gt;RBS&lt;/a&gt;. RBS includes a mechanismto define interfaces, which you can read more about &lt;a href=&#34;https://developer.squareup.com/blog/the-state-of-ruby-3-typing/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Duck typing is a core design feature of Ruby and other dynamic languages;however, it does require a degree of trust. Because everything is determined atruntime, there&amp;rsquo;s nothing stopping you from passing in an object to a method thatdoesn&amp;rsquo;t respond to the methods it needs to. That will generate anexception, but that may be too late to get that feedback. However, to manyRubyists, the flexibility this approach provides often outweighs the cost.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;re coming from a static typing system, or desiring more direction orenforcement about what&amp;rsquo;s expected to be provided as an argument, theninvestigate defining interface types with RBS, which will be part of Ruby 3.&lt;/p&gt;&lt;p&gt;Our concert series continues with a discussion on &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;composition and delegation&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/shedding-light-on-duck-typing&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Dependency Injection: Plug In</title>
       <link>https://kevinjmurphy.com/posts/dependency-injection-plug-in/</link>
       <pubDate>Tue, 24 Nov 2020 14:10:31 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/dependency-injection-plug-in/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Dependency Injection: Plug In&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Dependency injection is a fancy term. It &lt;strong&gt;sounds&lt;/strong&gt; intimidating. The purpose ofthis post is to explain what dependency injection is, how to use it, and why itcan be beneficial. To illustrate, let&amp;rsquo;s talk about playing a guitar in aconcert, which comes from my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;sound-check&#34;&gt;Sound Check &lt;a href=&#34;#sound-check&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A guitarist in a band uses an amplifier when playing a live concert.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @amplifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the guitar is played the sound travels through the amplifier, so theaudience can hear the notes being played.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;phrasing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;string_sound&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(string_sound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;amp_value)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can play a great show with this setup! Your guitar uses the amplifier itdefines, and all is well. Until&amp;hellip;&lt;/p&gt;&lt;h2 id=&#34;wall-of-sound&#34;&gt;Wall of Sound &lt;a href=&#34;#wall-of-sound&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Some guitarists experiment with gear - a lot. Different amplifiers are going tomake different sounds. However, we&amp;rsquo;ve made it very difficult for our guitar tobe plugged in to different amplifiers.&lt;/p&gt;&lt;p&gt;Right now, our dependence on the amplifier class to play the sound from theguitar is hard-coded in the &lt;code&gt;Guitar&lt;/code&gt; class. The initializer sets up an explicitdependency with the &lt;code&gt;Amplifier&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;If we want to plug the guitar into a &lt;code&gt;LouderAmplifier&lt;/code&gt;, we can&amp;rsquo;t do that withoutchanging our &lt;code&gt;Guitar&lt;/code&gt; class. Every different amplifier will require a change toour &lt;code&gt;Guitar&lt;/code&gt; class.&lt;/p&gt;&lt;h2 id=&#34;plug-and-play&#34;&gt;Plug and Play &lt;a href=&#34;#plug-and-play&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can resolve this limitation by instead passing in the amplifier that&amp;rsquo;ll beused with the guitar when we make a new guitar.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(amplifier)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @amplifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; amplifier&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this small change, our &lt;code&gt;Guitar&lt;/code&gt; can work with any amplifier that respondsto the &lt;code&gt;play&lt;/code&gt; method. Rather than being coupled to the &lt;code&gt;Amplifier&lt;/code&gt; class, werequire that any users of the &lt;code&gt;Guitar&lt;/code&gt; class instead explicitly pass in thiscollaborating class. This is a form of dependency injection, specifically&lt;a href=&#34;https://martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer&#34;&gt;Constructor Injection&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;sound-engineering&#34;&gt;Sound Engineering &lt;a href=&#34;#sound-engineering&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that we&amp;rsquo;ve seen an example of what dependency injection is, let&amp;rsquo;s discusswhy we would want to use it.&lt;/p&gt;&lt;h3 id=&#34;flexibility&#34;&gt;Flexibility &lt;a href=&#34;#flexibility&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is the motivation described in the example above. By removing thehard-coded dependency as an implementation detail of our class, we can insteaduse any dependency desired, as long as it responds to the methods that we needto use within the class. For us, this means that guitars can use any amplifierthey&amp;rsquo;d like; the guitarist isn&amp;rsquo;t limited to the amp they had when first buyingthe guitar.&lt;/p&gt;&lt;h3 id=&#34;testing&#34;&gt;Testing &lt;a href=&#34;#testing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Testing may be the first situation where the value of this flexibility can beappreciated. Tests are the first consumers of your implementation, and it&amp;rsquo;simportant to listen to the implicit feedback they give you. If a class or amethod is hard to test, it very likely will be hard to use - or at least complexto understand.&lt;/p&gt;&lt;p&gt;In reality, the difficulty in testing the &lt;code&gt;Guitar&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar.rb&#34;&gt;class&lt;/a&gt;is what led to the decision to inject the amplifier in. That&amp;rsquo;s because the&lt;code&gt;Amplifier&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/amplifier.rb&#34;&gt;class&lt;/a&gt;is essentially a wrapper around &lt;a href=&#34;https://sonic-pi.net/&#34;&gt;Sonic Pi&lt;/a&gt;. Sonic Pidescribes itself as a &amp;ldquo;code-based music creation and performance tool&amp;rdquo;, soplaying the guitar with this amplifier will actually play a sound on yourcomputer.&lt;/p&gt;&lt;p&gt;As exciting as that is, I don&amp;rsquo;t want to have Sonic Pi running just to execute mytests. And even if I did, I don&amp;rsquo;t need to hear the sound it would generate everytime I run my tests. And so, I created a separate amp for testing: a&lt;code&gt;PracticeAmplifier&lt;/code&gt;. What does that amp do? &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/practice_amplifier.rb&#34;&gt;Absolutely nothing&lt;/a&gt;!And that&amp;rsquo;s perfect for my unit tests. They&amp;rsquo;re not concerned with the sound theamplifier makes when playing the guitar. They&amp;rsquo;re interested in exercising thelogic that&amp;rsquo;s within the &lt;code&gt;Guitar&lt;/code&gt; class only.&lt;/p&gt;&lt;p&gt;More generally, maybe your class is collaborating with another class that makesan API call or performs file I/O. You don&amp;rsquo;t want to have to execute or mock outthose actions in your class&amp;rsquo;s tests - it&amp;rsquo;s the collaborator&amp;rsquo;s tests that shouldbe concerned with that. You can instead pass in another class that doesn&amp;rsquo;t dothose things, providing speedy and relevant feedback in your tests.&lt;/p&gt;&lt;h3 id=&#34;complexity-identification&#34;&gt;Complexity Identification &lt;a href=&#34;#complexity-identification&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The responsibility of systems tends to grow over time. This is true not only foryour entire application, but the different components of it, down to theindividual classes or methods. As functionality continues to get added toclasses, you may need to add in more and more collaborators. If each of thesechanges are made piecemeal over time, it can be difficult to step back andrealize not only how coupled a class is to other classes, but how &lt;strong&gt;many&lt;/strong&gt;classes it&amp;rsquo;s coupled to.&lt;/p&gt;&lt;p&gt;Injecting dependencies explicitly makes it more clear &lt;em&gt;what&lt;/em&gt; this class isdependent on, and &lt;em&gt;how many&lt;/em&gt; things. As the list of things you need to pass in toa constructor or a method grows to support new features, it can serveas a proxy to gauge how complexity within the class or method is growing. Thismay exert more natural pressure to identify different abstractions orrefactorings to implement.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby&amp;rsquo;s inherent flexibility can make dependency injection a less-likely tool toreach for, particularly if &lt;a href=&#34;https://dhh.dk/2012/dependency-injection-is-not-a-virtue.html&#34;&gt;testing&lt;/a&gt; is when you would notice that pain initially, given the &lt;a href=&#34;https://www.youtube.com/watch?v=iEfpAp2sqiw&#34;&gt;tools&lt;/a&gt; at ourdisposal to make testing interactions with dependencies easier.&lt;/p&gt;&lt;p&gt;Dependency injection is also a daunting term that often carries the assumptionthat you need a heavyweight &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection#Dependency_injection_frameworks&#34;&gt;framework&lt;/a&gt; to implement it. However, if you can pass in an object as an argument to an initializer (constructor) or even an individual method - congratulations, you&amp;rsquo;ve injected a dependency!&lt;/p&gt;&lt;p&gt;Using dependency injection can lead to less tightly-coupled code, whichallows for more flexibility in collaborating with others, reduces the burden oftesting, and makes it more clear when classes are growing to the point wheretheir current design needs to be reconsidered.&lt;/p&gt;&lt;p&gt;The next post in our series explains using &lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;duck typing&lt;/a&gt; in ruby.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/dependency-injection-plug-in&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Explain Like I&#39;m Five</title>
       <link>https://kevinjmurphy.com/posts/explain-like-im-five/</link>
       <pubDate>Wed, 11 Nov 2020 15:38:10 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/explain-like-im-five/</guid>
       <description>&lt;h2 id=&#34;explaining-myself&#34;&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;ing Myself &lt;a href=&#34;#explaining-myself&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Running &lt;code&gt;EXPLAIN&lt;/code&gt; to show the execution plan for different database queries canhelp you understand why the performance of a particular database interactionis the way it is, and how you might be able to improve it. The purpose of thispost is not to interpret and understand the results of an execution plan.Rather, we&amp;rsquo;ll learn five different ways you can get this information from yourRails app.&lt;/p&gt;&lt;p&gt;Some of these examples are PostgreSQL-specific.&lt;/p&gt;&lt;h2 id=&#34;1-activerecords-explain-method&#34;&gt;1. ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; Method &lt;a href=&#34;#1-activerecords-explain-method&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Rails already has the &lt;code&gt;explain&lt;/code&gt; method &lt;a href=&#34;https://apidock.com/rails/ActiveRecord/Relation/explain&#34;&gt;built into&lt;/a&gt; ActiveRecord for you to use.You can add &lt;code&gt;explain&lt;/code&gt; to any ActiveRecord relation, and you&amp;rsquo;ll receive theexecution plan.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXPLAIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $1 &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#66d9ef&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PLAN&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Scan&lt;/span&gt; on users  (cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;340&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: ((email)&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; rows)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us a great starting point, and works across various databases.However, if you want some additional features, like &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-explain.html&#34;&gt;running&lt;/a&gt; &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;, you&amp;rsquo;ll need to look elsewhere. Unless you&amp;rsquo;re using ActiveRecord 7.1 or higher, where it&amp;rsquo;s &lt;a href=&#34;https://www.bigbinary.com/blog/rails-7-1-adds-options-to-activerecord-relation-explain#analyze&#34;&gt;now available&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;2-interpolating-a-query-in-an-activerecord-connection&#34;&gt;2. Interpolating a Query in an ActiveRecord Connection &lt;a href=&#34;#2-interpolating-a-query-in-an-activerecord-connection&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can fall back to creating your own SQL statement and passing that intoActiveRecord&amp;rsquo;s &lt;code&gt;execute&lt;/code&gt; method. However, you probably don&amp;rsquo;t want to go throughthe error-prone and arduous effort of hand-writing the SQL query you just wroteusing ActiveRecord&amp;rsquo;s syntax.&lt;/p&gt;&lt;p&gt;Luckily, you don&amp;rsquo;t have to! You can convert your ActiveRecord query to a string with&lt;code&gt;.to_sql&lt;/code&gt;, and add that into a string you provide to &lt;code&gt;execute&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPLAIN &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This itself isn&amp;rsquo;t much of a win at all over using ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt;method. It&amp;rsquo;s longer, you&amp;rsquo;ve got to remember to grab the &lt;code&gt;values&lt;/code&gt; from the&lt;code&gt;execute&lt;/code&gt; results, and the output isn&amp;rsquo;t as nicely formatted. However, becausethis is &amp;ldquo;just SQL&amp;rdquo; that you&amp;rsquo;re running in &lt;code&gt;execute&lt;/code&gt;, you can use any featuresyour database engine of choice provides, like &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPLAIN ANALYZE &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340) (actual time=0.184..0.233 rows=0 loops=1)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Rows Removed by Filter: 57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Planning time: 0.185 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Execution time: 0.472 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/mlodato517&#34;&gt;Mark Lodato&lt;/a&gt; for this recommendation.&lt;/p&gt;&lt;h2 id=&#34;3-the-activerecord-explain-analyze-gem&#34;&gt;3. The activerecord-explain-analyze Gem &lt;a href=&#34;#3-the-activerecord-explain-analyze-gem&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re willing to take on a dependency to get some additional explanatory power,are using ActiveRecord 4 through 6, and use PostgresSQL, thenyou can reach for the &lt;a href=&#34;https://github.com/6/activerecord-explain-analyze&#34;&gt;activerecord-explain-analyze&lt;/a&gt; gem.&lt;/p&gt;&lt;p&gt;Now you can specify the output formatting of your &lt;code&gt;EXPLAIN&lt;/code&gt; results, and call&lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain(&lt;span style=&#34;color:#e6db74&#34;&gt;analyze&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXPLAIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $1&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Scan&lt;/span&gt; on &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;users  (cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;340&lt;/span&gt;) (actual time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; loops&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;Output&lt;/span&gt;: id, email, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, created_at, updated_at, time_zone, first_name, last_name, role, applicant_id, centrify_uuid, display_name, uuid, login_authorized, invite_id, legacy_identifier, disabled_at, invite_sent_at, password_last_changed_at, deprovisioning_reason&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: ((users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email)&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Rows&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Removed&lt;/span&gt; by &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;Buffers&lt;/span&gt;: shared hit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Planning&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;time&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;277&lt;/span&gt; ms&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Execution&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;time&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt; ms&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-the-pg-eyeballs-gem&#34;&gt;4. The pg-eyeballs Gem &lt;a href=&#34;#4-the-pg-eyeballs-gem&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/bradurani/pg-eyeballs&#34;&gt;pg-eyeballs&lt;/a&gt; is another gem that&amp;rsquo;s PostgreSQL-specific, and provides additionalfunctionality that ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; method does not currently.&lt;/p&gt;&lt;p&gt;Our sought-after &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; is one of many options you can request:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eyeballs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain(&lt;span style=&#34;color:#e6db74&#34;&gt;options&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:analyze&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340) (actual time=0.028..0.036 rows=0 loops=1)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Rows Removed by Filter: 57&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Planning time: 0.087 ms&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Execution time: 0.084 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-terminal-cli-of-your-database&#34;&gt;5. Terminal CLI of Your Database &lt;a href=&#34;#5-terminal-cli-of-your-database&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All of these prior examples have been run from within a Rails process such as theRails console. However, we can skip Rails entirely and use our databasedirectly. In our case with PostgreSQL, we can use &lt;code&gt;psql&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# psql -U postgres&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After connecting, we can list which databases exist with &lt;code&gt;\l&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# \l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                              List of databases&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Name                 |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------+----------+----------+------------+------------+-----------------------&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; example_app_development             | postgres | UTF8     | en_US.utf8 | en_US.utf8 |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After finding the correct database, we can connect to it with &lt;code&gt;\c&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# \c example_app_development&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then we can run any query we would like, including EXPLAIN:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example_app_development&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# EXPLAIN SELECT * FROM USERS WHERE EMAIL = &amp;#39;test@example.com&amp;#39;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      QUERY PLAN&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Seq Scan on users  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.00..2.71 rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;340&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Filter: &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;::text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;::text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, we have all the features available to us that our database enginesupports, so we can use &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; or any other functionality, withoutneeding it to be built into Rails. This gives us all the power our databaseprovides, but we lose the expressiveness of ActiveRecord&amp;rsquo;s query API - orrather, we need to find the &lt;code&gt;.to_sql&lt;/code&gt; representation of the query we&amp;rsquo;reinterested in prior to using this.&lt;/p&gt;&lt;h2 id=&#34;explaining-which-to-use&#34;&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;ing Which to Use &lt;a href=&#34;#explaining-which-to-use&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re interested in quickly getting an execution plan of an existingActiveRecord query, start with using ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;Should you need more functionality that your database engine provides, you can&lt;code&gt;execute&lt;/code&gt; any query you would like to your database through ActiveRecord.&lt;/p&gt;&lt;p&gt;If you need that additional functionality, such as &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;, on aregular basis, consider taking on an additional dependency that&amp;rsquo;ll provide thatfor you, such as &lt;code&gt;activerecord-explain-analyze&lt;/code&gt; or &lt;code&gt;pg-eyeballs&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Don&amp;rsquo;t forget you can go directly to your database without using Rails as anintermediary.&lt;/p&gt;&lt;p&gt;I hope this has &lt;code&gt;EXPLAIN&lt;/code&gt;ed a thing or two (or five) about ways to gather performanceinformation for your queries. Once you decide which method is right for you,good luck optimizing!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/explain-like-im-five&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Enough Coverage To Beat The Band</title>
       <link>https://kevinjmurphy.com/posts/coverage/</link>
       <pubDate>Mon, 19 Oct 2020 08:12:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/coverage/</guid>
       <description>&lt;h2 id=&#34;thank-you&#34;&gt;Thank You! &lt;a href=&#34;#thank-you&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks for checking out my talk! To keep in touch, you can join &lt;a href=&#34;https://newsletter.kevinjmurphy.com/&#34;&gt;my newsletter&lt;/a&gt;or &lt;a href=&#34;https://kevinjmurphy.com/about/#elsewhere-on-the-internet&#34;&gt;follow me&lt;/a&gt; on the Internet.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/H4pBjWOMr_Y?si=LuO1nsqTJRCMOOIk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;Blue Ridge Ruby &lt;a href=&#34;https://youtu.be/H4pBjWOMr_Y&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;RubyConf &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/enough-coverage-to-beat-the-band&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/rubys-got-you-covered/&#34;&gt;Ruby&amp;rsquo;s Got You Covered&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/evaluating-more-coverage-in-ruby-3-2/&#34;&gt;Evaluating More Coverage in Ruby 3.2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi to Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post: &lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together to Play Music&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/enough-coverage-to-beat-the-band-proposal/&#34;&gt;Proposal&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;code-coverage-modes&#34;&gt;Code Coverage Modes &lt;a href=&#34;#code-coverage-modes&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Each mode answers a different question about the code that was run under coverage:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lines - how many times was each line executed?&lt;/li&gt;&lt;li&gt;Oneshot Lines - which lines were executed?&lt;/li&gt;&lt;li&gt;Methods - how many times was each method executed?&lt;/li&gt;&lt;li&gt;Branches - how many times was each conditional executed?&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;lines&#34;&gt;Lines &lt;a href=&#34;#lines&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p class=&#34;float-image coverage-emoji&#34;&gt;🎸&lt;/p&gt;&lt;p&gt;This is the “classic” implementation of providing coverage. Each relevant line, that is those that aren’t things like empty lines or &lt;code&gt;end&lt;/code&gt; statements, has a counter that is incremented each time the line is visited in code execution while coverage is running. At the conclusion, you will see how many times each line is executed.&lt;/p&gt;&lt;h4 id=&#34;benefits&#34;&gt;Benefits &lt;a href=&#34;#benefits&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;This is the default mode for coverage.&lt;/li&gt;&lt;li&gt;Most of the time, this option will provide you with the information you want.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;oneshot-lines&#34;&gt;Oneshot Lines &lt;a href=&#34;#oneshot-lines&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p class=&#34;float-image coverage-emoji&#34;&gt;🎹&lt;/p&gt;&lt;p&gt;Similar to lines coverage, this also documents that a relevant line was executed while coverage was running. However, it’s a binary report of whether it was executed or not. It will not tell you how often. This may be sufficient in many cases, and comes with the benefit of being more performant every subsequent time a particular line of code is executed under coverage.&lt;/p&gt;&lt;h4 id=&#34;benefits-1&#34;&gt;Benefits &lt;a href=&#34;#benefits-1&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Oneshot provides you with nothing more than if a line of application code is executed in a test suite.&lt;/li&gt;&lt;li&gt;As long as being constrained to knowing if something ran or not, and not knowing how often, is sufficient, oneshot lines coverage provides the same feedback as lines coverage with better performance.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;methods&#34;&gt;Methods &lt;a href=&#34;#methods&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p class=&#34;float-image coverage-emoji&#34;&gt;💡&lt;/p&gt;&lt;p&gt;Methods coverage brings the granularity of lines coverage up to a coarser grain. Rather than tracking individual lines, it’s concerned with whether a particular method is executed. It can be a 10 line method where the first line is the only line ever executed. Methods coverage will still consider that as executed the same as a 20 line method where each line is executed.&lt;/p&gt;&lt;h4 id=&#34;benefits-2&#34;&gt;Benefits &lt;a href=&#34;#benefits-2&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;This has a targeted focus to be able to answer a more specific question - is this method executed? - with easier to process feedback.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;branches&#34;&gt;Branches &lt;a href=&#34;#branches&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p class=&#34;float-image coverage-emoji&#34;&gt;🎤&lt;/p&gt;&lt;p&gt;Branches coverage tracks execution of different conditional paths and documents how often those different paths are run. The unique benefit that this provides over lines coverage is in conditionals that execute multiple code paths in a single line, such as ternary statements. You may have a part of that conditional that’s never run or tested, but you wouldn&amp;rsquo;t know that if you’re relying on lines coverage alone.&lt;/p&gt;&lt;h4 id=&#34;benefits-3&#34;&gt;Benefits &lt;a href=&#34;#benefits-3&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;It provides a different frame of reference than lines coverage, which ends up being either coarser or more granular than line coverage in different situations.&lt;/li&gt;&lt;li&gt;For conditionals that lay out multiple code paths on a single line, this provides feedback on their individual execution where lines coverage only considers whether any part of the line was run.&lt;/li&gt;&lt;li&gt;When interested in conditionals, and only conditionals, it has less noise than lines coverage.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;gem-support&#34;&gt;Gem Support &lt;a href=&#34;#gem-support&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;d like to leverage existing abstractions on top of ruby&amp;rsquo;s coverage modulein your current applications, I recommend:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/simplecov-ruby/simplecov&#34;&gt;SimpleCov&lt;/a&gt; for test coverage. Itnow supports &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov#branch-coverage-ruby--25&#34;&gt;branches&lt;/a&gt; coverage!&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/danmayer/coverband&#34;&gt;Coverband&lt;/a&gt; for measuring coverage ofproduction code. Here&amp;rsquo;s an &lt;a href=&#34;https://github.com/danmayer/coverband/blob/43c5ac94febc7a961346b0e9408d829d4d2ef8ad/test/rails5_dummy/config/coverband.rb#L15&#34;&gt;example&lt;/a&gt; on how to configure it to run using oneshot lines coverage.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;supplemental-content&#34;&gt;Supplemental Content &lt;a href=&#34;#supplemental-content&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I have a series of blog posts using the live music examples I wrote for the talkto describe various software design principles. The first post is about&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;.You can see the full series &lt;a href=&#34;https://kevinjmurphy.com/tags/software-design-concert-series/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;presentation-fonts&#34;&gt;Presentation Fonts &lt;a href=&#34;#presentation-fonts&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The main content of all my slides, for code examples and similar text, is Arial Narrow.&lt;/p&gt;&lt;p&gt;Slide titles and big statement fonts are The Fragile, available from &lt;a href=&#34;https://www.theninhotline.com/features/fonts/&#34;&gt;The NIN Hotline&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Supplemental content, like my twitter handle and text pointing to areasexplaining what coverage output represents are The Wretched, also available from&lt;a href=&#34;https://www.theninhotline.com/features/fonts/&#34;&gt;The NIN Hotline&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;presentation-photo-credits&#34;&gt;Presentation Photo Credits &lt;a href=&#34;#presentation-photo-credits&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All photos used in the presentation are from the band &lt;a href=&#34;https://www.nin.com/&#34;&gt;Nine Inch Nails&lt;/a&gt;, and released ontheir &lt;a href=&#34;https://www.flickr.com/photos/nineinchnails/&#34;&gt;flickr&lt;/a&gt; account with a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/2.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 2.0 Generic&lt;/a&gt; license.&lt;/p&gt;&lt;p&gt;Below I&amp;rsquo;ve embedded all the images used to link directly to their originalsource.&lt;/p&gt;&lt;h3 id=&#34;introduction&#34;&gt;Introduction &lt;a href=&#34;#introduction&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738980841/&#34; title=&#34;Nine Inch Nails Live @ Lollapalooza - Chicago, IL, 8.03.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2222/2738980841_dbc739b957_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Lollapalooza - Chicago, IL, 8.03.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639150601/&#34; title=&#34;Nine Inch Nails live @ PNC Bank Arts Center, Holmdel, NJ, 6.06.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3606/3639150601_409c17e154_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails live @ PNC Bank Arts Center, Holmdel, NJ, 6.06.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;lines-coverage&#34;&gt;Lines Coverage &lt;a href=&#34;#lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573650628/&#34; title=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2455/3573650628_75ed822d85_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573650014/&#34; title=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3340/3573650014_cf942da814_c.jpg&#34; width=&#34;500&#34; height=&#34;750&#34; alt=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722222236&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2841/10722222236_c5e6dd1150_c.jpg&#34; width=&#34;533&#34; height=&#34;800&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639160537/&#34; title=&#34;Nine Inch Nails live @ Bonnaroo Festival in Manchester, TN, 6.13.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3331/3639160537_b3f8ea5158_c.jpg&#34; width=&#34;533&#34; height=&#34;800&#34; alt=&#34;Nine Inch Nails live @ Bonnaroo Festival in Manchester, TN, 6.13.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3572799825/&#34; title=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2432/3572799825_c091e87ff3_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639938714/&#34; title=&#34;Nine Inch Nails live @ Starlight Theatre, Kansas City, MO, 5.27.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3664/3639938714_81c6079524_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails live @ Starlight Theatre, Kansas City, MO, 5.27.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;oneshot-lines-coverage&#34;&gt;Oneshot Lines Coverage &lt;a href=&#34;#oneshot-lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639113025/&#34; title=&#34;Nine Inch Nails Live @ Sasquatch Festival in George, WA, on 5.24.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2460/3639113025_dee5235b96_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails Live @ Sasquatch Festival in George, WA, on 5.24.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3032772287/&#34; title=&#34;Nine Inch Nails Live @ Bell Centre - Montreal, QC, 11.12.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3057/3032772287_517c1d7b41_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Bell Centre - Montreal, QC, 11.12.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739834768&#34; title=&#34;Nine Inch Nails Live @ Air Canada Centre - Toronto, ON, 8.05.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3252/2739834768_7d40ed685e_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Air Canada Centre - Toronto, ON, 8.05.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573642602&#34; title=&#34;Nine Inch Nails Live @ Santa Barbara Bowl - Santa Barbara, CA, 5.21.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3606/3573642602_c343bd27b4_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Santa Barbara Bowl - Santa Barbara, CA, 5.21.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3212245282&#34; title=&#34;Nine Inch Nails Live @ Razzmatazz - Barcelona, Spain, 2.19.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3463/3212245282_e1fee55ee5_z.jpg&#34; width=&#34;640&#34; height=&#34;480&#34; alt=&#34;Nine Inch Nails Live @ Razzmatazz - Barcelona, Spain, 2.19.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573605580/&#34; title=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3601/3573605580_2dafcc463c_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3211397961/&#34; title=&#34;Nine Inch Nails Live @ Olympia - Paris, France, 2.21.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3481/3211397961_2c19e04509_z.jpg&#34; width=&#34;640&#34; height=&#34;480&#34; alt=&#34;Nine Inch Nails Live @ Olympia - Paris, France, 2.21.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2827641506/&#34; title=&#34;Nine Inch Nails Live @ Seagate Convention Center - Toledo, OH, 8.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3148/2827641506_d102315760_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Seagate Convention Center - Toledo, OH, 8.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2768600347/&#34; title=&#34;Nine Inch Nails Live @ Gwinnett Arena - Duluth, GA, 8.13.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3147/2768600347_8a7059bf75_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Gwinnett Arena - Duluth, GA, 8.13.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997174649/&#34; title=&#34;Nine Inch Nails Live @ Arena Santiago - Santiago, Chile, 10.04.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3276/2997174649_c8067aa285_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Arena Santiago - Santiago, Chile, 10.04.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;methods-coverage&#34;&gt;Methods Coverage &lt;a href=&#34;#methods-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722216364&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3723/10722216364_e307c51d3b_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3572822083/&#34; title=&#34;Nine Inch Nails Live @ The Pearl - Las Vegas, NV, 5.18.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3298/3572822083_88b2ccae93_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live @ The Pearl - Las Vegas, NV, 5.18.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722275244/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3694/10722275244_34e8865f69_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722195315/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/7459/10722195315_2e3a458395_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722461283/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/5539/10722461283_68242773f4_z.jpg&#34; width=&#34;640&#34; height=&#34;424&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722293856/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/7387/10722293856_eedc277cda_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738931283/&#34; title=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2353/2738931283_2bcaac316c_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739771096/&#34; title=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2103/2739771096_6fda018740_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2826802685/&#34; title=&#34;Nine Inch Nails Live @ Q Arena - Cleveland, OH, 8.22.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3100/2826802685_f425c65f80_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Q Arena - Cleveland, OH, 8.22.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3202016537/&#34; title=&#34;Nine Inch Nails Live @ Coliseum - Lisbon, Portugal, 2.11.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3079/3202016537_6c2dd2e850_z.jpg&#34; width=&#34;480&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails Live @ Coliseum - Lisbon, Portugal, 2.11.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738948949/&#34; title=&#34;Nine Inch Nails Live @ Key Arena - Seattle, WA, 7.26.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3223/2738948949_a6e508137f_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Key Arena - Seattle, WA, 7.26.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;branches-coverage&#34;&gt;Branches Coverage &lt;a href=&#34;#branches-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3032765125/&#34; title=&#34;Nine Inch Nails Live @ DCU Center - Worcester, MA, 11.09.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3044/3032765125_0cea90d73b_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ DCU Center - Worcester, MA, 11.09.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997970466/&#34; title=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3143/2997970466_c27cdaef49_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997970974/&#34; title=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3012/2997970974_2cb4dec9ba_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739752862/&#34; title=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2307/2739752862_346b683bcb_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738913701/&#34; title=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3201/2738913701_9b991d6e95_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997202615/&#34; title=&#34;Soundcheck in Mexico City, Mexico - 10.17.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3061/2997202615_04151a1234_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Soundcheck in Mexico City, Mexico - 10.17.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3017100564/&#34; title=&#34;Nine Inch Nails Live @ House Of Blues - Atlantic City, New Jersey, 11.06.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3017/3017100564_0a48c0b815_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ House Of Blues - Atlantic City, New Jersey, 11.06.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;closing&#34;&gt;Closing &lt;a href=&#34;#closing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639141695/&#34; title=&#34;Nine Inch Nails live @ DTE Energy Music Theatre, Clarkston, MI, 5.31.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3360/3639141695_836a8f0745_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails live @ DTE Energy Music Theatre, Clarkston, MI, 5.31.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
     </item>
   
     <item>
       <title>Enough Coverage To Beat The Band at RubyConf</title>
       <link>https://kevinjmurphy.com/posts/rubyconf-2020/</link>
       <pubDate>Wed, 16 Sep 2020 19:47:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubyconf-2020/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be speaking as part of RubyConf 2020, which you can join from&lt;a href=&#34;http://rubyconf.org/&#34;&gt;wherever&lt;/a&gt; you are. I hope you&amp;rsquo;ll join &lt;a href=&#34;http://rubyconf.org/program/sessions#session-1044&#34;&gt;my session&lt;/a&gt; and many others from Nov17 - 19, 2020.&lt;/p&gt;&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The lights cut out. The crowd roars. It’s time. The band takes the stage. They’ve practiced the songs, particularly the covers. They’ve sound checked the coverage of the speakers. They know the lighting rig has the proper colored gels covering the lamps. They’re nervous, but they’ve got it all covered.&lt;/p&gt;&lt;p&gt;Similarly, code coverage can give you confidence before your app performs on production and also tell you how live code is used (or not used). We’ll cover how to leverage ruby’s different coverage measurement techniques in concert to assist your crew and delight your audience.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Fake It While You Make It</title>
       <link>https://kevinjmurphy.com/posts/railsconf-2020/</link>
       <pubDate>Mon, 06 Apr 2020 20:05:03 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/railsconf-2020/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be speaking as a part of RailsConf 2020, which you can join fromthe comfort of your own &lt;a href=&#34;https://railsconf.com/&#34;&gt;couch&lt;/a&gt;! I hope you&amp;rsquo;ll join &lt;a href=&#34;https://railsconf.com/2020/video/kevin-murphy-fake-it-while-you-make-it&#34;&gt;my session&lt;/a&gt; and many otherswhen they are released on May 5, 2020.&lt;/p&gt;&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We all write code to interface with external systems, like a web service or a message queue. Can you confidently write tests without requiring the system as a dependency? How can you shield users of your code from the inner workings of the interface? Explore one attempt to answer these questions.&lt;/p&gt;&lt;p&gt;There&amp;rsquo;s no shortage of tools at your disposal to solve these problems. This talk will introduce some available options, provide guidance on when one approach may be more appropriate than another, and discuss how to use these tools together to ease the testing process.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/iEfpAp2sqiw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://youtu.be/iEfpAp2sqiw&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/fake-it-while-you-make-it&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/testing-services&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/testing-services#testing-methods&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/fake-it-while-you-make-it-proposal/&#34;&gt;Proposal&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post &lt;a href=&#34;https://kevinjmurphy.com/posts/testing-dependencies/&#34;&gt;Testing Dependencies: Fake It While You Make It&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Blog Post &lt;a href=&#34;https://kevinjmurphy.com/posts/designing-dependency-domain/&#34;&gt;Designing A Dependency&amp;rsquo;s Domain&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Coding for Fun (Not Profit)</title>
       <link>https://kevinjmurphy.com/posts/coding-for-fun-not-profit/</link>
       <pubDate>Tue, 31 Dec 2019 08:56:04 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/coding-for-fun-not-profit/</guid>
       <description>&lt;p&gt;I originally wanted to call this post &amp;ldquo;Coding for Fun &lt;del&gt;And Profit&lt;/del&gt;&amp;rdquo; with AndProfit in strikethrough, but hugo wouldn&amp;rsquo;t recognize markdown in the title of anew post, so I gave up immediately and renamed it, which is a perfectencapsulation of what I&amp;rsquo;m looking to convey here.&lt;/p&gt;&lt;h2 id=&#34;background&#34;&gt;Background &lt;a href=&#34;#background&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve been paid to write code for almost 15 years now. I think I&amp;rsquo;m decent at it,and I enjoy doing it as a profession, but it&amp;rsquo;s not something I do much of in myfree time. I&amp;rsquo;m not against people having side projects, spending their freetime how they&amp;rsquo;d like and doing whatever energizes them, but I write enough codeduring the day at work to satisfy my interests there. I&amp;rsquo;ll never get a jobsomewhere that requires an extensive personal portfolio to show as proof of&amp;ldquo;passion&amp;rdquo;. I&amp;rsquo;m comfortable with that, and privileged enough to be able to saythat.&lt;/p&gt;&lt;p&gt;Before this, I&amp;rsquo;ve also never had a personal website - ever. Sure, I maintainvarious profiles on different social networks, but I&amp;rsquo;ve never had a place of myown on the internet. I&amp;rsquo;m also probably the only Rails developer who&amp;rsquo;s nevertyped &lt;code&gt;git push heroku&lt;/code&gt; in a terminal, but that&amp;rsquo;s a different story.&lt;/p&gt;&lt;h2 id=&#34;coding-for-work&#34;&gt;Coding For Work &lt;a href=&#34;#coding-for-work&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m a pretty methodical person in general, and I take that with me to work. Itcomes in handy in this business, but as with everything, it has a cost. It takestime and effort, but my belief is that the value for my employer or clientoutweighs that cost. Some of these items include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Requirements vetting&lt;/li&gt;&lt;li&gt;Alternatives analysis&lt;/li&gt;&lt;li&gt;Automated testing, whether through TDD or not&lt;/li&gt;&lt;li&gt;Code review&lt;/li&gt;&lt;li&gt;Maintenance and upkeep of dependencies&lt;/li&gt;&lt;li&gt;Clean commit history throughout the project&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Because the results of my actions affect the overall product, my team members,and all of my business partners, I&amp;rsquo;m careful and deliberate in the work that Ido.&lt;/p&gt;&lt;h2 id=&#34;coding-for-me&#34;&gt;Coding For Me &lt;a href=&#34;#coding-for-me&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I decided to stand this site up because I had some content I wanted to maintain,and I had the blessing of my employer to do so. I needed something quick andfast that I wouldn&amp;rsquo;t need to put a lot of effort into maintaining.&lt;/p&gt;&lt;p&gt;I also wanted to try out something new, so knowing I only needed a static sitegenerator, rather than reaching for my comfortable &lt;a href=&#34;https://middlemanapp.com/&#34;&gt;Middleman&lt;/a&gt;tool, I instead gave &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt; a try. After all, it is:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The world&amp;rsquo;s fastest framework for building websites&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In doing so, I of course ran into some hiccups and problems, but what I&amp;rsquo;ll talkabout here is the process, and how this was different than how I regularly work.&lt;/p&gt;&lt;h3 id=&#34;what-goes&#34;&gt;What Goes &lt;a href=&#34;#what-goes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;alternatives--upfront-analysis&#34;&gt;Alternatives &amp;amp; Upfront Analysis &lt;a href=&#34;#alternatives--upfront-analysis&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I went with hugo on name recognition only. I didn&amp;rsquo;t even identify the corefeature set I needed or didn&amp;rsquo;t need; I just dove right in. Similarly, I could havearduously reviewed the vast number of &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt; intheir gallery to find the perfect one, or customized my own. Instead, I chosethree that seemed &amp;ldquo;fine&amp;rdquo; above the fold, and picked the one that I liked bestafter a one minute review.&lt;/p&gt;&lt;h4 id=&#34;focus&#34;&gt;Focus &lt;a href=&#34;#focus&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;When I work from home, I do so from my office, with the door closed. I controlthe environment and am particular about what noises or stimuli are present.However, this is just for me, so instead I sat down on the couch next to my wifewhile she was watching something on TV. It&amp;rsquo;s ok if it takes a bit longer, or I&amp;rsquo;ma bit distracted, as long as I&amp;rsquo;m making that trade for me and me alone.&lt;/p&gt;&lt;h3 id=&#34;what-stays&#34;&gt;What Stays &lt;a href=&#34;#what-stays&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;verification&#34;&gt;Verification &lt;a href=&#34;#verification&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Testing brings comfort to me and I dislike working without tests. It helps guidemy initial implementation, gives safety for future refactors, and providesconfidence in delivering functionality. And most of the work that I like doingthe most, and as such gravitate towards, rarely has a direct user-facingcomponent.&lt;/p&gt;&lt;p&gt;However, that&amp;rsquo;s &lt;strong&gt;all&lt;/strong&gt; that this site is. I don&amp;rsquo;t want to spend time futzingwith configurations that I don&amp;rsquo;t need to, or meddling with the theme to eek outperformance improvements, or evaluating updating, changing, or removingdependencies. But I still need to make sure it works. I spent a ton more time inthe browser than I typically do developing for work, but it&amp;rsquo;s the same process:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify a thin slice of functionality&lt;/li&gt;&lt;li&gt;Focus on implementing it&lt;/li&gt;&lt;li&gt;Document other observations for future work&lt;/li&gt;&lt;li&gt;Iterate to the next thin slice&lt;/li&gt;&lt;li&gt;Deliver&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The mechanism by which I worked that process changed (refreshing the browser vs.running a test), but the process itself stayed the same.&lt;/p&gt;&lt;h4 id=&#34;documentation&#34;&gt;Documentation &lt;a href=&#34;#documentation&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Sure, my commit messages are definitely not to the degree that I would expect,hope, or want them to be. However, that doesn&amp;rsquo;t mean that they&amp;rsquo;re worthless.Particularly on these projects where I&amp;rsquo;m moving fast, their value is more as&amp;ldquo;save points&amp;rdquo; than documentation (and I&amp;rsquo;m not cleaning them up prior to movingthem into a mainline branch), but they can still provide valuable information on&lt;em&gt;why&lt;/em&gt; a change was made.&lt;/p&gt;&lt;p&gt;Additionally, particularly because this is a project that I&amp;rsquo;m likely to berevisiting infrequently, I made sure to take the time to add a README thatincludes quick examples of all the things I&amp;rsquo;m going to want to do. For thisproject, that includes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Creating a new post.&lt;/li&gt;&lt;li&gt;Running the server locally.&lt;/li&gt;&lt;li&gt;Deploying the changes (which there&amp;rsquo;s a script for).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Because&lt;/em&gt; it&amp;rsquo;s something I won&amp;rsquo;t touch day-to-day, it&amp;rsquo;s even &lt;strong&gt;more&lt;/strong&gt; importantto take the few minutes to document those quick commands to save myself the timeof needing to search for it every time that I want to edit this.&lt;/p&gt;&lt;h3 id=&#34;what-emerges&#34;&gt;What Emerges &lt;a href=&#34;#what-emerges&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;quick-assessment-of-good-enough&#34;&gt;Quick Assessment of &amp;ldquo;Good Enough&amp;rdquo; &lt;a href=&#34;#quick-assessment-of-good-enough&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;There&amp;rsquo;s always an ideal version of what you&amp;rsquo;re looking to accomplish. Thatlikely manifests itself both in the code itself, as well as the user-facingproduct. And we all want to hit that ideal; however, it&amp;rsquo;s not always feasible.And while I work diligently to reach that at work, I also do my best to bepragmatic about at least explaining the implications of getting to that ideal,presenting that to the decision-makers, and working with them to come to anagreement on how to proceed.&lt;/p&gt;&lt;p&gt;However, in this example, my goal was speed and speed alone. For example, I hada post to add which had some images that I wanted formatted just so. I couldn&amp;rsquo;tfigure out exactly how to position or size them to my liking. I think fromsearching for about 30 minutes I could have gotten there by having the images as&lt;a href=&#34;https://gohugo.io/content-management/page-resources/&#34;&gt;page resources&lt;/a&gt;, then usinghugo&amp;rsquo;s &lt;a href=&#34;https://gohugo.io/content-management/image-processing/&#34;&gt;image processing&lt;/a&gt;,and having those available in a &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;shortcode&lt;/a&gt;that I reference in my post.&lt;/p&gt;&lt;p&gt;I could have done that, but instead - I deleted the images. They weren&amp;rsquo;ttremendously important to the post. They certainly made things look nicer, butthey didn&amp;rsquo;t provide any explanatory value. So I removed them, and freed myselfof the problem. And the page doesn&amp;rsquo;t look exactly how I wanted it to, but it&amp;rsquo;sdone. And if I feel the need to scratch that itch in the future, I know where tostart.&lt;/p&gt;&lt;p&gt;Remember the context under which you&amp;rsquo;re developing, who the decision-makers are,and what choices you should make based on that. But work to know what you&lt;strong&gt;aren&amp;rsquo;t&lt;/strong&gt; willing to give up in your process, regardless of the context.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Diffin&#39; Dots</title>
       <link>https://kevinjmurphy.com/posts/diffin-dots/</link>
       <pubDate>Mon, 30 Dec 2019 21:04:53 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/diffin-dots/</guid>
       <description>&lt;h2 id=&#34;a-sweet-surprise&#34;&gt;A Sweet Surprise &lt;a href=&#34;#a-sweet-surprise&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Recently, a project needed to re-order some commits on a git branch. Weinitially performed this interactive rebase on a separate branch, so we didn&amp;rsquo;tmake a mistake on the original branch. After performing that rebase, we thenused Github&amp;rsquo;s &lt;a href=&#34;https://help.github.com/en/github/committing-changes-to-your-project/comparing-commits-across-time#comparing-branches&#34;&gt;compare view&lt;/a&gt;, expecting to see no files changed.&lt;/p&gt;&lt;p&gt;Instead, what we saw was every change that was introduced in all of the commitsthat were reordered on the new branch. This very much surprised us. We made nofunctional changes and were expecting to use this comparison as proof that wedidn&amp;rsquo;t accidentally drop a commit or do something terrible on accident.&lt;/p&gt;&lt;p&gt;We then looked to compare the branches locally. When we did that, we saw nodiff.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ diff-test|reorder git diff master&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Did we find a bug in Github? Did our re-ordering work? At this point, we had noidea.&lt;/p&gt;&lt;h2 id=&#34;read-the-recipe&#34;&gt;Read The Recipe &lt;a href=&#34;#read-the-recipe&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We dug into the documentation for &lt;code&gt;diff&lt;/code&gt;, a tool I use frequently,but don&amp;rsquo;t spend much time considering how it works.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s read some of the help on how to use the diff tool:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ git diff --help&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GIT-DIFF&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                                      Git Manual                                      GIT-DIFF&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;.&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           of a different branch.&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           This is to view the changes between two arbitrary &amp;lt;commit&amp;gt;.&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           same effect as using HEAD instead.&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;...&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           at a common ancestor of both &amp;lt;commit&amp;gt;.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Almost exclusively I&amp;rsquo;ve used diff in the form of &lt;code&gt;git diff other-ref&lt;/code&gt;. Andwith that, I would see what, if any, file changes occurred between those twobranches or commits. This is the two-dot comparison. However, Github uses the&lt;a href=&#34;https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-comparing-branches-in-pull-requests#three-dot-and-two-dot-git-diff-comparisons&#34;&gt;three-dot comparison&lt;/a&gt;by default.&lt;/p&gt;&lt;p&gt;In this scenario, the common ancestor is the latest commit on the reorderingbranch that wasn&amp;rsquo;t reordered. After the rebase, all of those reordered commitshave different SHAs, so are seen as different commits. As such, using thethree-dot option, git considers all of those SHAs as different or new, so all ofthem show as changes, even though there are no differences in the file contentsthemselves.&lt;/p&gt;&lt;h2 id=&#34;homemade-flavor&#34;&gt;Homemade Flavor &lt;a href=&#34;#homemade-flavor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s look at demonstrating this behavior entirely locally.&lt;/p&gt;&lt;h3 id=&#34;setup&#34;&gt;Setup &lt;a href=&#34;#setup&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;First, let&amp;rsquo;s create a new repository:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ mkdir diff-test&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;⇒ cd diff-test&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|⇒ git init .&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initialized empty Git repository&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll start by adding a few new files, and making the first commit:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creamy Vanilla Ice Cream done Dippin’ Dots style&amp;#34;&lt;/span&gt; &amp;gt; vanilla.txt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master⚡ ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creamy Milk Chocolate Ice Cream.  Someone pass the spoon&amp;#34;&lt;/span&gt; &amp;gt; chocolate.txt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master⚡ ⇒ git add --all&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IFO: initial flavor offering&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will then add two more commits with some additional changes:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dippin&amp;#39; Dots Strawberry Ice Cream is as sweet as a summer&amp;#39;s day and so berry, berry good&amp;#34;&lt;/span&gt; &amp;gt; strawberry.txt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master⚡ ⇒ git add --all&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introducing strawberry&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Orange Flavored Ice&amp;#34;&lt;/span&gt; &amp;gt; orange.txt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master⚡ ⇒ git add --all&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introducing orange&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;introduce-a-change&#34;&gt;Introduce a change &lt;a href=&#34;#introduce-a-change&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;At this point, we realize that it&amp;rsquo;s important to us that orange be introduced inour history before strawberry.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s create a new branch to address this, and look at the current order of thecommits:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|master ⇒ git checkout -b reorder&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Switched to a new branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reorder&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|reorder ⇒ git log --oneline&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e378256 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; reorder, master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Introducing orange&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f455e5b Introducing strawberry&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e42566b IFO: initial flavor offering&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will then perform an interactive rebase, going back two commits in history.During that rebase, we will switch the order of orange and strawberry, so orangeis first, as we need it:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|reorder ⇒ git rebase -i HEAD~2&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pick e378256 Introducing orange&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pick f455e5b Introducing strawberry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After performing the rebase, here is the order of our commits:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|reorder ⇒ git log --oneline&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5fa36f4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; reorder&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Introducing strawberry&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7a1d500 Introducing orange&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e42566b IFO: initial flavor offering&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Congratulations! We&amp;rsquo;ve done what we set out to do, performing a rebase toreorder our commits. Now let&amp;rsquo;s compare that to our original branch to make sureeverything looks to be as we&amp;rsquo;d expect.&lt;/p&gt;&lt;h3 id=&#34;differences&#34;&gt;&lt;code&gt;diff&lt;/code&gt;erences &lt;a href=&#34;#differences&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We start by comparing this branch to the original branch:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|reorder ⇒ git diff master&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see that there&amp;rsquo;s no difference, which we&amp;rsquo;re expecting and hoping for. Nofiles changed, no functionality is different; only the history has changed.&lt;/p&gt;&lt;p&gt;If we diff using the two-dot version, we see the same result:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|reorder ⇒ git diff master..reorder&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That sounds right, because according to the documentation, the two-dot usage isthe same as not providing dots:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          same effect as using HEAD instead.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly, let&amp;rsquo;s perform a three-dot diff:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff-test|reorder ⇒ git diff master...reorder&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/orange.txt b/orange.txt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new file mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 0000000..09d8732&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- /dev/null&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+++ b/orange.txt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@@ -0,0 +1 @@&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+Orange Flavored Ice&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/strawberry.txt b/strawberry.txt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new file mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 0000000..6ab358d&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- /dev/null&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+++ b/strawberry.txt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@@ -0,0 +1 @@&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+Dippin&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; Dots Strawberry Ice Cream is as sweet as a summer&amp;#39;&lt;/span&gt;s day and so berry, berry good&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is where we see that it looks like each of those files have been changed asa result of this rebase. However, the files themselves &lt;strong&gt;haven&amp;rsquo;t&lt;/strong&gt; changed. Whathas is the commits themselves. Their common ancestor is the initial commit ofthe repository, so everything that happened since then shows as a difference.&lt;/p&gt;&lt;h2 id=&#34;the-cherry-on-top&#34;&gt;The Cherry On Top &lt;a href=&#34;#the-cherry-on-top&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Locally, unless you tell git otherwise, &lt;code&gt;diff&lt;/code&gt; will show you the file changedifferences between your comparisons. Github by default will show you thechanges from the common ancestor between what&amp;rsquo;s changed.&lt;/p&gt;&lt;p&gt;Most of the time, this different behavior won&amp;rsquo;t or shouldn&amp;rsquo;t matter in thecourse of your workflow. However, if you&amp;rsquo;re doing something a bit moreadventurous, or perhaps ill-advised, knowing how git will, by default, comparechanges locally and how Github, by default, will surface those changes can beparamount.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/diffin-dots&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Don’t Hang Me Out To DRY</title>
       <link>https://kevinjmurphy.com/posts/rubyconf-2019/</link>
       <pubDate>Mon, 30 Dec 2019 20:57:49 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubyconf-2019/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Close your eyes and imagine the perfect codebase to work on. I bet you’ll say it has complete test coverage. It’s fully-optimized, both in terms of performance and architectural design. And, of course, it contains only DRY code. Surely we can all agree that this is an aspirational situation. But&amp;hellip;do we &lt;strong&gt;really&lt;/strong&gt; want that?&lt;/p&gt;&lt;p&gt;Don’t get me wrong; these qualities are all beneficial. However, if we also think we should value everything in moderation, when should we push back on these ideals? What problems can they introduce? Let’s talk about the exceptions to some of the “rules” we all hold dear.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/b960MApGA7A&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=b960MApGA7A&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/dont-hang-me-out-to-dry&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ivory-tower&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ivory-tower#code-examples&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dont-hang-me-out-to-dry-proposal/&#34;&gt;Proposal&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;common-guiding-principles&#34;&gt;Common Guiding Principles &lt;a href=&#34;#common-guiding-principles&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Full test coverage, DRY code, and optimized code are all incredibly valuable, and we, as craftspeople, are better off for having them overall. But when should we push back on these ideals? What problems can they introduce?&lt;/p&gt;&lt;h3 id=&#34;code-coverage&#34;&gt;Code Coverage &lt;a href=&#34;#code-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Code coverage provides a valuable signal about the extent to which some code is tested, but it is not sufficient for a quality metric. 100% test coverage does not mean all code paths are fully exercised, just that all lines are hit at least once in the execution of the test suite. An application with 100% test coverage can still have bugs and can still have sections of code that don&amp;rsquo;t have all scenarios tested. Additionally, testing every line of code has a cost that is felt initially in the time to conceive of the tests and the test strategy. However, the larger costs are felt over time if it leads to a long test suite run time, flakey or inconsistent tests, and a large suite that needs to be continually maintained as both the technologies and requirements of the application change.&lt;/p&gt;&lt;h3 id=&#34;dry-code&#34;&gt;DRY Code &lt;a href=&#34;#dry-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;DRY code helps to ensure you don&amp;rsquo;t have to make a change in multiple places when the way the system should work changes; instead, everything is in the isolated abstraction. However, not repeating yourself can lead to premature optimizations or abstractions that end up saddling the codebase with a difficult-to-change architecture when it’s discovered that use cases aren’t as similar as initially thought. Certainly reach for design patterns and well-known architectural principles when the opportunity presents itself. But, consider how one might back out of such an introduction should it turn out that the choice was premature - or hold off on introducing it entirely until it’s more clear or there’s sufficient churn in that area of the codebase to warrant the attention.&lt;/p&gt;&lt;h3 id=&#34;performant-code&#34;&gt;Performant Code &lt;a href=&#34;#performant-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Performant code is objectively better than non-performant code, right? As always, the answer is, &amp;ldquo;maybe.&amp;rdquo; Code that is preemptively performance-tuned may or may not be necessary or accurate. Without the data and benchmarking, under load, to illustrate the performance impact, any improvements made in service of performance are done so based on conjecture. This could lead to unnecessary time in developing the believed performance benefit or may even introduce subtle bugs.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>I Know I Can, But Should I?</title>
       <link>https://kevinjmurphy.com/posts/railsconf-2019/</link>
       <pubDate>Mon, 30 Dec 2019 17:40:50 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/railsconf-2019/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You &lt;strong&gt;can&lt;/strong&gt; use a hammer to drive a screw into wood, but I’d recommend a screwdriver. Why? And when is a hammer the better option? This talk will propose a framework to use when comparing alternative technical choices. I won’t decide for you, but will leave you with a structure to apply in your decision-making process.&lt;/p&gt;&lt;p&gt;The ruby toolbox is vast. While Rails provides a default experience, it leaves plenty of room for alternatives. In learning how to do something, you may uncover different ways to accomplish the same goal. Determine which tool fits best in your situation with these lessons.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2NiePLJVjNI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2NiePLJVjNI&amp;amp;feature=youtu.be&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/i-know-i-can-but-should-i-evaluating-alternatives&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/evaluating-alternatives&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/evaluating-alternatives#code-examples&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/evaluating-alternatives-proposal/&#34;&gt;Proposal&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;evaluating-gnarly-alternatives&#34;&gt;Evaluating Gnarly Alternatives &lt;a href=&#34;#evaluating-gnarly-alternatives&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At &lt;a href=&#34;https://www.thegnar.co/&#34;&gt;The Gnar Company&lt;/a&gt;, learning about our client’s needs and providing solutions is one of the most satisfying parts of our work. Rails is a great and well-worn tool in our toolbox, but we work with you to understand your needs before ascribing a particular technology or framework. Our team works hard to make it easy to work with us.&lt;/p&gt;&lt;h3 id=&#34;impact&#34;&gt;Impact &lt;a href=&#34;#impact&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Building a customer portal with &lt;a href=&#34;https://www.thegnar.co/work/dispatch.html&#34;&gt;Dispatch&lt;/a&gt; required a keen eye on the &lt;strong&gt;impact&lt;/strong&gt; of our decisions. Working with the team we’d be handing the project off to, we ensured that any conventions we introduced met their expectations. Additionally, we needed to maintain a focus on non-functional requirements to provide fast response times and real-time communication with their customers.&lt;/p&gt;&lt;h3 id=&#34;cost&#34;&gt;Cost &lt;a href=&#34;#cost&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Cost&lt;/strong&gt; can be more than dollars and cents. Evaluating when to develop functionality yourself or utilize existing solutions is critical. When we worked to bring &lt;a href=&#34;https://www.thegnar.co/work/valor-performance.html&#34;&gt;Valor Performance&lt;/a&gt;’s product to market, we focused on delivering a custom experience for coaching sales professionals while relying on third-party services to complement the product with scheduling, communication, and authorization functionality. As our involvement on the project wound down, we helped interview and onboard their internal team. Investing in the long-term success of our clients, even beyond our involvement, is built into our process.&lt;/p&gt;&lt;h3 id=&#34;maintenance&#34;&gt;Maintenance &lt;a href=&#34;#maintenance&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We don’t limit our focus to the scope of our initial engagement; we make sure to account for any &lt;strong&gt;maintenance&lt;/strong&gt; activities that’ll need consideration throughout the life of your product. After delivering a foundational product for &lt;a href=&#34;https://www.thegnar.co/work/qeepsake.html&#34;&gt;Qeepsake&lt;/a&gt;, we continued to provide assistance and iterate on product features and application performance as adoption took off. While initially developing the product, we made sure to leverage best-in-breed solutions in billing and messaging to quickly provide core functionality that will continue to scale as their business grows.&lt;/p&gt;&lt;h3 id=&#34;consistency&#34;&gt;Consistency &lt;a href=&#34;#consistency&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While working with a large existing development team at &lt;a href=&#34;https://www.thegnar.co/work/level-up.html&#34;&gt;LevelUp&lt;/a&gt;, it was critical to consider &lt;strong&gt;consistency&lt;/strong&gt;. We ensured we were delivering code that adhered to the team’s existing standards to provide a seamless hand-off that they were comfortable supporting. While we introduced our approach and experience to solving similar problems in different contexts, it was all done in a way that aligned with the larger team’s process.&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
