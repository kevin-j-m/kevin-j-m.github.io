
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>bundler on Kevin Murphy</title>
   <link>https://kevinjmurphy.com/tags/bundler/</link>
   <description>Recent content in bundler on Kevin Murphy</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2021 - Kevin Murphy</copyright>
   <lastBuildDate>Sun, 21 Mar 2021 20:24:01 -0400</lastBuildDate>
   
       <atom:link href="https://kevinjmurphy.com/tags/bundler/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Situational Leadership: A Developer&#39;s Business</title>
       <link>https://kevinjmurphy.com/posts/situational-leadership/</link>
       <pubDate>Mon, 17 Jan 2022 07:25:00 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/situational-leadership/</guid>
       <description>&lt;h2 id=&#34;a-developers-business&#34;&gt;A Developer&amp;rsquo;s Business &lt;a href=&#34;#a-developers-business&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Knowing a thing or two about the mindset of someone on the &amp;ldquo;business&amp;rdquo; side of yourcompany can be very valuable. That doesn&amp;rsquo;t mean you need to spend two years of your lifegetting a &lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba/&#34;&gt;MBA&lt;/a&gt; to learn about this (but don&amp;rsquo;tlet me stop you).&lt;/p&gt;&lt;p&gt;This post won&amp;rsquo;t be about accounting or marketing or entrepreneurship or makingquarterly revenue projections. However, it will focus on a concept I learnedin business school that helps me in my day to day as a developer.&lt;/p&gt;&lt;h2 id=&#34;leadership&#34;&gt;Leadership &lt;a href=&#34;#leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I know, you&amp;rsquo;re a developer. You want to write code, not lead people. You&amp;rsquo;re nota manager and maybe you&amp;rsquo;re not in a &amp;ldquo;leadership&amp;rdquo; position as an individualcontributor either. However, for the betterment of yourself and your team, ithelps to study leadership.&lt;/p&gt;&lt;p&gt;Presumably you have people leading you. It can help to knowhow they think about different situations, or what training they might have attheir disposal. You may not do the leading, but wouldn&amp;rsquo;t it be great if youcould help your leadership by letting them know what they could do to bestsupport you?&lt;/p&gt;&lt;p&gt;Even without the &amp;ldquo;right&amp;rdquo; title, everyone in a team still has opportunities tolead. It can mean ownership over a piece of functionality. It can be assistingnew members of your team acclimate to your codebase or processes. It can comein when mentoring other people on your team, formally or not. Situations topractice leadership skills are likely frequently presenting themselves to you.You may be doing it without thinking about it or knowing it!&lt;/p&gt;&lt;p&gt;One model of leadership that I find valuable to keep in mind is SituationalLeadership. Let&amp;rsquo;s learn what it is and talk about how we can use it in our jobsas developers.&lt;/p&gt;&lt;h2 id=&#34;situational-leadership&#34;&gt;Situational Leadership &lt;a href=&#34;#situational-leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Situational_leadership_theory&#34;&gt;Situational Leadership Model&lt;/a&gt; posits that there are four different styles ofleadership.&lt;/p&gt;&lt;h3 id=&#34;directing&#34;&gt;Directing &lt;a href=&#34;#directing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In the directing style, the leader provides close, detailed supervision withclear instructions and expectations. The team&amp;rsquo;s role in this style is inexecuting the task. This style is effective when someone is unfamiliar with thework, or needs to be retrained on an activity. Crises and emergencies are otherplaces where the directing style may be necessary.&lt;/p&gt;&lt;h3 id=&#34;coaching&#34;&gt;Coaching &lt;a href=&#34;#coaching&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A leader using the coaching style still has ownership over the decision-makingprocess, much like in the directing style. However, more of their time should bespent getting buy-in from the team on why decisions are made the way they are.Employ this approach when the team is comfortable with the individual mechanicsof performing the tasks, can provide input on the process, and can be motivatedby understanding the goal or end-state that performing the work should deliver.&lt;/p&gt;&lt;h3 id=&#34;supporting&#34;&gt;Supporting &lt;a href=&#34;#supporting&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;With the supporting style, ownership on decision-making is shifted from theleader and moved to the team. The leader&amp;rsquo;s role is to facilitate discussionwithin the team to reach decisions, to introduce them to the people and toolsthat will aid in their success, to be a sounding board as they make decisions,and to encourage them to take action on their own.&lt;/p&gt;&lt;h3 id=&#34;delegating&#34;&gt;Delegating &lt;a href=&#34;#delegating&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A leader using the delegating style provides and trusts the team with autonomyon day-to-day decision-making. The leader&amp;rsquo;s energy is focused on the overallvision and strategy for the organization they lead. They provide the team withthe tools to execute those high-level concepts and translate them into tacticaldecisions and tasks.&lt;/p&gt;&lt;h2 id=&#34;leading-situation-by-situation&#34;&gt;Leading Situation By Situation &lt;a href=&#34;#leading-situation-by-situation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A leader must be able to exhibit all of these styles. Otherwise, they&amp;rsquo;ll only beeffective in very specific scenarios with a very specific group of people at agiven time. The authors of this framework acknowledge that by &lt;a href=&#34;https://blogs.umass.edu/shabazz/2014/08/&#34;&gt;saying&lt;/a&gt; thatSituational Leadership is about&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Choosing the right leadership style for the right people.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In order to determine which style to use at a given time, consider how muchrelationship and task behavior is required by the individual or team at themoment.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/situational-leadership.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;The more assistance a person needs in understanding the mechanisms neededto complete the work, the higher the amount of task behavior is needed. Themore the person needs to understand the background, or business value, of anitem of work, or help navigating the political or social pressures involved incompleting the work, the higher amount of relationship behavior the leader needsto provide.&lt;/p&gt;&lt;h2 id=&#34;sprint-planning-with-situational-leadership&#34;&gt;Sprint Planning With Situational Leadership &lt;a href=&#34;#sprint-planning-with-situational-leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One scenario where Situational Leadership can be helpful to us and our team asdevelopers is in Sprint Planning. When reviewing the units of work that we&amp;rsquo;repreparing to work on, we can identify what level of support and leadershippeople in the team will need to succeed in completing the tickets.&lt;/p&gt;&lt;p&gt;If you have a task where people have no familiarity with what is being asked ofthem and they&amp;rsquo;ll be working on it, then the &lt;em&gt;directing&lt;/em&gt; style may beappropriate. Make sure that the ticket has clearly defined instructions andacceptance criteria. Also, consider adding a second member of the team to theticket so they can pair and have someone else who will be directly accountablefor helping see the work through to completion.&lt;/p&gt;&lt;p&gt;The &lt;em&gt;coaching&lt;/em&gt; style may be used in supporting a teammate on a task where theyhave some understanding of the mechanics needed to complete the ticket. I findthis can be most effectively done when you can draw a parallel or analogy tosimilar work. Link to a branch, or a pull request, or a commit that&amp;rsquo;s similar,and explain how this ticket will be the same and different from what&amp;rsquo;s donethere. The person is still provided clear direction on what to do, but is givenmore room to complete it in their own way, with more information about &lt;strong&gt;why&lt;/strong&gt;something is done and how it&amp;rsquo;s similar to other work.&lt;/p&gt;&lt;p&gt;Use the &lt;em&gt;supporting&lt;/em&gt; style on a task that will be familiar to the person doingit. You may perhaps organize a quick chat with stakeholders to make sureeveryone is aligned and let this person ask any questions they might have. Checkin with the person individually to see what they need, find out if they want tobounce any ideas off of you, or if they have suggestions for what others can doto help them complete their work.&lt;/p&gt;&lt;p&gt;Is there a rote task or something done time after time that a team member isworking on? &lt;em&gt;Delegate&lt;/em&gt; the work to them entirely and allow them the space andrespect to get in there and execute on their own. However, if you are the persontaking on this rote task, or you identify that happening with someone else,consider speaking up to add someone else to the ticket as well so they can learnfrom your experience and get more familiar with the actions needed to completeit. It&amp;rsquo;s now your responsibility to help bring everyone else on the team up tospeed in your area of expertise, for the benefit of us all.&lt;/p&gt;&lt;h2 id=&#34;leading-to-a-conclusion&#34;&gt;Leading To A Conclusion &lt;a href=&#34;#leading-to-a-conclusion&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Exercising leadership skills is something we can all find opportunities topractice, regardless of our expertise, title, or role in our teams. SituationalLeadership is a framework you can use to consider what concrete actions you canmodel in a given scenario to provide the most effective leadership for yourselfand your team.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>2021 Year-End Review</title>
       <link>https://kevinjmurphy.com/posts/2021-review/</link>
       <pubDate>Mon, 13 Dec 2021 17:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/2021-review/</guid>
       <description>&lt;p&gt;This isn&amp;rsquo;t a &amp;ldquo;real&amp;rdquo; post. This is a summary of all the things that made up myyear in 2021. Thanks to all that were a part of it.&lt;/p&gt;&lt;h2 id=&#34;writing&#34;&gt;Writing &lt;a href=&#34;#writing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I published 15 articles about Ruby or software development in general this year. I started the year sharing how to cache &lt;a href=&#34;https://kevinjmurphy.com/posts/caching-all-native-gem-platforms/&#34;&gt;native Ruby gems&lt;/a&gt;. That post ended up in Nokogiri&amp;rsquo;s &lt;a href=&#34;https://nokogiri.org/tutorials/installing_nokogiri.html#using-vendorcache-to-deploy-to-another-architecture&#34;&gt;docs&lt;/a&gt;, which was an &lt;a href=&#34;https://kevinjmurphy.com/posts/nokogiri-notoriety/&#34;&gt;exciting surprise&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I ended the year writing about what&amp;rsquo;s special with &lt;a href=&#34;https://kevinjmurphy.com/posts/ruby-setter-return-value/&#34;&gt;setter methods&lt;/a&gt; in Ruby. In between, I&amp;rsquo;ve written about &lt;a href=&#34;https://kevinjmurphy.com/posts/rubys-got-you-covered/&#34;&gt;coverage&lt;/a&gt;, &lt;a href=&#34;https://kevinjmurphy.com/posts/remote-ruby-143/&#34;&gt;best practices&lt;/a&gt;, &lt;a href=&#34;https://kevinjmurphy.com/posts/to-change-or-not-to-change/&#34;&gt;evaluating alternatives&lt;/a&gt;, and a handful of &lt;a href=&#34;https://kevinjmurphy.com/tags/ruby/&#34;&gt;Ruby&lt;/a&gt; and &lt;a href=&#34;https://kevinjmurphy.com/tags/rails/&#34;&gt;Rails&lt;/a&gt; topics.&lt;/p&gt;&lt;p&gt;I drastically increased my public writing in 2021, and it&amp;rsquo;s coincided with thefirst year I&amp;rsquo;m aware of people sharing my work. I already mentioned being inNokogiri&amp;rsquo;s docs. I&amp;rsquo;ve also had my writing featured in &lt;a href=&#34;https://rubyweekly.com/&#34;&gt;Ruby Weekly&lt;/a&gt; &lt;strong&gt;ten&lt;/strong&gt; times,&lt;a href=&#34;https://rubyradar.dev/&#34;&gt;Ruby Radar&lt;/a&gt; &lt;strong&gt;six&lt;/strong&gt; times, and &lt;a href=&#34;https://ruby.libhunt.com/&#34;&gt;Awesome Ruby&lt;/a&gt; once in 2021.&lt;/p&gt;&lt;h2 id=&#34;speaking&#34;&gt;Speaking &lt;a href=&#34;#speaking&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As of this post&amp;rsquo;s publication, I&amp;rsquo;m still not comfortable meeting in person(hopefully that changes in time for RailsConf 2022), but I enjoy speaking, so Idid my best to take part in virtual conferences I was aware of. I submitted sixproposals to three conferences (yes, you can submit multiple proposals toconferences!) that had a virtual component, and was accepted to one.&lt;/p&gt;&lt;p&gt;At RailsConf 2021, I shared the parts of a &lt;a href=&#34;https://kevinjmurphy.com/posts/engineering-mba/&#34;&gt;MBA curriculum&lt;/a&gt; that I find valuableto me as a software developer.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6ldCGo29w5g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;One benefit of virtual events meant that I was able to speak with differentregional groups without needing to travel. This year, I presented to groups in:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/Phillyrb&#34;&gt;Philadelphia&lt;/a&gt; (twice!)&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/ChicagoRuby&#34;&gt;Chicago&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/bostonrb&#34;&gt;Boston&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/columbusrb&#34;&gt;Columbus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/nashrb&#34;&gt;Nashville&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://lrug.org/&#34;&gt;London&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Hopefully in future years I&amp;rsquo;ll be able to get to these areas in person, but fornow, I&amp;rsquo;m thankful to the organizers for allowing me to participate in theirvirtual events.&lt;/p&gt;&lt;p&gt;Lastly, I was invited as a podcast guest for the first time in 2021. I joinedRails with Jason (now Code with Jason) to talk neither Rails nor code; we&lt;a href=&#34;https://www.codewithjason.com/podcast/9478219-096-engineering-mba-with-kevin-murphy/&#34;&gt;discussed&lt;/a&gt;the skills I learned in a MBA program that are helpful to me as a softwaredeveloper. Later in the year, I was on Remote Ruby to &lt;a href=&#34;https://remoteruby.transistor.fm/143&#34;&gt;talk&lt;/a&gt;about best practices, and when they might not be the best.&lt;/p&gt;&lt;h2 id=&#34;reading&#34;&gt;Reading &lt;a href=&#34;#reading&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For the first time, I was a technical reviewer for a book. Twice, in fact! I wasprivileged to get an early peek and provide feedback on Noel Rappin&amp;rsquo;s two books.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://pragprog.com/titles/nrclient/modern-front-end-development-for-rails/&#34;&gt;Modern Front-End Development for Rails&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://pragprog.com/titles/tailwind/modern-css-with-tailwind/&#34;&gt;Modern CSS with Tailwind&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It was an unexpected, and weird, experience to receive final copies in the mailand see that my words (in the form of a blurb) are the first you read in eachbook. Don&amp;rsquo;t let that deter you though - each book gets better after that.&lt;/p&gt;&lt;h2 id=&#34;employer&#34;&gt;Employer &lt;a href=&#34;#employer&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After five years with &lt;a href=&#34;https://www.thegnar.com/&#34;&gt;The Gnar Company&lt;/a&gt;, I started aposition at &lt;a href=&#34;https://www.vendr.com/&#34;&gt;Vendr&lt;/a&gt; towards the end of this year. I&amp;rsquo;mthankful to all my teammates at both companies for being great collaborators.&lt;/p&gt;&lt;h2 id=&#34;personal&#34;&gt;Personal &lt;a href=&#34;#personal&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;2021 was a hard year personally, for reasons that were shared by most this year,and for other reasons that aren&amp;rsquo;t unique to me but just happened to occur thisyear. That&amp;rsquo;s all I have to say about that here, but let&amp;rsquo;s talk aboutthings that helped this year.&lt;/p&gt;&lt;h3 id=&#34;new-to-me-in-2021&#34;&gt;New (to me) in 2021 &lt;a href=&#34;#new-to-me-in-2021&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While a healthy dose of known comforts and familiar music played no small partin my year, here are the things I encountered for the first time that helped getme through 2021.&lt;/p&gt;&lt;h4 id=&#34;covid-19-vaccine&#34;&gt;COVID 19 Vaccine &lt;a href=&#34;#covid-19-vaccine&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If you are in an area where you&amp;rsquo;re eligible and able to get a COVID vaccine, Iencourage you to do so. For yourself. For me. For all of us. In the US, you canfind a place to do that &lt;a href=&#34;https://www.vaccines.gov/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h4 id=&#34;taskmaster&#34;&gt;Taskmaster &lt;a href=&#34;#taskmaster&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I&amp;rsquo;m a year late on this compared to everyone else in the US who discovered thison &lt;a href=&#34;https://www.youtube.com/c/Taskmaster&#34;&gt;YouTube&lt;/a&gt;, but maybe it&amp;rsquo;s better thatI had it saved for 2021. It&amp;rsquo;s a British panel game show where contestantscompete for the best completion of various &amp;ldquo;tasks&amp;rdquo;, making fun of themselves andeach other in the process.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7b9psaoeL-M&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h4 id=&#34;if-i-cant-have-love-i-want-power&#34;&gt;If I Can’t Have Love, I Want Power &lt;a href=&#34;#if-i-cant-have-love-i-want-power&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I know, I&amp;rsquo;m entirely predictable. Anything Trent Reznor is involved with I&amp;rsquo;mobligated to devour. That said, Halsey&amp;rsquo;s latest album is so powerful, layered,and enjoyable, that I&amp;rsquo;m sure if I were a Spotify user, it would be my mostplayed album of the year.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6E5s-KEKO3Q&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h4 id=&#34;broken-in-the-best-possible-way&#34;&gt;Broken (in the best possible way) &lt;a href=&#34;#broken-in-the-best-possible-way&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I&amp;rsquo;m no stranger to Jenny Lawson&amp;rsquo;s writing, and her latest from this year isanother of my favorites. Her bravery, irreverence, and humor are perfectlymatched with my sensibilities. Plus, you can order it online from her very ownphysical &lt;a href=&#34;https://www.nowherebookshop.com/book/9781250077035&#34;&gt;bookstore&lt;/a&gt; andget a signed copy.&lt;/p&gt;&lt;h4 id=&#34;john-5&#34;&gt;John 5 &lt;a href=&#34;#john-5&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This isn&amp;rsquo;t necessarily new (though he does have a new album that came out &lt;a href=&#34;https://john-5.com/main/discography/sinner-2021/&#34;&gt;thisyear&lt;/a&gt;), but I dug into hisentire catalogue this year. He&amp;rsquo;s a session guitarist clearly capable of playing&lt;a href=&#34;https://youtu.be/ayB-ir-NHb4&#34;&gt;any guitar in any style&lt;/a&gt;, but whose personal workmainly focuses on metal shredding (with a touch of bluegrass), all on aTelecaster.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/uxBwmY5NW-g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;looking-forward&#34;&gt;Looking Forward &lt;a href=&#34;#looking-forward&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;What am I hoping for in 2022?&lt;/p&gt;&lt;h3 id=&#34;further-engaging-with-the-ruby-and-developer-community&#34;&gt;Further engaging with the Ruby and developer community &lt;a href=&#34;#further-engaging-with-the-ruby-and-developer-community&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you have a podcast that you think I might be a good guest on, if you run aregional meetup looking for speakers, if you have a conference that I could be afit for, if you run a publication that features content I might write, if youhave an affinity group I can help out with, or if you&amp;rsquo;d just like to meet,please reach out.&lt;/p&gt;&lt;h3 id=&#34;covid-vaccines-available-to-children-under-5&#34;&gt;COVID vaccines available to children under 5 &lt;a href=&#34;#covid-vaccines-available-to-children-under-5&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can&amp;rsquo;t rush science, but I look forward to having a fully-vaccinated house.&lt;/p&gt;&lt;h3 id=&#34;bruce-springsteens-no-nukes-concert&#34;&gt;Bruce Springsteen&amp;rsquo;s No Nukes Concert &lt;a href=&#34;#bruce-springsteens-no-nukes-concert&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This won&amp;rsquo;t be new in 2022 - it&amp;rsquo;s from 1979 - and it&amp;rsquo;s available &lt;strong&gt;now&lt;/strong&gt;, but Ihave it on my Christmas list, so it may not be until 2022 that I can take inthis bit of history from the E Street Band.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LzsAPhGpMkA&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;thank-you&#34;&gt;Thank You &lt;a href=&#34;#thank-you&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you made it this far, I have to believe this isn&amp;rsquo;t your first introduction tome and you&amp;rsquo;re a repeat reader. Thank you for doing that this year, and I hopeyou continue to track my work in the future. It&amp;rsquo;s been a great joy to see peopleinteracting with things I produced this year, so if you&amp;rsquo;ve liked anything Iput out this year, please, let me know - and thanks!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Setter Method Return Values In Ruby</title>
       <link>https://kevinjmurphy.com/posts/ruby-setter-return-value/</link>
       <pubDate>Wed, 17 Nov 2021 19:04:22 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-setter-return-value/</guid>
       <description>&lt;h2 id=&#34;can-i-take-your-order&#34;&gt;Can I Take Your Order? &lt;a href=&#34;#can-i-take-your-order&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;re opening a brand new diner, and each customer can have their current orderset, which will add to their list of orders.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Customer&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:orders&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;    @orders &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_order&lt;/span&gt;    @orders&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(new_order)    @orders &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; new_order    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thank you for being our valued customer&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because customer service is our top priority, we provide a message wheneverthey place an order reminding them how lucky we feel to be serving themtheir meal.&lt;/p&gt;&lt;h2 id=&#34;negative-reviews&#34;&gt;Negative Reviews &lt;a href=&#34;#negative-reviews&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After our soft opening, we&amp;rsquo;re excited to read everyone&amp;rsquo;s favorable commentsabout their food. However, we&amp;rsquo;re getting slammed with badreviews about our curt interactions with customers when they place an order. Wewent out of our way to modify the setter&amp;rsquo;s return value to give a specialmessage; what&amp;rsquo;s wrong?&lt;/p&gt;&lt;h2 id=&#34;mystery-shopper&#34;&gt;Mystery Shopper &lt;a href=&#34;#mystery-shopper&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In order to get to the bottom of this, we put on our fake mustache and glassesto go undercover at our own restaurant. What we find &lt;strong&gt;shocks us&lt;/strong&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; definitely_not_the_owner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Customer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newirb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; definitely_not_the_owner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_order &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pancakes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pancakes&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s not the welcoming experience we explicitly developed! We shouldn&amp;rsquo;t bebarking back their order in a matter of fact way; we should be thanking them.Something surprising is happening here; now we need to find what it is.&lt;/p&gt;&lt;h2 id=&#34;training-manual&#34;&gt;Training Manual &lt;a href=&#34;#training-manual&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our method is explicit about what the return value should be.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(new_order)  @orders &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; new_order  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thank you for being our valued customer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We expect the last thing evaluated in the method to be what&amp;rsquo;s returned to thecaller. And that&amp;rsquo;s the case&amp;hellip;most of the time. After consulting Ruby&amp;rsquo;s&lt;a href=&#34;https://ruby-doc.org/core-3.0.1/doc/syntax/methods_rdoc.html#label-Return+Values&#34;&gt;documentation&lt;/a&gt;, we find an exception:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note that for assignment methods the return value will be ignored when using the assignment syntax. Instead, the argument will be returned&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is our exact case! Our setter method to set the current order is returningthe argument passed to it, and not the result of the last line. It&amp;rsquo;s beingcompletely ignored in favor of the argument.&lt;/p&gt;&lt;h2 id=&#34;demanding-exceptional-service&#34;&gt;Demanding Exceptional Service &lt;a href=&#34;#demanding-exceptional-service&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The documentation does provide a way in which customers can see our nice messagethough:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The actual return value will be returned when invoking the method directly&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So, while we cannot enforce it, if callers know the right way to ask, we&amp;rsquo;llthank them.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; customer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Customer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newirb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_order &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pancakes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pancakes&amp;#34;&lt;/span&gt;irb(main):&lt;span style=&#34;color:#ae81ff&#34;&gt;003&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;public_send(&lt;span style=&#34;color:#e6db74&#34;&gt;:current_order&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;french toast&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thank you for being our valued customer&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setting-the-table-for-next-time&#34;&gt;Setting The Table For Next Time &lt;a href=&#34;#setting-the-table-for-next-time&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby setter, or assignment, methods have a special understanding andexpectation for what they&amp;rsquo;ll return. This helps enforce a consistent API, butcan lead to surprising results when writing your own setter method.&lt;/p&gt;&lt;p&gt;Setter methods will return the argument passed to it, regardless of what thelast evaluated statement in the method is. Callers can receive the value of thelast statement if they call the method in a particular way; however, it would bevery unconventional to expect someone to do that.&lt;/p&gt;&lt;p&gt;In the case of our restaurant, that meant a pivoting in our branding. We startedpositioning ourselves as an outfit focused on intense efficiency and limitedcustomer interaction - with a secret message any customer in the know can passus to force a little more welcoming of a response with any new order.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Joining Vendr</title>
       <link>https://kevinjmurphy.com/posts/vendr-start/</link>
       <pubDate>Mon, 25 Oct 2021 07:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/vendr-start/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m happy to say that today is my first day as a member of &lt;a href=&#34;https://www.vendr.com/&#34;&gt;Vendr&lt;/a&gt;! I&amp;rsquo;m looking forward to meeting everyone. I&amp;rsquo;m excited to help the development team help everyone reduce the friction involved with buying SaaS products.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ruby&#39;s Got You Covered</title>
       <link>https://kevinjmurphy.com/posts/rubys-got-you-covered/</link>
       <pubDate>Thu, 21 Oct 2021 20:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubys-got-you-covered/</guid>
       <description>&lt;h2 id=&#34;coverage&#34;&gt;Coverage &lt;a href=&#34;#coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Perhaps you&amp;rsquo;ve heard of &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_coverage&#34;&gt;test coverage&lt;/a&gt;,which is a measurement of how much of your application code is executed whenyour tests run. That number is typically represented as a percentage, and peoplemay use that metric to assess the relative health of a codebase. The efficacy ofsuch metrics is &lt;a href=&#34;https://kevinjmurphy.com/posts/remote-ruby-143/&#34;&gt;debated&lt;/a&gt;, but the metrics arestill prevalent.&lt;/p&gt;&lt;p&gt;This article will demonstrate the mechanism ruby provides to measure coverageand present some examples for how to use it and is a summary of the informationI shared about coverage at &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EyLO0EEm3BQ&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;running-coverage&#34;&gt;Running Coverage &lt;a href=&#34;#running-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby ships with a &lt;a href=&#34;https://docs.ruby-lang.org/en/3.0.0/Coverage.html&#34;&gt;Coverage module&lt;/a&gt; as part of the language.To use it, you must first &lt;code&gt;require&lt;/code&gt; the module.&lt;/p&gt;&lt;p&gt;After doing that, you have access to &lt;code&gt;Coverage&lt;/code&gt;. Coverage begins running whenyou call the &lt;code&gt;start&lt;/code&gt; method. It then expects the file you want coverage to beassessed on to be &lt;code&gt;require&lt;/code&gt;d or &lt;code&gt;load&lt;/code&gt;ed. Finally, you can see coverage&amp;rsquo;s outputby calling &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, let&amp;rsquo;s say we&amp;rsquo;re all in a band and we&amp;rsquo;re practicing a new&lt;a href=&#34;https://youtu.be/_7Qk9MdyiOM&#34;&gt;cover song&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# rehearsal.rb&lt;/span&gt;our_band &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Band&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blogger Band&amp;#34;&lt;/span&gt;)song &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CoverMe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newsong&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;original_artist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bruce Springsteen&amp;#34;&lt;/span&gt;song&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;band &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; our_bandsong&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to run coverage on this file, we can do the following:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startload &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rehearsal.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;coverage-modes&#34;&gt;Coverage Modes &lt;a href=&#34;#coverage-modes&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby&amp;rsquo;s coverage module has many modes, or different ways of assessing coverage.Each mode answers a different question about the code that was run under coverage:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lines - how many times was each line executed?&lt;/li&gt;&lt;li&gt;Oneshot Lines - which lines were executed?&lt;/li&gt;&lt;li&gt;Methods - how many times was each method executed?&lt;/li&gt;&lt;li&gt;Branches - how many times was each conditional executed?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can specify which modes to run by passing an argument to &lt;code&gt;Coverage.start&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&#34;lines-coverage&#34;&gt;Lines Coverage &lt;a href=&#34;#lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;lines&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the mode that runs if you do not pass any arguments to &lt;code&gt;Coverage.start&lt;/code&gt;.Each relevant line has a counter that is incremented each time the line isvisited in code execution while coverage is running. Irrelevant lines, thosethat are things like empty lines or &lt;code&gt;end&lt;/code&gt; statements, are ignored. At theconclusion, you will see how many times each line is executed.&lt;/p&gt;&lt;p&gt;Our guitarist wants to track how often they break a string during rehearsal. Astring is broken when the &lt;code&gt;@broken&lt;/code&gt; instance variable is set.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;break_string&lt;/span&gt;    @broken &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;BrokenStringSound&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Coverage&amp;rsquo;s result provides a hash, where the keys are all the files that wererun while coverage was running. Each value is a hash that has a key for themode(s) of coverage run.&lt;/p&gt;&lt;p&gt;For lines coverage, the value of that inner hash is an array showing how manytimes each line was executed. The integer at index 0 of this array shows howmany times line 1 was run.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;{  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string.rb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:lines&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;...]&lt;/span&gt;},  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;nil&lt;/code&gt; represents an irrelevant line, in this case, an &lt;code&gt;end&lt;/code&gt; statement. Toanswer our question, we need to see how many times line 3 of the string file wasrun, which is index 2 in the array - and we see our guitarist broke 4 strings inone rehearsal.&lt;/p&gt;&lt;h3 id=&#34;oneshot-lines-coverage&#34;&gt;Oneshot Lines Coverage &lt;a href=&#34;#oneshot-lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;oneshot_lines&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to lines coverage, this also documents that a relevant line was executed while coverage was running. However, it’s a binary report of whether it was executed or not. It will not tell you how often. This may be sufficient in many cases, and comes with the benefit of being more performant every subsequent time a particular line of code is executed under coverage.&lt;/p&gt;&lt;p&gt;The drummer has a break in the song where they play a small fill.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Drum&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;small_fill&lt;/span&gt;    bang_tom    roll_snare(&lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; extend_fill?      hit_crash_cymbal    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;    strike_ride_cymbal  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The band isn&amp;rsquo;t sure if the drummer is hitting the crash cymbal during the fill.To find out, they can use oneshot lines coverage, which will tell if the line ofcode is executed. They don&amp;rsquo;t care how many times; only if it ever happened.&lt;/p&gt;&lt;p&gt;The result looks similar to lines coverage:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;{  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drum.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:oneshot_lines&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;...]&lt;/span&gt;},  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The values in the array are different from lines coverage though. Here, eachinteger in the array is a line number that was executed. Remember, oneshot lineswon&amp;rsquo;t tell you how many times a line was run. The order of elements does notmatter, unlike lines coverage.&lt;/p&gt;&lt;p&gt;In the case of our drum fill, 7 is in the array, which is the line number to hitthe crash cymbal, so the drummer is extending the fill.&lt;/p&gt;&lt;h3 id=&#34;methods-coverage&#34;&gt;Methods Coverage &lt;a href=&#34;#methods-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(methods: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Methods coverage brings the granularity of lines coverage up to a coarser grain. Rather than tracking individual lines, it’s concerned with whether a particular method is executed. It can be a 10 line method where the first line is the only line ever executed. Methods coverage will still consider that as executed the same as a 20 line method where each line is executed.&lt;/p&gt;&lt;p&gt;Now that our guitarist knows they break a lot of strings, they need to thin outthe gear they bring to gigs so they have more room in their bag for strings.They&amp;rsquo;re wondering which effects pedals they&amp;rsquo;re even using on their pedal board.They have a lot, and each of them responds to &lt;code&gt;trigger&lt;/code&gt;, which turns them offor on when you press them.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReverbPedal&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OverdrivePedal&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DelayPedal&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use methods coverage to see which of those pedals are being triggeredduring rehearsal.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;{  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reverb_pedal.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ReverbPedal&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:trigger&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}},  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;overdrive_pedal.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OverdrivePedal&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:trigger&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}},  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delay_pedal.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DelayPedal&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:trigger&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}},  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike the results we&amp;rsquo;ve seen thus far, this isn&amp;rsquo;t only returning an array inthe value of the mode hash. Instead, there&amp;rsquo;s another hash where the keyidentifies the method, and the value is the number of times the method isexecuted. Let&amp;rsquo;s dig into what each of the elements identifying a method are.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OverdrivePedal&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:trigger&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#       ^            ^      ^   ^   ^   ^&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#       |            |      |   |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     Class          |      |   |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#     Name           |      |   |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                  Method   |   |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                  Name     |   |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                           |   |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                         Start |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                         Line  |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                               |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                               |   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                             Start |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                             Column|   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                   |   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                  End  |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                  Line |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                       |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                       |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                      End&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                      Column&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To help our guitarist clean up their pedal board, we can see that the overdrivepedal isn&amp;rsquo;t used at all, and can be left at home next time.&lt;/p&gt;&lt;h3 id=&#34;branches-coverage&#34;&gt;Branches Coverage &lt;a href=&#34;#branches-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;branches&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Branches Coverage tracks execution of different conditional paths and documents how often those different paths are run. The unique benefit that this provides over lines coverage is in conditionals that execute multiple code paths in a single line, such as ternary statements. You may have a part of that conditional that’s never run or tested, but you would not know that if you’re relying on lines coverage alone.&lt;/p&gt;&lt;p&gt;Our singer wants to use an echo effect during the song, and has a friend settingthe intensity as they practice.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CoverMe&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chorus&lt;/span&gt;(number)    echo_intensity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;positive? &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;even? ? &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;Lyric&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;line&lt;/span&gt;: line, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:echo&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;effect_level&lt;/span&gt;: echo_intensity)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During one run-through of the song, they&amp;rsquo;re happy with the effect and want tocheck how often they used each intensity. Because this is expressed as aternary, we &lt;strong&gt;can&amp;rsquo;t&lt;/strong&gt; use lines coverage. We could use it if the method werestructured like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chorus&lt;/span&gt;(number)  echo_intensity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;positive? &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;even?    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, in either case, we &lt;em&gt;can&lt;/em&gt; use branches coverage to see which of thedifferent branches were followed.&lt;/p&gt;&lt;p&gt;The output of branches coverage looks similar to that of methods coverage.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;{  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cover_me.rb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {    &lt;span style=&#34;color:#e6db74&#34;&gt;:branches&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {      {        &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:if&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {          &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:then&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,          &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,        }      }    }  }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The differences from methods coverage are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Branches coverage nests each branch within its conditional, so the datastructure is nested one level deeper than methods coverage.&lt;/li&gt;&lt;li&gt;Branches coverage assigns a unique identifier to each conditional or branch.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let&amp;rsquo;s look at what each of the elements identifying a branch are.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:then&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   ^    ^   ^    ^    ^    ^&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   |    |   |    |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Branch |   |    |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        |   |    |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        Id  |    |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#            |    |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#            |    |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#          Start  |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#          Line   |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                 |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                 |    |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#               Start  |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#               Column |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                      |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                      |    |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                     End   |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                     Line  |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                           |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                           |&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                          End&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                          Column&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the results, the satisfactory performance had the echo intensitycranked up the 30 the entire time. The &lt;code&gt;else&lt;/code&gt; condition of the ternary was theonly branch executed. Now the band knows how to set the effect for their nextperformance.&lt;/p&gt;&lt;h3 id=&#34;all-coverage-modes&#34;&gt;All Coverage Modes &lt;a href=&#34;#all-coverage-modes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;:all&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Passing the &lt;code&gt;:all&lt;/code&gt; symbol to &lt;code&gt;Coverage.start&lt;/code&gt; will ask it to run every coveragemode; however, if you inspect the output, you&amp;rsquo;ll notice that one is missing.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;coverage&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;:all&lt;/span&gt;)load &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rehearsal.rb&amp;#34;&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Coverage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resultresult&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guitar.rb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:lines&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:methods&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:branches&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Oneshot lines is missing!&lt;/p&gt;&lt;p&gt;Oneshot lines and lines modes &lt;a href=&#34;https://github.com/ruby/ruby/blob/d92f09a5eea009fa28cd046e9d0eb698e3d94c5c/ext/coverage/coverage.c#L53&#34;&gt;cannot be run at the same time&lt;/a&gt;,so lines coverageis run, as you can still use it to answer if a line was executed at all.&lt;/p&gt;&lt;h2 id=&#34;coverage-in-practice&#34;&gt;Coverage In Practice &lt;a href=&#34;#coverage-in-practice&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It may be unlikely that you use the &lt;code&gt;Coverage&lt;/code&gt; module directly. However, thereare tools you can use to measure code coverage that builds on this abstraction.&lt;/p&gt;&lt;p&gt;There are many tools for measuring test coverage, but one is &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov&#34;&gt;SimpleCov&lt;/a&gt;. It alsosupports &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov#branch-coverage-ruby--25&#34;&gt;branches coverage&lt;/a&gt;. To measure coverage of production code, check out&lt;a href=&#34;https://github.com/danmayer/coverband&#34;&gt;Coverband&lt;/a&gt;, which you can set up to use &lt;a href=&#34;https://github.com/danmayer/coverband/blob/43c5ac94febc7a961346b0e9408d829d4d2ef8ad/test/rails5_dummy/config/coverband.rb#L15&#34;&gt;oneshot lines&lt;/a&gt; mode.&lt;/p&gt;&lt;p&gt;Ruby&amp;rsquo;s coverage module includes many options that can answer different questionsabout your code. What do you think you could use it for in your application?&lt;a href=&#34;https://twitter.com/kevin_j_m&#34;&gt;Let me know&lt;/a&gt;!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Gnarly Endings</title>
       <link>https://kevinjmurphy.com/posts/gnarly-endings/</link>
       <pubDate>Fri, 15 Oct 2021 07:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/gnarly-endings/</guid>
       <description>&lt;p&gt;Today is my last day at &lt;a href=&#34;https://www.thegnar.com/&#34;&gt;The Gnar Company&lt;/a&gt;. I joinedthe company over five years ago excited to work with a great group ofindividuals, many of whom I&amp;rsquo;d worked with before. Though many of the people havechanged, and the team has grown, the people that work at The Gnar are stillsome of the greatest people I&amp;rsquo;ve had the pleasure to work with.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m thankful to every member of the team, past and present, who helped makeworking at The Gnar Company the special experience that it is.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Code Golf: Conditionally Add To An Array</title>
       <link>https://kevinjmurphy.com/posts/code-golf-conditionally-add-to-array/</link>
       <pubDate>Tue, 28 Sep 2021 19:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/code-golf-conditionally-add-to-array/</guid>
       <description>&lt;h2 id=&#34;the-grass-is-always-greener&#34;&gt;The Grass Is Always Greener &lt;a href=&#34;#the-grass-is-always-greener&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;re building a system to track a golfer&amp;rsquo;s statuses during a tournament. This isa competitive tournament with people who are much better than I will ever be, soif a golfer is currently scoring under &lt;a href=&#34;https://en.wikipedia.org/wiki/Par_(score)&#34;&gt;par&lt;/a&gt;, they&amp;rsquo;re in contention to win. On this 18 hole course, if they&amp;rsquo;ve played the first nine holes, they&amp;rsquo;ve made the &lt;a href=&#34;https://www.golfcompendium.com/2020/07/the-turn-definition-golf-course.html&#34;&gt;turn&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s explore a number of ways we can build up an array that keeps track ofwhich, if any, of these statuses a particular golfer qualifies for. Not contentto settle for one that works, we&amp;rsquo;ll dig into a variety of options.&lt;/p&gt;&lt;h2 id=&#34;teeing-up-an-option&#34;&gt;Teeing Up An Option &lt;a href=&#34;#teeing-up-an-option&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can start with an empty array, and explicitly add in any of the statuses thatthe golfer meets the conditions for.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;  statuses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; under_par?    statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; back_nine?    statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  statuses&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s nothing tremendously exciting here, and that&amp;rsquo;s not a bad thing! It&amp;rsquo;sreasonably clear what this is doing.&lt;/p&gt;&lt;h2 id=&#34;tapping-it-in&#34;&gt;Tapping It In &lt;a href=&#34;#tapping-it-in&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can make the prior suggestion a little more terse by using &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Kernel.html#method-i-tap&#34;&gt;tap&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;[].&lt;/span&gt;tap &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;statuses&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; under_par?      statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; back_nine?      statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This eliminates the need for the &lt;code&gt;statuses&lt;/code&gt; temporary array from the priorsection.&lt;/p&gt;&lt;h2 id=&#34;taking-a-compact-swing&#34;&gt;Taking a Compact Swing &lt;a href=&#34;#taking-a-compact-swing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can also build our array to have an entry for each of the conditionals wehave, and removing the ones that aren&amp;rsquo;t relevant.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;    under_par? ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,    back_nine? ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,  &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;compact&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By using &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/Array.html#method-i-compact&#34;&gt;compact&lt;/a&gt;,we&amp;rsquo;ll remove any &lt;code&gt;nil&lt;/code&gt; values - and we&amp;rsquo;ll take advantage of that functionalityby explicitly adding &lt;code&gt;nil&lt;/code&gt; if the golfer doesn&amp;rsquo;t meet that condition.&lt;/p&gt;&lt;h2 id=&#34;working-on-your-backswing-takeaway&#34;&gt;Working On Your Backswing Takeaway &lt;a href=&#34;#working-on-your-backswing-takeaway&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Speaking of taking things away, we can also do the opposite of the firstapproach. We&amp;rsquo;ll start by having each status, and then &lt;em&gt;removing&lt;/em&gt; the ones thatdo &lt;strong&gt;not&lt;/strong&gt; meet the necessary condition.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;  statuses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; under_par?    statuses &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; back_nine?    statuses &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  statuses&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This may be more helpful in situations where there are a lot more statuses, andonly a few of them may need to be removed for certain reasons. It may also helpwhen the full list of statuses persists on its own elsewhere, but then you alsoneed a subset of them in a particular case.&lt;/p&gt;&lt;h2 id=&#34;selecting-the-right-club&#34;&gt;Selecting The Right Club &lt;a href=&#34;#selecting-the-right-club&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Lastly, we&amp;rsquo;ll put together a hash keyed on the statuses where the value is the result of the conditions. We can then flex some familiarity with Ruby&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/Enumerable.html&#34;&gt;Enumerable module&lt;/a&gt; to pick out the applicable sections of the hash, returning only the statuses.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;current_statuses&lt;/span&gt;  {    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in_contention&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; under_par?,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;past_the_turn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; back_nine?,  }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;_status, condition&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; condition }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to the prior suggestion, this may be helpful when you want to have thefull list of statuses and their associated conditions all compiled in one place,but then want to peel off which are relevant for a particular golfer at thistime.&lt;/p&gt;&lt;h2 id=&#34;asking-help-from-the-caddie&#34;&gt;Asking Help From The Caddie &lt;a href=&#34;#asking-help-from-the-caddie&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here are some of the ways that we might solve this problem. What other wayscould we build this functionality? &lt;a href=&#34;https://twitter.com/kevin_j_m&#34;&gt;Let me know&lt;/a&gt;what other approaches you would take.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/code-golf-conditionally-add-to-array&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Buffered IO Streams In Ruby</title>
       <link>https://kevinjmurphy.com/posts/ruby-io-buffer/</link>
       <pubDate>Mon, 20 Sep 2021 09:00:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-io-buffer/</guid>
       <description>&lt;h2 id=&#34;object-permanence&#34;&gt;Object Permanence &lt;a href=&#34;#object-permanence&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We have some really important information in our console.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some really important information&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some really important information&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want to store that information to disk, but only temporarily. We&amp;rsquo;ll do sousing a &lt;code&gt;Tempfile&lt;/code&gt;, which is built in to Ruby, but must be required to be used.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tempfile&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tempfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a new temporary file on disk, and as it&amp;rsquo;s new, it is currentlyempty, which we&amp;rsquo;ll check two different ways.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt; we can write some really important information to disk, after whichwe&amp;rsquo;ll check the size again.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/IO.html#method-i-write&#34;&gt;write&lt;/a&gt; to theIO stream (in this case a file), we get the number of bytes written, 33,returned. After writing to the file, we asked for the size of the file with&lt;code&gt;File.size&lt;/code&gt; and got 0. Then, we asked the file for its size and got 33. Whathappened?&lt;/p&gt;&lt;h2 id=&#34;wheres-that-string&#34;&gt;Where&amp;rsquo;s that string? &lt;a href=&#34;#wheres-that-string&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Maybe the string was written to the file instance in memory before beingcommitted to disk. Let&amp;rsquo;s look at the &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.1/libdoc/objspace/rdoc/ObjectSpace.html#method-c-memsize_of&#34;&gt;size&lt;/a&gt; of our objects.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;objspace&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ObjectSpace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memsize_of(data)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ObjectSpace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memsize_of(file)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, &lt;code&gt;memsize_of&lt;/code&gt; is a hint/guess - and the docs are clear about that:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note that the return size is incomplete. You need to deal with this information as only a HINT.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That&amp;rsquo;ll work for us; we&amp;rsquo;ll just use it to see if it changed at all.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s try to write again, now that we&amp;rsquo;ve seen the file is currently 80 bytes inmemory.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ObjectSpace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memsize_of(file)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The size of the &lt;code&gt;file&lt;/code&gt; object itself didn&amp;rsquo;t change, so I guess it&amp;rsquo;s not hidingin there.&lt;/p&gt;&lt;p&gt;As we saw previously, passing the path to &lt;code&gt;File.size&lt;/code&gt; doesn&amp;rsquo;t show thenewly-written bytes being written to the file, but asking the &lt;code&gt;file&lt;/code&gt; instanceitself for its &lt;code&gt;size&lt;/code&gt; does.&lt;/p&gt;&lt;p&gt;Also, after asking for &lt;code&gt;file.size&lt;/code&gt;, &lt;code&gt;File.size(file.path)&lt;/code&gt; &lt;strong&gt;does&lt;/strong&gt; have thesize including the newly-written bytes. So they do &lt;em&gt;eventually&lt;/em&gt; agree on thefile&amp;rsquo;s size.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sizing-up-the-difference&#34;&gt;Sizing Up The Difference &lt;a href=&#34;#sizing-up-the-difference&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Calling &lt;code&gt;size&lt;/code&gt; on the file instance has a &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.1/libdoc/tempfile/rdoc/Tempfile.html#method-i-size&#34;&gt;documented&lt;/a&gt; side effect.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;As a side effect, the IO buffer is flushed before determining the size.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That explains where our string went after writing it! It was stored in Ruby&amp;rsquo;sIO buffer. Flushing the buffer &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/IO.html#method-i-flush&#34;&gt;pushes&lt;/a&gt;its contents to the operating system.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s observe that by checking the size of the file, writing more bytes to it,checking the size of the file doesn&amp;rsquo;t change, and explicitly flushing the buffer.&lt;/p&gt;&lt;p&gt;After flushing the buffer, the size of the file &lt;em&gt;does&lt;/em&gt; change by the number ofbytes written.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flush&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://ruby-doc.org/core-3.0.1/IO.html#method-i-rewind&#34;&gt;Rewinding&lt;/a&gt; the fileafter writing it also appears to flush the buffer.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rewind&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;no-buffering&#34;&gt;No Buffering &lt;a href=&#34;#no-buffering&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can bypass Ruby&amp;rsquo;s IO buffer by setting the stream&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/core-3.0.1/IO.html#method-i-sync&#34;&gt;sync mode&lt;/a&gt;.By default, this is set to buffer; however, setting it to true will immediatelyflush the stream contents to the operating system.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; new_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tempfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sync&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sync &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; streaming &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no buffering&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(streaming)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size(new_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;File.size&lt;/code&gt; is recognizing the bytes in the file without needing to flush thebuffer, either directly or via a method that does so as a side effect. The syncmode is pushing whatever we write directly to disk (at least, through theoperating system).&lt;/p&gt;&lt;h2 id=&#34;closing-our-stream&#34;&gt;Closing Our Stream &lt;a href=&#34;#closing-our-stream&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby will buffer writes in an IO stream, such as a file, and you need to bemindful of when or if that buffer is flushed should you then immediately checkthe impact that writing to a stream had on the item being written to.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/ruby-io-buffer&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Best Practices Are The Best For Whom?</title>
       <link>https://kevinjmurphy.com/posts/remote-ruby-143/</link>
       <pubDate>Thu, 26 Aug 2021 19:13:09 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/remote-ruby-143/</guid>
       <description>&lt;p&gt;I had a great time talking to Andrew Mason, Jason Charnes , and Chris Oliver on Remote Ruby. The episode was just released, and you can listen to it &lt;a href=&#34;https://remoteruby.transistor.fm/143&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;There&amp;rsquo;s something bothering me that I feel I didn&amp;rsquo;t say all that clearly. I mention that these rules (test coverage, DRY, and performant code are the examples given in the conversation) feel easy, but are hard to apply in practice.&lt;/p&gt;&lt;p&gt;Who am I saying they&amp;rsquo;re easy for? You may think I&amp;rsquo;m talking about the people who we ask to use them. And that may be true - it may be easy, or easier, to follow the rule.&lt;/p&gt;&lt;p&gt;However, that&amp;rsquo;s not what gets me worked up about this. Instead, I think it&amp;rsquo;s easy or easier for the people who &lt;strong&gt;say&lt;/strong&gt; the rule, and does a disservice to those who we ask to apply it, unless it&amp;rsquo;s backed up with a lot more support.&lt;/p&gt;&lt;h2 id=&#34;testing-for-coverage&#34;&gt;Testing for coverage &lt;a href=&#34;#testing-for-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My thoughts here apply in a lot of scenarios, but let&amp;rsquo;s use a tangible example. I&amp;rsquo;ll choose test coverage because we spend a lot of the episode talking about it, and metrics in general, and I think it&amp;rsquo;s pretty illustrative for what I want to say.&lt;/p&gt;&lt;p&gt;I like writing tests. They give me fast feedback. They allow me to validate my architecture and design. They give me confidence to make future changes. I&amp;rsquo;m bought in. Writing tests is part of my workflow. Having a test coverage bar or metric that we track isn&amp;rsquo;t likely to change the way I write code - at least, not in what I consider a materially valuable way. No, the apps I work with don&amp;rsquo;t have 100% test coverage. My goal is to have sufficient coverage that I feel confident making a change and documenting current behavior. That&amp;rsquo;s a lot harder to quantify - but if you know how to quantify confidence - let me know!&lt;/p&gt;&lt;p&gt;But what about the person who doesn&amp;rsquo;t write tests? Mandating tests will be good for the project, right? People who aren&amp;rsquo;t as familiar with writing tests will do so, and the project will be better off because there are tests now, right? Maybe.&lt;/p&gt;&lt;h2 id=&#34;impacts-of-best-practices-as-mandates&#34;&gt;Impacts of best practices as mandates &lt;a href=&#34;#impacts-of-best-practices-as-mandates&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The person who isn&amp;rsquo;t familiar with or comfortable writing tests likely still has ways that they get confidence that their code works or validates their assumptions or gets feedback on their progress. A new tester isn&amp;rsquo;t going to start getting that comfort from tests solely because they have to write them.&lt;/p&gt;&lt;p&gt;Why is the team writing tests now? Because a computer will yell at them if they don&amp;rsquo;t, and/or their code won&amp;rsquo;t get merged. It&amp;rsquo;s a box to check. Without the training and backing of why testing is important and valuable, and giving people the space to learn, grow, and experiment - they can resent it.&lt;/p&gt;&lt;p&gt;What good are the tests you have then? They made your metric look good, but what are you going to use them for? It&amp;rsquo;s unclear, beyond demonstrating that they exist and giving your CI provider more money if you&amp;rsquo;re billed by minute usage.&lt;/p&gt;&lt;p&gt;Are these tests going to help you catch a bug before it gets into production, or fix one that&amp;rsquo;s already there? Did these tests help inform the choices developers made while writing the code that accompanies the test? Did these tests allow for immediate, small steps with fast feedback?&lt;/p&gt;&lt;p&gt;I don&amp;rsquo;t know - and neither do you probably. Those things are hard to measure. They&amp;rsquo;re also a lot of the value people believe they get out of testing. Capturing or enforcing test coverage metrics in a vacuum does nothing to help inform how much better off you are than if you had no tests at all. It&amp;rsquo;s a proxy measure that&amp;rsquo;s difficult to draw conclusions from without digging deeper.&lt;/p&gt;&lt;h2 id=&#34;why-bother-following-the-rules&#34;&gt;Why bother following the rules? &lt;a href=&#34;#why-bother-following-the-rules&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This doesn&amp;rsquo;t mean don&amp;rsquo;t write tests. It can give you insights you didn&amp;rsquo;t have before! Chris Oliver talked about the pay gem, and how different vendors may support features differently, or not at all. Testing can reveal that to you in a quicker/safer way than other explorations. Not only because a test may fail - but because the work Chris does, and things he researched, in order to have that test fail, gives more information about how the vendor&amp;rsquo;s feature works. If you want to know more about that, I have another talk about testing (and designing interactions with) third-party dependencies &lt;a href=&#34;https://kevinjmurphy.com/posts/railsconf-2020/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m on &amp;ldquo;team testing&amp;rdquo;. My process of getting there came from a lot of opportunities to learn from testing, experiencing it, and having the chance to be &amp;ldquo;saved&amp;rdquo; by them. Forcing tests may increase the likelihood those things happen, but I think you&amp;rsquo;ll have a harder time convincing people on the value of tests if they exist to appease a number.&lt;/p&gt;&lt;p&gt;A test you wish you&amp;rsquo;d written may have more impact on your career than one you wrote perfectly. The experience of not having that safety net, of not having that immediate feedback, and coming to terms with the consequences of that over the life of a project will stick with you. That doesn&amp;rsquo;t mean don&amp;rsquo;t write tests. But recognize it might not click for someone until they &lt;em&gt;know&lt;/em&gt; this concept exists, they &lt;em&gt;know&lt;/em&gt; they didn&amp;rsquo;t use it, and now they &lt;em&gt;know&lt;/em&gt; how much worse off they are right now without it.&lt;/p&gt;&lt;p&gt;This doesn&amp;rsquo;t mean don&amp;rsquo;t track test coverage. It can be motivating! Jason Charnes mentioned using it to drive an increase in coverage on a project. Once he got the value he sought out of the tests, the metric/number itself didn&amp;rsquo;t matter as much, so he moved on. Jason got the benefit he wanted, and the metric may have helped drive him there, but I&amp;rsquo;m betting that the benefit wasn&amp;rsquo;t seeing a bigger number on his test coverage %.&lt;/p&gt;&lt;h2 id=&#34;put-in-the-work&#34;&gt;Put in the work &lt;a href=&#34;#put-in-the-work&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s easy to say these rules and walk away feeling like we&amp;rsquo;ve shared some wisdom. What&amp;rsquo;s harder is putting in the work to help a person grow so they happen upon their own wisdom. We need to have support structures in place so people can learn about these things, and wrestle with them, and gain familiarity. Then they&amp;rsquo;re not rules to be followed - they become shared values we benefit from, and they&amp;rsquo;re used when we see a benefit.&lt;/p&gt;&lt;p&gt;Thanks Andrew, Jason, and Chris for having me on.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Temporary State With Blocks Post Sharing</title>
       <link>https://kevinjmurphy.com/posts/temporary-state-blocks-sharing/</link>
       <pubDate>Sun, 22 Aug 2021 19:13:09 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/temporary-state-blocks-sharing/</guid>
       <description>&lt;p&gt;Last week, I wrote a &lt;a href=&#34;https://kevinjmurphy.com/posts/temporary-state-in-tests/&#34;&gt;post&lt;/a&gt; on myemployer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/temporary-state-in-tests&#34;&gt;blog&lt;/a&gt; about using blocks in ruby to temporarily alter the state ofthe application, and how that can be particularly helpful in tests.&lt;/p&gt;&lt;p&gt;That post was featured in Ruby Radar &lt;a href=&#34;https://rubyradar.dev/issues/ruby-radar-12-back-to-our-regularly-scheduled-programming-726989&#34;&gt;#12&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_radar_12.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;This post was also featured in Ruby Weekly &lt;a href=&#34;https://rubyweekly.com/issues/568&#34;&gt;#568&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_568.png&#34;/&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>Temporary State in Tests: Bloc(k) Party</title>
       <link>https://kevinjmurphy.com/posts/temporary-state-in-tests/</link>
       <pubDate>Sat, 14 Aug 2021 14:05:07 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/temporary-state-in-tests/</guid>
       <description>&lt;h2 id=&#34;testing-around-the-clock-sundayhttpsyoutubeveqiwt9ejdy&#34;&gt;Testing Around the Clock (&lt;a href=&#34;https://youtu.be/vEqIWT9EjDY&#34;&gt;Sunday&lt;/a&gt;) &lt;a href=&#34;#testing-around-the-clock-sundayhttpsyoutubeveqiwt9ejdy&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Tests will sometimes require us to bend the truth and modifythe state of the world in order to have repeatable, consistent results andfeedback.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;re building an application that sends a notification on Sunday. Inorder to test it sending a notification, we need it to be Sunday. The problemwith that is I don&amp;rsquo;t really like working on Sundays.&lt;/p&gt;&lt;p&gt;If I&amp;rsquo;m writing code on Wednesday, I want to make sure I don&amp;rsquo;t breaknotifications. Rather than waiting until Sunday to run my tests, I can trick mytest into thinking it&amp;rsquo;s Sunday. Rails has built-in &lt;a href=&#34;https://api.rubyonrails.org/v5.2.6/classes/ActiveSupport/Testing/TimeHelpers.html&#34;&gt;helpers&lt;/a&gt;we can use to simulate that.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;travel_to &lt;span style=&#34;color:#66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local(&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;)notifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Notifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newexpect(notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_notification?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we do this, we want to ensure that the results are &lt;em&gt;temporary&lt;/em&gt;. Othertests, or even areas within a given test, shouldn&amp;rsquo;t be affected by this statechange. It should still be whatever day the tests are &lt;strong&gt;really&lt;/strong&gt; run otherwise.&lt;/p&gt;&lt;p&gt;Now, in the case of these helpers from Rails, according to the documentation:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The stubs are automatically removed at the end of the test.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;However, we want to be clear to readers who may not have perused the Railsdocumentation (nor have encyclopedic knowledge of it). Additionally, we may onlywant part of the test to think it&amp;rsquo;s Sunday. In order to isolate this change, wecan limit its impact to be within a block.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;notifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Notifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newtravel_to &lt;span style=&#34;color:#66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local(&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;  expect(notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_notification?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;travel_to &lt;span style=&#34;color:#66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local(&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;  expect(notifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_notification?)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;benefits-of-the-block-little-thoughtshttpsyoutubeq6cs26oex64&#34;&gt;Benefits of the Block (&lt;a href=&#34;https://youtu.be/q6cS26oEX64&#34;&gt;Little Thoughts&lt;/a&gt;) &lt;a href=&#34;#benefits-of-the-block-little-thoughtshttpsyoutubeq6cs26oex64&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The block helps visually distinguish the scope of the change, in addition toensuring that the change is limited to the code within the block. Ifind it to be more readable and clear using a block. We have temporarilychanged the state of the world, but only in a limited capacity.&lt;/p&gt;&lt;p&gt;As far as thetest is concerned, it&amp;rsquo;s Sunday in the first block, Monday in the second block,and whatever day of the week you&amp;rsquo;re reading this before and after the blocks.&lt;/p&gt;&lt;h2 id=&#34;disregarding-bullet-recommendations-real-talkhttpsyoutubemmmmoriaooc&#34;&gt;Disregarding Bullet Recommendations (&lt;a href=&#34;https://youtu.be/mmMmoRiAoOc&#34;&gt;Real Talk&lt;/a&gt;) &lt;a href=&#34;#disregarding-bullet-recommendations-real-talkhttpsyoutubemmmmoriaooc&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;ve used &lt;a href=&#34;https://github.com/flyerhzm/bullet&#34;&gt;Bullet&lt;/a&gt; before for eager loading optimization, you may have runinto situations in which you wished it wouldn&amp;rsquo;t tell you something either needed ordidn&amp;rsquo;t need to be eagerly loaded.&lt;/p&gt;&lt;p&gt;Now, some times that&amp;rsquo;s the tool doing its job: giving you feedback you may nothave expected (or wanted). However, in tests, it may be giving you a falsepositive because of your test setup.&lt;/p&gt;&lt;p&gt;In a test that calls a method where only one record exists in your database,Bullet may suggest that you don&amp;rsquo;t need the eager loading. And Bullet iscorrect - in this case, for this test. However, the setup in that test may notreflect reality or the expectation most of the time. It&amp;rsquo;s much more likely thatthere are &lt;strong&gt;many&lt;/strong&gt; records, which will cause Bullet to recommend the &lt;code&gt;includes&lt;/code&gt;were you to get rid of it.&lt;/p&gt;&lt;p&gt;How can we keep our test and satisfy Bullet? We don&amp;rsquo;t; instead, let&amp;rsquo;s turnBullet off. But, we don&amp;rsquo;t want Bullet to stay off for the rest of the test run.We only want it off when calling that one method in this one test.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;re using RSpec, you can use tags to &lt;a href=&#34;https://tosbourn.com/ignore-bullet-rspec/&#34;&gt;turn Bullet off&lt;/a&gt;for an entire test, file, or context. It&amp;rsquo;s a clever and succinct approach.&lt;/p&gt;&lt;p&gt;This is a post about blocks, so let&amp;rsquo;s discuss another way.&lt;/p&gt;&lt;h2 id=&#34;turn-it-off-and-on-again-fluxhttpsyoutubettcboe1grng&#34;&gt;Turn It Off And On Again (&lt;a href=&#34;https://youtu.be/ttcboE1GrNg&#34;&gt;Flux&lt;/a&gt;) &lt;a href=&#34;#turn-it-off-and-on-again-fluxhttpsyoutubettcboe1grng&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ve discussed how to &lt;strong&gt;use&lt;/strong&gt; a method that takes a block to temporarilychange state in our application, specifically tests. Let&amp;rsquo;s start by writing thecode we want:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doesn&amp;#39;t complain about Bullet warnings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;  disable_bullet &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;    expect(&lt;span style=&#34;color:#66d9ef&#34;&gt;Notification&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method_that_eager_loads_associations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s write an implementation of &lt;code&gt;disable_bullet&lt;/code&gt;. We can use &lt;code&gt;yield&lt;/code&gt; to wrapturning Bullet off and on again inside of &lt;code&gt;disable_bullet&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disable_bullet&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Calling this method turns Bullet off, runs whatever code is in the block passedto it, and then turns Bullet back on after the block completes. We can make theblock optional by calling the &lt;code&gt;block_given?&lt;/code&gt; method:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disable_bullet&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; block_given?  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we&amp;rsquo;re going to remove that in this case because there&amp;rsquo;s no use case forcalling this method otherwise. We&amp;rsquo;ll get an error without passing a block to&lt;code&gt;disable_bullet&lt;/code&gt;, and that&amp;rsquo;s ok.&lt;/p&gt;&lt;h2 id=&#34;why-did-i-do-this-again-i-still-rememberhttpsyoutube5r-9igwd36a&#34;&gt;Why Did I Do This Again? (&lt;a href=&#34;https://youtu.be/5R-9IgWD36A&#34;&gt;I Still Remember&lt;/a&gt;) &lt;a href=&#34;#why-did-i-do-this-again-i-still-rememberhttpsyoutube5r-9igwd36a&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When you&amp;rsquo;re writing the test that you need to disable Bullet, you likely havethe context of why Bullet needed to be turned off. However, when you&amp;rsquo;re readingit later, you may forget. And maybe someone else wrote this test and youdon&amp;rsquo;t know to begin with. Is it &lt;em&gt;reasonable&lt;/em&gt; to have turned Bullet off? We canforce this to be documented in the test by making an addition to our method.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disable_bullet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;reason&lt;/span&gt;:)  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Bullet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Callers are now required to pass in a &lt;strong&gt;reason&lt;/strong&gt; why Bullet has beenturned off. It&amp;rsquo;s not used in the method, but it helps enforce a thoughtfulunderstanding of why this tool is being turned off when the method iscalled.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doesn&amp;#39;t complain about Bullet warnings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;  disable_bullet(&lt;span style=&#34;color:#e6db74&#34;&gt;reason&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Trust me. But seriously, here&amp;#39;s why...&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;    expect(&lt;span style=&#34;color:#66d9ef&#34;&gt;Notification&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method_that_eager_loads_associations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By using a block here, we have provided a way to &lt;em&gt;temporarily&lt;/em&gt; change the stateof the world with an aesthetic that clearly denotes the scope of the change, andwe also added a way to force users to justify their use of the method tothemselves and others.&lt;/p&gt;&lt;h2 id=&#34;inspiration-pioneershttpsyoutubejrpmikap2ss&#34;&gt;Inspiration (&lt;a href=&#34;https://youtu.be/JrpMIkaP2ss&#34;&gt;Pioneers&lt;/a&gt;) &lt;a href=&#34;#inspiration-pioneershttpsyoutubejrpmikap2ss&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/purinkle&#34;&gt;Rob Whittaker&lt;/a&gt;for &lt;a href=&#34;https://twitter.com/purinkle/status/1412071536819851268&#34;&gt;asking me&lt;/a&gt; aboutother ways I like to use blocks, based on an &lt;a href=&#34;https://kevinjmurphy.com/posts/activerecord-new-block/&#34;&gt;earlier post&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/temporary-state-in-tests&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>CSV Validation Post Sharing</title>
       <link>https://kevinjmurphy.com/posts/csv-validation-sharing/</link>
       <pubDate>Tue, 27 Jul 2021 19:13:09 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/csv-validation-sharing/</guid>
       <description>&lt;p&gt;Last week, I wrote a &lt;a href=&#34;https://kevinjmurphy.com/posts/active-model-validations-csv/&#34;&gt;post&lt;/a&gt; on myemployer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/active-model-validations-csv&#34;&gt;blog&lt;/a&gt; aboutvalidating input from a CSV file using &lt;code&gt;ActiveModel::Validations&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;That post was featured in Ruby Weekly &lt;a href=&#34;https://rubyweekly.com/issues/562&#34;&gt;#562&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_562.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;It was also shared in Awesome Ruby &lt;a href=&#34;https://ruby.libhunt.com/newsletter/270&#34;&gt;#270&lt;/a&gt;. This is the first time I&amp;rsquo;ve been inAwesome Ruby!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/awesome_ruby_270.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;All of my blog posts are cross-posted on &lt;a href=&#34;https://dev.to/kevin_j_m&#34;&gt;dev.to&lt;/a&gt;,and their ruby community was nice enough to share my post with their twitterfollowers.&lt;/p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ro&#34; dir=&#34;ltr&#34;&gt;Validate CSV Input With ActiveModel::Validations&lt;br&gt;&lt;br&gt;{ author: &lt;a href=&#34;https://twitter.com/kevin_j_m?ref_src=twsrc%5Etfw&#34;&gt;@kevin_j_m&lt;/a&gt; } &lt;a href=&#34;https://twitter.com/hashtag/DEVCommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#DEVCommunity&lt;/a&gt;&lt;a href=&#34;https://t.co/8AYMpkX7yc&#34;&gt;https://t.co/8AYMpkX7yc&lt;/a&gt;&lt;/p&gt;&amp;mdash; The Ruby Dev (@the_ruby_dev) &lt;a href=&#34;https://twitter.com/the_ruby_dev/status/1417522440431968261?ref_src=twsrc%5Etfw&#34;&gt;July 20, 2021&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;p&gt;In case you can&amp;rsquo;t read that, the tweet says:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Validate CSV Input With ActiveModel::Validations&lt;/p&gt;&lt;p&gt;{ author: @kevin_j_m } #DEVCommunity&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Lastly, Ruby Radar &lt;a href=&#34;https://rubyradar.dev/issues/ruby-radar-9-junior-spotlight-705164&#34;&gt;#9&lt;/a&gt;featured the post!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_radar_9.png&#34;/&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>Validate CSV Input With ActiveModel::Validations</title>
       <link>https://kevinjmurphy.com/posts/active-model-validations-csv/</link>
       <pubDate>Mon, 19 Jul 2021 08:08:53 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/active-model-validations-csv/</guid>
       <description>&lt;h2 id=&#34;standard-library-parsing&#34;&gt;Standard Library Parsing &lt;a href=&#34;#standard-library-parsing&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;re maintaining a system that tracks information about books, including theirpublication dates. On occasion, publishers will send us CSVs with updatedpublication dates, and we need to update our Rails application to have thosedates.&lt;/p&gt;&lt;p&gt;We want a repeatable process, so rather than updating these by hand, let&amp;rsquo;s useRuby&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.1/libdoc/csv/rdoc/CSV.html&#34;&gt;CSV class&lt;/a&gt;to parse this data.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(csv_text, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;  book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ISBN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)  book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Four lines and we have a functionally complete parser that updates our systemhow we expect. That all seems great. Until, that is, we actually run it.&lt;/p&gt;&lt;h2 id=&#34;book-checked-out&#34;&gt;Book Checked Out &lt;a href=&#34;#book-checked-out&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We execute our parser on the first data file we receive, and it quickly stopswith the following error:&lt;/p&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NoMethodError: undefined method `update&#39; for nil:NilClass&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On inspecting the state of our database, we see that the first three books inthe CSV file had their publication dates updated, but the rest didn&amp;rsquo;t. Lookingat the fourth row in the CSV, we discover that the ISBN for that row isn&amp;rsquo;t inour database. In that case &lt;code&gt;find_by&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;, and calling &lt;code&gt;update&lt;/code&gt; on&lt;code&gt;nil&lt;/code&gt; is exactly our problem. An exception is raised, and further rows of theCSV aren&amp;rsquo;t parsed.&lt;/p&gt;&lt;p&gt;We can fix that! If we don&amp;rsquo;t find the book, let&amp;rsquo;s log the error and move on tothe next row, without calling &lt;code&gt;update&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(csv_text, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;  book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ISBN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank?    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not find book&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the entire CSV processes, our books are updated, and everyone&amp;rsquo;s happy.Right?&lt;/p&gt;&lt;h2 id=&#34;blank-pages&#34;&gt;Blank Pages &lt;a href=&#34;#blank-pages&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Days later, we discover that a book which previously had a publication datedoesn&amp;rsquo;t anymore. It&amp;rsquo;s not unusual for a book to not have a publication date - wehave records of books that haven&amp;rsquo;t been published yet. However, books shouldn&amp;rsquo;t&lt;em&gt;lose&lt;/em&gt; an existing publication date.&lt;/p&gt;&lt;p&gt;We see that the book in question was in the CSV, and the Pub Date column wasempty for that row. Turns out, that was an error from the publisher in preparingthe CSV. Any book in that file should always have a publication date - thepurpose of this process is to provide publication dates.&lt;/p&gt;&lt;p&gt;We can prevent this from happening in the future by ensuring that a row has apublication date before attempting to process it:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(csv_text, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;blank?    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skipped updating book with no publication date&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ISBN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank?    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not find book&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;losing-the-plot&#34;&gt;Losing The Plot &lt;a href=&#34;#losing-the-plot&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our &amp;ldquo;simple&amp;rdquo; parser is now a lot more complicated. Business rules about theshape, structure, and expectations of the data are now littered alongwith actions consuming the data to do things like find the book and update itwith the appropriate publication date. It&amp;rsquo;s harder to identify what the coreresponsibility of this snippet of code is.&lt;/p&gt;&lt;h2 id=&#34;adding-chapters&#34;&gt;Adding Chapters &lt;a href=&#34;#adding-chapters&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s try to increase the clarity of our code by separating out how to processan individual row of the CSV.&lt;/p&gt;&lt;h3 id=&#34;first-act-establishing-a-new-character-class&#34;&gt;First Act: Establishing A New Character (Class) &lt;a href=&#34;#first-act-establishing-a-new-character-class&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;ll start by making a class that takes in the needed data from the CSV row andfinds the book associated with the ISBN.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookPublicationDateImportRow&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:isbn&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;:publication_date&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;:)    @isbn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; isbn    @publication_date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; publication_date  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;book&lt;/span&gt;    @book &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by(&lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: isbn)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perhaps you&amp;rsquo;ve heard of a &lt;a href=&#34;https://thoughtbot.com/blog/activemodel-form-objects&#34;&gt;form object&lt;/a&gt;to represent data associated with a particular form on your web application. Youcan consider that&amp;rsquo;s what we&amp;rsquo;re doing here, except our input isn&amp;rsquo;t from a form ona web page - it&amp;rsquo;s a row from a CSV file.&lt;/p&gt;&lt;h3 id=&#34;second-act-rising-validations&#34;&gt;Second Act: Rising Validations &lt;a href=&#34;#second-act-rising-validations&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now, rather than rewriting validation logic, as we had in our procedural codeinitially, we can use ActiveModel&amp;rsquo;s &lt;a href=&#34;https://api.rubyonrails.org/v6.1.3.1/classes/ActiveModel/Validations.html&#34;&gt;Validations&lt;/a&gt;module. That&amp;rsquo;ll allow us access to the validation &lt;a href=&#34;https://guides.rubyonrails.org/active_record_validations.html#validation-helpers&#34;&gt;helpers&lt;/a&gt;we&amp;rsquo;re used to using with other Rails ActiveRecord models.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookPublicationDateImportRow&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Validations&lt;/span&gt;  validates &lt;span style=&#34;color:#e6db74&#34;&gt;:book&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;presence&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;  validates &lt;span style=&#34;color:#e6db74&#34;&gt;:publication_date&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;presence&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We would have caught our last problem of losing publication dates if thatvalidation were on the Book model itself - and we may be tempted to look to addit now. However, remember - having a book with no publication date is totallynormal for our application. It&amp;rsquo;s only in &lt;strong&gt;this&lt;/strong&gt; instance of receiving apublication date update from a publisher with no publication date where it&amp;rsquo;sunacceptable to have a value for that attribute.&lt;/p&gt;&lt;h3 id=&#34;third-act-update-resolution&#34;&gt;Third Act: Update Resolution &lt;a href=&#34;#third-act-update-resolution&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;ll also mirror ActiveRecord&amp;rsquo;s API by adding in a &lt;code&gt;save&lt;/code&gt; method that makessure our instance is passing its own validations before updating the book:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookPublicationDateImportRow&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; valid?    book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: @publication_date)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rewriting-the-intro&#34;&gt;Rewriting The Intro &lt;a href=&#34;#rewriting-the-intro&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that we have something that&amp;rsquo;s responsible for managing an individual row, wecan update our parsing code to be responsible for iterating through that CSV andpass off the details of how to manage that data to our new class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(csv_text, &lt;span style=&#34;color:#e6db74&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;row&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;  book_import &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BookPublicationDateImportRow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(    &lt;span style=&#34;color:#e6db74&#34;&gt;isbn&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ISBN&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;publication_date&lt;/span&gt;: row&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pub Date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,  )  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;book_import&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(book_import&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;errors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;full_messages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;))  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue &lt;a href=&#34;#epilogue&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;By adding this new class, we&amp;rsquo;ve given ourselves an extension point foradditional logic on the row. Any data transformation, like converting thepublication date string to a date object, can be handled here (however, for CSVparsing, do take a look at the standard library&amp;rsquo;s &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.1/libdoc/csv/rdoc/CSV.html#class-CSV-label-Built-In+Field+Converters&#34;&gt;converters&lt;/a&gt;as well!).&lt;/p&gt;&lt;p&gt;Any further validations that need to be exercised on the data can take place inthis separate class. Moreover, we can use framework features and concepts thatwe&amp;rsquo;re already familiar with, rather than rewriting our own business logic forvalidation.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/active-model-validations-csv&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Appearance on Rails With Jason Podcast</title>
       <link>https://kevinjmurphy.com/posts/rails-with-jason-podcast/</link>
       <pubDate>Thu, 17 Jun 2021 11:45:52 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rails-with-jason-podcast/</guid>
       <description>&lt;p&gt;Jason Swett was kind enough to him me on his podcast, &lt;a href=&#34;https://www.codewithjason.com/rails-with-jason-podcast/&#34;&gt;Rails With Jason&lt;/a&gt;. We discussed the contents of my RailsConf 2021 talk: Engineering MBA.&lt;/p&gt;&lt;p&gt;Thanks for having me on Jason! You can give it a listen &lt;a href=&#34;https://www.codewithjason.com/rails-with-jason-podcast/episodes/096-engineering-mba-with-kevin-murphy-jumSoete/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Ruby Weekly 554</title>
       <link>https://kevinjmurphy.com/posts/ruby-weekly-554/</link>
       <pubDate>Fri, 28 May 2021 07:50:04 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-weekly-554/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m excited to be in this week&amp;rsquo;s Ruby Weekly, &lt;a href=&#34;https://rubyweekly.com/issues/554&#34;&gt;#554&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_554.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;The article they included is a &lt;a href=&#34;https://kevinjmurphy.com/posts/activerecord-new-block/&#34;&gt;post&lt;/a&gt;from my employer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/activerecord-new-block&#34;&gt;blog&lt;/a&gt;about passing a block to ActiveRecord methods, and how it differs from using&lt;code&gt;tap&lt;/code&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>RailsConf Roundup 2021</title>
       <link>https://kevinjmurphy.com/posts/railsconf-roundup-2021/</link>
       <pubDate>Wed, 19 May 2021 10:50:20 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/railsconf-roundup-2021/</guid>
       <description>&lt;h1 id=&#34;railsconf-2021&#34;&gt;RailsConf 2021 &lt;a href=&#34;#railsconf-2021&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://railsconf.com/&#34;&gt;RailsConf&lt;/a&gt; wrapped up in mid-April with a virtualgathering, featuring attendees from 61 different countries. The talks are nowavailable to all on &lt;a href=&#34;https://www.youtube.com/c/rubycentral/videos&#34;&gt;YouTube&lt;/a&gt;, soif you&amp;rsquo;re looking for some suggestions on where to start, please allow me tocurate a list for you.&lt;/p&gt;&lt;h2 id=&#34;recommended-talks&#34;&gt;Recommended Talks &lt;a href=&#34;#recommended-talks&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;refactoring-a-developers-guide-to-writing-well&#34;&gt;Refactoring: A developer&amp;rsquo;s guide to writing well &lt;a href=&#34;#refactoring-a-developers-guide-to-writing-well&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is my favorite session that I&amp;rsquo;ve had the opportunity to watch thus far.Writing is such a critical component of our jobs (and lives), and this primer ispresented in such a friendly manner.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/BbIILUSmSk4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;hiring-is-not-hazing&#34;&gt;Hiring is Not Hazing &lt;a href=&#34;#hiring-is-not-hazing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you&amp;rsquo;re associated with a tech company, and reading this around the time thatthis published - you&amp;rsquo;re probably hiring. Whether you are or not, take thisopportunity to evaluate the process you use to lead to better outcomes forcandidates and the organization.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KLHYZT2I28k&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;missing-guide-to-service-objects-in-rails&#34;&gt;Missing Guide to Service Objects in Rails &lt;a href=&#34;#missing-guide-to-service-objects-in-rails&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&amp;ldquo;Service objects&amp;rdquo; as a concept means so many different things to differentpeople. This talk introduces different philosophies people take in constructingservice objects and presents the trade-offs of each.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/XH1fbvexqyU&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;a-day-in-the-life-of-a-ruby-object&#34;&gt;A Day in the Life of a Ruby Object &lt;a href=&#34;#a-day-in-the-life-of-a-ruby-object&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Garbage collection, mark and sweep, page size, memory allocation - all conceptsthat can feel very intimidating. However, when presented so masterfullyeloquently, this talk is a great way to make these topics feel moreapproachable.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/PuNbdfdFBjk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;viewcomponents-in-the-real-world&#34;&gt;ViewComponents in the Real World &lt;a href=&#34;#viewcomponents-in-the-real-world&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Encapsulating view logic and presentation in &lt;a href=&#34;https://viewcomponent.org/&#34;&gt;ViewComponents&lt;/a&gt; helps promote reusable and testable objects to the view layer of your Rails app.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QoetqsBCsbE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;speed-up-your-test-suite-by-throwing-computers-at-it&#34;&gt;Speed up your test suite by throwing computers at it &lt;a href=&#34;#speed-up-your-test-suite-by-throwing-computers-at-it&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This has a number of keen insights on improving the performance of your overalltest suite.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/T3TipTdx_2k&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;engineering-mba-be-the-boss-of-your-own-work&#34;&gt;Engineering MBA: Be The Boss of Your Own Work &lt;a href=&#34;#engineering-mba-be-the-boss-of-your-own-work&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;ll be honest: I did not actually watch this talk. But let&amp;rsquo;s just say I&amp;rsquo;m&lt;strong&gt;very&lt;/strong&gt; familiar with the subject matter and the presentation.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6ldCGo29w5g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&#34;talks-i-look-forward-to&#34;&gt;Talks I Look Forward To &lt;a href=&#34;#talks-i-look-forward-to&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I did not have the opportunity to watch everything I wanted to during theconference. Here is a small sampling of what&amp;rsquo;s still on my list.&lt;/p&gt;&lt;h3 id=&#34;the-history-of-making-mistakes&#34;&gt;The History of Making Mistakes &lt;a href=&#34;#the-history-of-making-mistakes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As someone that has &lt;em&gt;certainly&lt;/em&gt; never made a mistake before, I can&amp;rsquo;t wait tolearn what all the fuss is about.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/har1kdHqCDw&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;how-reference-librarians-can-help-us-help-each-other&#34;&gt;How Reference Librarians Can Help Us Help Each Other &lt;a href=&#34;#how-reference-librarians-can-help-us-help-each-other&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Anything that talks about how awesome librarians are is ok by me. I look forwardto hearing more about how I can approach my day-to-day work with the mindset andtools that a reference librarian brings to bear in their profession.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/A2Tr0DWfwAE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&#34;what-the-fork&#34;&gt;What the fork()? &lt;a href=&#34;#what-the-fork&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Need something to be faster? We&amp;rsquo;ll fork a process and it&amp;rsquo;ll magically be better,because concurrency&amp;hellip;right? I&amp;rsquo;ll let you know after I give this talk a view.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/4crIuSj-irQ&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/railsconf-roundup-2021&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>ActiveRecord&#39;s New Takes a Block, Kid</title>
       <link>https://kevinjmurphy.com/posts/activerecord-new-block/</link>
       <pubDate>Fri, 14 May 2021 12:20:07 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/activerecord-new-block/</guid>
       <description>&lt;h2 id=&#34;making-new-activerecord-models-lets-try-it-againhttpsenwikipediaorgwikilet27s_try_it_again&#34;&gt;Making New ActiveRecord Models (&lt;a href=&#34;https://en.wikipedia.org/wiki/Let%27s_Try_It_Again&#34;&gt;Let&amp;rsquo;s Try It Again&lt;/a&gt;) &lt;a href=&#34;#making-new-activerecord-models-lets-try-it-againhttpsenwikipediaorgwikilet27s_try_it_again&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If we want to make a new instance of an ActiveRecord model with particularattributes, we have a number of options.&lt;/p&gt;&lt;p&gt;We can pass the attributes in as a hash:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can set the attributes after creating the object:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And there&amp;rsquo;s a third option - we can &lt;em&gt;also&lt;/em&gt; pass &lt;code&gt;new&lt;/code&gt; a block:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;  user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;  user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;when-could-we-use-this-the-blockhttpsenwikipediaorgwikithe_block_album&#34;&gt;When Could We Use This? (&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Block_(album)&#34;&gt;The Block&lt;/a&gt;) &lt;a href=&#34;#when-could-we-use-this-the-blockhttpsenwikipediaorgwikithe_block_album&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say we have a system that members of a band use to check their tourschedule. Band members are users, and when we add a member, we want to make auser for them.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_member&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;:)  @members &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: first_name, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: last_name)&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additionally, users have a username attribute, and we want to keep that uniquewithin a given band. We also want the system to define the username when we adda band member.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_member&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;:)  username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;band_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;last_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @members&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:last_name&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(last_name)    username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; unique_value  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  @members &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(    &lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: first_name,    &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: last_name,    &lt;span style=&#34;color:#e6db74&#34;&gt;username&lt;/span&gt;: username,  )&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unique_value&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, if we prefer the aesthetic, we can also define those attributes in ablock:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_member&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;:)  @members &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_name    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; last_name    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;band_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;last_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @members&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:last_name&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(last_name)      user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; unique_value    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;seeing-the-result-the-right-stuffhttpsenwikipediaorgwikiyou_got_it_the_right_stuff&#34;&gt;Seeing The Result (&lt;a href=&#34;https://en.wikipedia.org/wiki/You_Got_It_(The_Right_Stuff)&#34;&gt;The Right Stuff&lt;/a&gt;) &lt;a href=&#34;#seeing-the-result-the-right-stuffhttpsenwikipediaorgwikiyou_got_it_the_right_stuff&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s check our work to see the usernames of our band members.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Band&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New Kids on the Block&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_member(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_member(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Donnie&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wahlberg&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_member(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pry(main)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; band&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;members&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:username&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New_Kids_on_the_Block_Knight&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New_Kids_on_the_Block_Wahlberg&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New_Kids_on_the_Block_Knight_65&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jonathan&amp;rsquo;s username has additional characters appended to it, as Jordan alreadyclaimed the username &lt;code&gt;&amp;quot;New_Kids_on_the_Block_Knight&amp;quot;&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;tap-dance-step-by-stephttpsenwikipediaorgwikistep_by_step_new_kids_on_the_block_song&#34;&gt;Tap Dance (&lt;a href=&#34;https://en.wikipedia.org/wiki/Step_by_Step_(New_Kids_on_the_Block_song)&#34;&gt;Step By Step&lt;/a&gt;) &lt;a href=&#34;#tap-dance-step-by-stephttpsenwikipediaorgwikistep_by_step_new_kids_on_the_block_song&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re familiar with Ruby&amp;rsquo;s &lt;code&gt;tap&lt;/code&gt; &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Kernel.html#method-i-tap&#34;&gt;method&lt;/a&gt;,you might be wondering what all the fuss is about. We can do the same thingwith &lt;code&gt;tap&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_member&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;:)  @members &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tap &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_name    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; last_name    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;band_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;last_name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @members&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:last_name&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(last_name)      user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; unique_value    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works with any Ruby object, not just those that inherit from&lt;code&gt;ActiveRecord::Base&lt;/code&gt;, so why bother with having to know if we can pass a blockto &lt;code&gt;new&lt;/code&gt; or not, based on what the object inherits from?&lt;/p&gt;&lt;p&gt;That&amp;rsquo;s fair, but &lt;code&gt;new&lt;/code&gt; is not the only ActiveRecord method that takes a block.Others include &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, and &lt;code&gt;find_or_initialize_by&lt;/code&gt;. There thedifferences with &lt;code&gt;tap&lt;/code&gt; start to show:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;new_user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tap &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;  u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;new_user&lt;/code&gt; has the first name of Jonathan, resulting from the call to &lt;code&gt;tap&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;new_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, that&amp;rsquo;s only persisted in memory - not in the database. What we storedin the database is what we passed to &lt;code&gt;create&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;new_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also pass a block to &lt;code&gt;create&lt;/code&gt; directly:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;new_user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jordan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Knight&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;  u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in that case, the first name of the user in memory and in the database isJonathan.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;new_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;new_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_name&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jonathan&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why would we mix setting attributes with &lt;code&gt;create&lt;/code&gt; both by passing a hash &lt;em&gt;and&lt;/em&gt;a block, either with or without &lt;code&gt;tap&lt;/code&gt;? Other than to explain quirks anddifferences in what method you&amp;rsquo;re passing a block to, I am also interested inknowing. If you have real-world use cases, &lt;a href=&#34;https://twitter.com/kevin_j_m&#34;&gt;let me know&lt;/a&gt;!&lt;/p&gt;&lt;h2 id=&#34;finding-blocks-in-rails-source-code-face-the-musichttpsenwikipediaorgwikiface_the_music_new_kids_on_the_block_album&#34;&gt;Finding Blocks in Rails Source Code (&lt;a href=&#34;https://en.wikipedia.org/wiki/Face_the_Music_(New_Kids_on_the_Block_album)&#34;&gt;Face the Music&lt;/a&gt;) &lt;a href=&#34;#finding-blocks-in-rails-source-code-face-the-musichttpsenwikipediaorgwikiface_the_music_new_kids_on_the_block_album&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re curious about where in Rails&#39; source code &lt;code&gt;new&lt;/code&gt; is set up to take ablock, we can start by &lt;a href=&#34;https://github.com/rails/rails/blob/70c5496542e5dc82ca28840cb01e710200ce5d14/activerecord/lib/active_record/base.rb#L299&#34;&gt;looking&lt;/a&gt;in &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. As of the time this article was published, there&amp;rsquo;s notmuch implementation in that class. Instead, we have to look in the &lt;code&gt;Core&lt;/code&gt; &lt;a href=&#34;https://github.com/rails/rails/blob/70c5496542e5dc82ca28840cb01e710200ce5d14/activerecord/lib/active_record/core.rb#L582&#34;&gt;module&lt;/a&gt;to find the &lt;code&gt;initialize&lt;/code&gt; method that takes a block.&lt;/p&gt;&lt;p&gt;Initializing an ActiveRecord model with a block is also defined in the&lt;a href=&#34;https://github.com/rails/rails/blob/70c5496542e5dc82ca28840cb01e710200ce5d14/activerecord/lib/active_record/base.rb#L35-L40&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Thanks for &lt;a href=&#34;https://en.wikipedia.org/wiki/Hangin%27_Tough&#34;&gt;hangin&#39; tough&lt;/a&gt; tothe end of this article. I hope you learned a thing or two about passing blocksto ActiveRecord methods.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/activerecord-new-block&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Consistency Conundrum</title>
       <link>https://kevinjmurphy.com/posts/consistency-conundrum/</link>
       <pubDate>Sat, 24 Apr 2021 14:14:09 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/consistency-conundrum/</guid>
       <description>&lt;h2 id=&#34;evaluating-alternatives&#34;&gt;Evaluating Alternatives &lt;a href=&#34;#evaluating-alternatives&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/to-change-or-not-to-change/&#34;&gt;To Change Or Not To Change&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Consistency Conundrum&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;consistent-starting-point&#34;&gt;Consistent Starting Point &lt;a href=&#34;#consistent-starting-point&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our &lt;a href=&#34;https://kevinjmurphy.com/posts/to-change-or-not-to-change/&#34;&gt;previous&lt;/a&gt; post, we wrote the followingcode:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex_calculation&lt;/span&gt;(base_price, promo_code)  &lt;span style=&#34;color:#75715e&#34;&gt;# calculation&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We received this suggestion in code review:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You could consider using keyword arguments for this method.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;On the whole, we agree that keyword arguments would benefit this method.However, if keyword arguments are never used in this application, does that meanwe shouldn&amp;rsquo;t do it? We don&amp;rsquo;t want to be inconsistent!&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s consider some choices we could make specifically in regards to consistencywithin our application.&lt;/p&gt;&lt;h2 id=&#34;options&#34;&gt;Options &lt;a href=&#34;#options&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;do-nothing&#34;&gt;Do Nothing &lt;a href=&#34;#do-nothing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Generally, I don&amp;rsquo;t think this gets the credit it deserves as anexplicitly-defined option. The inertia of the system may be too great to warrantmaking the change. The choice to write or structure code in the application thisway may be intentional and necessary. It may introduce too much cognitiveoverhead to justify making the change. There are lots of excuses I could make tojustify not doing the work!&lt;/p&gt;&lt;p&gt;I don&amp;rsquo;t think any of these apply to our keyword arguments example. However, ifsomeone suggested:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This computation is natively supported in &lt;a href=&#34;https://numpy.org/&#34;&gt;NumPy&lt;/a&gt;. Haveyou considered integrating that?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Then I may want to cross-reference the implementations for correctness, but Imay not want to rewrite my application in Python or explore Ruby/Python bridgesto use that one function. I&amp;rsquo;m drawing on the consistency of the rest of myapplication being written in Ruby to justify that choice.&lt;/p&gt;&lt;h3 id=&#34;make-the-change-everywhere&#34;&gt;Make The Change Everywhere &lt;a href=&#34;#make-the-change-everywhere&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We could decide to invest the time and energy to use this convention&lt;em&gt;everywhere&lt;/em&gt; immediately. Then, we&amp;rsquo;d be consistent throughout our application!&lt;/p&gt;&lt;p&gt;In the case of our keyword arguments example, I would advise against that,unless there are only one or two other places where we&amp;rsquo;d use them, and they&amp;rsquo;reeasily identified.&lt;/p&gt;&lt;p&gt;Even then, I&amp;rsquo;d think twice about it. Any change has a risk, and changing theworking code purely in the name of consistency is a risk with limited upside.&lt;/p&gt;&lt;p&gt;However, consider this change:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;desired_widgets&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;Widget&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status IN &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;user_input&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the following code review suggestion:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;We should modify this method to sanitize user input before sending it as partof a database query.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If we created the query like this because it&amp;rsquo;s consistent with how otherqueries are written, then it&amp;rsquo;s time to drop everything and change that everywhere.We&amp;rsquo;ve opened ourselves up to &lt;a href=&#34;https://owasp.org/www-community/attacks/SQL_Injection&#34;&gt;SQL injection&lt;/a&gt;attacks and we need to immediately invest the time to remediate those issues forour application&amp;rsquo;s health and safety.&lt;/p&gt;&lt;p&gt;As a side note, consider a static security analysis tool like&lt;a href=&#34;https://brakemanscanner.org/&#34;&gt;Brakeman&lt;/a&gt; to &lt;a href=&#34;https://github.com/TheGnarCo/gnarails/blob/fe72e5fe74455400088d89f7af2a2d9bf1899d26/templates/bin/brakeman&#34;&gt;run automatically&lt;/a&gt;as part of your &lt;a href=&#34;https://github.com/TheGnarCo/gnarails/blob/fe72e5fe74455400088d89f7af2a2d9bf1899d26/templates/.circleci/config.yml#L49-L51&#34;&gt;build process&lt;/a&gt;so that your application is not solely relying on reviewers&#39; eyes to catchcritical security implications.&lt;/p&gt;&lt;h3 id=&#34;make-the-change-here-and-going-forward&#34;&gt;Make The Change Here, And Going Forward &lt;a href=&#34;#make-the-change-here-and-going-forward&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For our keyword arguments example, I suggested not to make the changeeverywhere. However, that doesn&amp;rsquo;t mean we should ignore it in the name ofconsistency. If there&amp;rsquo;s a demonstrated benefit, we should take advantage ofthat. Instead, we can embrace the consistency of the standard &lt;em&gt;going forward&lt;/em&gt;.As you make future changes, be mindful of current best practices andconventions, and change existing code to meet those conventions as you haveanother reason to change the code.&lt;/p&gt;&lt;p&gt;Lastly, document these conventions so that it&amp;rsquo;s clear to all team members whatthe expectations are going forward if you encounter this question. That canreduce ambiguity and help people understand why this internal inconsistency exists.&lt;/p&gt;&lt;p&gt;This approach of leaving the code better than you found it can applyto long-reaching goals as well. If you&amp;rsquo;re converting an application from&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html&#34;&gt;JavaScript to TypeScript&lt;/a&gt;,you can convert files as you need to change them. Ifyou&amp;rsquo;re updating an application from &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec&#34;&gt;feature specs&lt;/a&gt;to &lt;a href=&#34;https://relishapp.com/rspec/rspec-rails/docs/system-specs/system-spec&#34;&gt;system specs&lt;/a&gt;,you can do that as you change the area of code the feature spec is testing.&lt;/p&gt;&lt;h2 id=&#34;being-consistently-inconsistent&#34;&gt;Being Consistently Inconsistent &lt;a href=&#34;#being-consistently-inconsistent&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Software development is a rapidly evolving ecosystem of best practices, tools,and approaches. While we don&amp;rsquo;t intend to chase trends, we also need toincorporate new improvements that will benefit our applications - as long aswe&amp;rsquo;re intentional about them. For a healthy, long-running application, thatcan mean applying new paradigms in areas under active development, while leavingexisting work in its current state for the time being.&lt;/p&gt;&lt;p&gt;Living in the two worlds can be uncomfortable, and it is inconsistent. But it&amp;rsquo;sintentional inconsistency with a plan towards consistency and based on a valuejudgement on the cost of the change vs. the benefit it&amp;rsquo;ll provide.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/consistency-conundrum&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>To Change or Not to Change</title>
       <link>https://kevinjmurphy.com/posts/to-change-or-not-to-change/</link>
       <pubDate>Sun, 18 Apr 2021 07:29:25 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/to-change-or-not-to-change/</guid>
       <description>&lt;h2 id=&#34;evaluating-alternatives&#34;&gt;Evaluating Alternatives &lt;a href=&#34;#evaluating-alternatives&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;To Change Or Not To Change&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/consistency-conundrum/&#34;&gt;Consistency Conundrum&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;optional-feedback&#34;&gt;Optional Feedback &lt;a href=&#34;#optional-feedback&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Imagine you&amp;rsquo;ve just wrapped up a new feature and submitted it for code review,which includes the following method:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex_calculation&lt;/span&gt;(base_price, promo_code)  &lt;span style=&#34;color:#75715e&#34;&gt;# calculation&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One of your team members reviews the change, and leaves a suggestion.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You could consider using keyword arguments for this method.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That would change the method to look like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complex_calculation&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;base_price&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;promo_code&lt;/span&gt;:)  &lt;span style=&#34;color:#75715e&#34;&gt;# calculation&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Do you make this change? How do you decide?&lt;/p&gt;&lt;h2 id=&#34;evaluating-this-suggestion&#34;&gt;Evaluating This Suggestion &lt;a href=&#34;#evaluating-this-suggestion&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At &lt;a href=&#34;https://railsconf.com/2019/program/sessions#session-759&#34;&gt;RailsConf 2019&lt;/a&gt;, Iasked the question, &amp;ldquo;&lt;a href=&#34;https://www.youtube.com/watch?v=2NiePLJVjNI&#34;&gt;I know I can, but should I?&lt;/a&gt;&amp;rdquo;The talk provides a set of criteria you can use to make a choice betweenalternatives. Let&amp;rsquo;s apply that here.&lt;/p&gt;&lt;h3 id=&#34;impact&#34;&gt;Impact &lt;a href=&#34;#impact&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;From a functionality perspective, this makes no perceived difference. The codewill work the same one way or another and neither have any known or noticeableimplications, such as performance.&lt;/p&gt;&lt;p&gt;However, this alternative arose from a reaction a team member had who also needsto work on this code, so there must be some value in this suggestion to them.Additionally, this change, one way or another, will end up serving as prior artthat may be used to base future decisions on.&lt;/p&gt;&lt;p&gt;The change itself has very limited impact on the code itself, but it does looklike there&amp;rsquo;s a possible impact to the team worth exploring.&lt;/p&gt;&lt;h3 id=&#34;cost&#34;&gt;Cost &lt;a href=&#34;#cost&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Any change involves risk - and risk has a cost. For example, here we can&amp;rsquo;t onlymake the change to the method&amp;rsquo;s signature. We also need to modify any callersto use the keyword arguments. If we miss one,and don&amp;rsquo;t have complete test coverage, we may miss a call site - resulting in aruntime exception when the code is executed in production.&lt;/p&gt;&lt;p&gt;Considering that this is the place this method is introduced, this risk&lt;em&gt;should&lt;/em&gt; be clear to mitigate. Any callers will be in this changeset, so weshould be able to identify them while reviewing this change. Making this changeitself is not particularly risky.&lt;/p&gt;&lt;p&gt;Changing this method to keyword arguments should not take much time - I&amp;rsquo;vealready made the change to the method above! Now we only need to change thecallers. Even if this were an urgent need to get deployed as soon as possible,it seems reasonable that we could implement this here and now should we chooseto.&lt;/p&gt;&lt;h3 id=&#34;maintenance&#34;&gt;Maintenance &lt;a href=&#34;#maintenance&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Using keyword arguments here provides two benefits to callers: readability andflexibility.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m going to intentionally obscure variable names to make a point here, butcalling our method before looked like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_calculation_results&lt;/span&gt;  calculator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Calculator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;complex_calculation(@x, @y)&lt;/span&gt;  puts result&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compare this to the keyword args approach:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_calculation_results&lt;/span&gt;  calculator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Calculator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_calculation(&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;base_price&lt;/span&gt;: @x,&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;promo_code&lt;/span&gt;: @y,&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;  )&lt;/span&gt;  puts result&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s more verbose, but subjectively, I think it&amp;rsquo;s also more readable andunderstandable.&lt;/p&gt;&lt;p&gt;It also frees us from caring about the position or order of the arguments.Calling the method this way works as well:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_calculation(    &lt;span style=&#34;color:#e6db74&#34;&gt;promo_code&lt;/span&gt;: @y,    &lt;span style=&#34;color:#e6db74&#34;&gt;base_price&lt;/span&gt;: @x,  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I would tend to believe that the clarity and flexibility gained from the keywordarguments would make it easier to maintain code that used this method. It canalso prevent against subtle bugs, where you accidentally meant to pass &lt;code&gt;@x&lt;/code&gt; as thebase price, but instead you passed &lt;code&gt;@y&lt;/code&gt; first, because you forgot which argumentshould be in what order.&lt;/p&gt;&lt;p&gt;This seems like a maintenance win!&lt;/p&gt;&lt;h3 id=&#34;consistency&#34;&gt;Consistency &lt;a href=&#34;#consistency&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Keyword arguments were added to the ruby langauge in &lt;a href=&#34;https://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/&#34;&gt;Ruby 2.0.0&lt;/a&gt;, originallyreleased in 2013. In my experience, its usage is not a surprise to mostrubyists, nor an unwelcome one. Even if someone is unfamiliar with them,understanding the basic usage of them is well-received.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll talk more about consistency at the end.&lt;/p&gt;&lt;h2 id=&#34;verdict&#34;&gt;Verdict &lt;a href=&#34;#verdict&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We have an alternative that has no identified net impact on the function of thecode, but that a team member has a stated preference for. The change would notrequire an intense lift to accommodate, nor maintain. It (subjectively) improvesreadability and can prevent against subtle errors, and it uses a languagefeature that&amp;rsquo;s been supported for many, many years.&lt;/p&gt;&lt;p&gt;In a vacuum, this suggestion seems like a net positive. Given our criteria here,we should accept this change!&lt;/p&gt;&lt;p&gt;Different changes will be evaluated against thecriteria differently, and the weighted importance of the criteria will change,but we can still use the rubric as a framework for how to make a decision.&lt;/p&gt;&lt;p&gt;For an in-depth explanation of these criteria, I recommend watching the &lt;a href=&#34;https://www.youtube.com/watch?v=2NiePLJVjNI&amp;amp;feature=youtu.be&#34;&gt;fulltalk&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;is-it-that-simple&#34;&gt;Is It That Simple? &lt;a href=&#34;#is-it-that-simple&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I said above that when considering this suggestion in isolation, it seems like anet benefit. However, this code does not exist in a vacuum. It&amp;rsquo;s part of anexisting application, and needs to fit in with the rest of the ecosystem. Ileft out any discussion of consistency with the application itself.&lt;/p&gt;&lt;p&gt;If keyword arguments aren&amp;rsquo;t used anywhere else in the application, should wereject the change because it&amp;rsquo;s inconsistent? What criteria can we use todetermine how to maintain consistency &lt;strong&gt;and&lt;/strong&gt; support change? We&amp;rsquo;ll explore thatin our &lt;a href=&#34;https://kevinjmurphy.com/posts/consistency-conundrum/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/to-change-or-not-to-change&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Wrapping Up Rails Exceptional Behavior</title>
       <link>https://kevinjmurphy.com/posts/wrapping-up-rails-exceptional-behavior/</link>
       <pubDate>Sun, 28 Mar 2021 14:15:20 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/wrapping-up-rails-exceptional-behavior/</guid>
       <description>&lt;h2 id=&#34;exceptional-behavior-in-rails&#34;&gt;Exceptional Behavior in Rails &lt;a href=&#34;#exceptional-behavior-in-rails&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/&#34;&gt;(W)rapping About Exceptional Behavior In Rails&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Wrapping Up Rails Exceptional Behavior&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;reset&#34;&gt;Reset &lt;a href=&#34;#reset&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our &lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/&#34;&gt;last post&lt;/a&gt;, weencountered some inconsistent behavior between Rails 5 and Rails 6. In Rails 5,raising a &lt;code&gt;RuntimeError&lt;/code&gt; in a controller after rescuing from an&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception was still returning a 404 HTTP statuscode. In Rails 6, the status code is a 500.&lt;/p&gt;&lt;p&gt;We looked around, and we think we&amp;rsquo;ve isolated the area of interest to be in the&lt;code&gt;ExceptionWrapper&lt;/code&gt; &lt;a href=&#34;https://github.com/rails/rails/blob/63d3f3f4d868a5ed9eacf00af2a80278aa005051/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb&#34;&gt;class&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;revisit-the-wrapper&#34;&gt;Revisit The Wrapper &lt;a href=&#34;#revisit-the-wrapper&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We looked into what was creating our wrapper and discovered that we were alwayspassing it the &lt;code&gt;RuntimeError&lt;/code&gt;. After taking a much-needed break, we startreading the code again, and, almost immediately, we see a &lt;a href=&#34;https://github.com/rails/rails/blob/63d3f3f4d868a5ed9eacf00af2a80278aa005051/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L36&#34;&gt;transformation&lt;/a&gt;:&lt;/p&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ruby{3}&#34; data-lang=&#34;ruby{3}&#34;&gt;def initialize(backtrace_cleaner, exception)  @backtrace_cleaner = backtrace_cleaner  @exception = original_exception(exception)end&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The exception that is passed in is modified. Let&amp;rsquo;s look at this&lt;code&gt;original_exception&lt;/code&gt; &lt;a href=&#34;https://github.com/rails/rails/blob/63d3f3f4d868a5ed9eacf00af2a80278aa005051/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L106-L112&#34;&gt;method&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;original_exception&lt;/span&gt;(exception)  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;has_key?(exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cause&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)    exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cause  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;    exception  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recall that our &lt;code&gt;RuntimeError&lt;/code&gt; is raised as a result of handling an&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception. The &lt;code&gt;RecordNotFound&lt;/code&gt; exception &lt;strong&gt;is&lt;/strong&gt; the&lt;a href=&#34;https://ruby-doc.org/core-3.0.0/Exception.html#method-i-cause&#34;&gt;cause&lt;/a&gt; of the &lt;code&gt;RuntimeError&lt;/code&gt;. We previously discovered that &lt;code&gt;RecordNotFound&lt;/code&gt; is added to &lt;code&gt;@@rescue_responses&lt;/code&gt; in ActiveRecord&amp;rsquo;s &lt;a href=&#34;https://github.com/rails/rails/blob/d75c2a175215c0f6d011b60f1c9f2b6466184adb/activerecord/lib/active_record/railtie.rb#L22-L27&#34;&gt;railtie&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The cause of our exception is in the hash, and as such, the &lt;strong&gt;cause&lt;/strong&gt; is set asthe &lt;code&gt;@exception&lt;/code&gt; variable in the initializer. That cause is &lt;code&gt;RecordNotFound&lt;/code&gt;,and a &lt;code&gt;RecordNotFound&lt;/code&gt; exception is supposed to return a 404 status code.&lt;/p&gt;&lt;p&gt;We can now explain why a 404 is returned!&lt;/p&gt;&lt;h2 id=&#34;regifting-rails-6-redux&#34;&gt;Regifting (Rails 6 Redux) &lt;a href=&#34;#regifting-rails-6-redux&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We now have a handle on the behavior in Rails 5; however, this investigationstarted because we noticed it was different in Rails 5 and Rails 6. Let&amp;rsquo;s checkin on the &lt;code&gt;ExceptionWrapper&lt;/code&gt; initializer in &lt;a href=&#34;https://github.com/rails/rails/blob/0440369d03ae99f9f044b00e39dcd3d9871c65c2/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L46-L48&#34;&gt;Rails 6&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(backtrace_cleaner, exception)  @backtrace_cleaner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; backtrace_cleaner  @exception &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exception&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No longer are we retrieving the &lt;code&gt;original_exception&lt;/code&gt;. That doesn&amp;rsquo;t tell thewhole story though. When we ask for the &lt;a href=&#34;https://github.com/rails/rails/blob/4c78cc8b04861f02d660aefc37979eb2244db6ba/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L62&#34;&gt;status code&lt;/a&gt;, we&amp;rsquo;re not using &lt;code&gt;@exception&lt;/code&gt;. Instead, we now have an &lt;code&gt;unwrapped_exception&lt;/code&gt; to &lt;a href=&#34;https://github.com/rails/rails/blob/4c78cc8b04861f02d660aefc37979eb2244db6ba/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L49-L55&#34;&gt;investigate&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unwrapped_exception&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; wrapper_exceptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include?(exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s)    exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cause  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;    exception  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rather than looking in &lt;code&gt;rescue_responses&lt;/code&gt;, we&amp;rsquo;re now looking in&lt;code&gt;wrapper_exceptions&lt;/code&gt;, which it appears is a &lt;a href=&#34;https://github.com/rails/rails/blob/4c78cc8b04861f02d660aefc37979eb2244db6ba/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L35-L37&#34;&gt;list&lt;/a&gt; of one exception that shouldbehave particularly exceptionally.&lt;/p&gt;&lt;p&gt;If the exception is an &lt;code&gt;ActionView::Template::Error&lt;/code&gt;, then look up the statuscode based on the cause of the exception. Otherwise, determine it based on theexception itself.&lt;/p&gt;&lt;p&gt;&lt;code&gt;RuntimeError&lt;/code&gt; isn&amp;rsquo;t in this list of &lt;code&gt;wrapper_exceptions&lt;/code&gt;, so we don&amp;rsquo;t use thecause (&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;) to determine the status code. We use the&lt;code&gt;RuntimeError&lt;/code&gt; itself. That has no special handling in &lt;code&gt;rescue_responses&lt;/code&gt;, so a500 HTTP status code is returned.&lt;/p&gt;&lt;h2 id=&#34;thank-you-card&#34;&gt;Thank You Card &lt;a href=&#34;#thank-you-card&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/rails/rails/pull/35049/commits/ef40fb6fd88f2e3c3f989aef65e3ddddfadee814&#34;&gt;commit&lt;/a&gt; that makes this change contains a very well-worded description of this scenario, including:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When the cause is mapped to an HTTP status code the last exception is unexpectedly uwrapped&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/yuki24&#34;&gt;Yuki Nishijima&lt;/a&gt; for fixing this!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/wrapping-up-rails-exceptional-behavior&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>(W)rapping About Exceptional Behavior in Rails</title>
       <link>https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/</link>
       <pubDate>Sun, 21 Mar 2021 20:24:01 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/wrapping-about-exceptional-behavior-in-rails/</guid>
       <description>&lt;h2 id=&#34;exceptional-behavior-in-rails&#34;&gt;Exceptional Behavior in Rails &lt;a href=&#34;#exceptional-behavior-in-rails&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;(W)rapping About Exceptional Behavior In Rails&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-up-rails-exceptional-behavior/&#34;&gt;Wrapping Up Rails Exceptional Behavior&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;reset&#34;&gt;Reset &lt;a href=&#34;#reset&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&#34;pop-quiz&#34;&gt;Pop Quiz &lt;a href=&#34;#pop-quiz&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Consider the following controller:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FoosController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActionController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;API&lt;/span&gt;  rescue_from &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RecordNotFound&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;with&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:raise_not_found&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RecordNotFound&lt;/span&gt;    head &lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raise_not_found&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;What status code?&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we have an endpoint that that always raises &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;.However, we&amp;rsquo;re &lt;a href=&#34;https://api.rubyonrails.org/v6.1.1/classes/ActiveSupport/Rescuable/ClassMethods.html&#34;&gt;using&lt;/a&gt;&lt;code&gt;rescue_from&lt;/code&gt; to handle this exception, and raise a new &lt;code&gt;RuntimeError&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;When you hit this controller endpoint, what status code do you expect toreceive?&lt;/p&gt;&lt;h2 id=&#34;it-depends&#34;&gt;It Depends &lt;a href=&#34;#it-depends&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In Rails 6, we get a 500.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; curl -I -X POST localhost:3000/foosHTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; Internal Server Error&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, in Rails 5, we get a 404.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; curl -I -X POST localhost:3000/foosHTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt; Not Found&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why does this difference exist? Let&amp;rsquo;s dig into how to investigate.&lt;/p&gt;&lt;h2 id=&#34;research&#34;&gt;Research &lt;a href=&#34;#research&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;ve ever hit the &lt;code&gt;#show&lt;/code&gt; route for a resource, passing it an ID that doesn&amp;rsquo;texist, you may have noticed that Rails responds with a 404 Not Found HTTP statuscode. Rails is intercepting the exception that&amp;rsquo;s raised from calling &lt;code&gt;find&lt;/code&gt;(&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;) and, rather than returning a 500, it knows toreturn a 404 instead.&lt;/p&gt;&lt;h3 id=&#34;start-with-what-you-know&#34;&gt;Start With What You Know &lt;a href=&#34;#start-with-what-you-know&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To give us some grounding, let&amp;rsquo;s begin by explicitly stating what we believe to betrue:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rails has some special handling of certain exceptions to respond with adifferent HTTP status code.&lt;/li&gt;&lt;li&gt;If we &lt;code&gt;rescue_from&lt;/code&gt; one of those exceptions in Rails 5 and re-raise a newexception, we&amp;rsquo;ll still see that special handling behavior.&lt;/li&gt;&lt;li&gt;In Rails 6, with the same implementation, the server now responds with a 500,no longer considering it a special case.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;go-explore&#34;&gt;Go Explore &lt;a href=&#34;#go-explore&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The exception that we know exhibits this behavior is&lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt;. We also know that Rails returns a 404 Not Foundstatus code. If we search through the Rails codebase for &lt;a href=&#34;https://github.com/rails/rails/search?p=1&amp;amp;q=RecordNotFound&#34;&gt;RecordNotFound&lt;/a&gt; or &lt;a href=&#34;https://github.com/rails/rails/search?p=1&amp;amp;q=not_found&#34;&gt;not_found&lt;/a&gt; (which is the &lt;a href=&#34;https://guides.rubyonrails.org/layouts_and_rendering.html#using-render&#34;&gt;symbol representation&lt;/a&gt; of the status code), we get a number of results - but there are fewer for &lt;code&gt;not_found&lt;/code&gt;, so let&amp;rsquo;s look through that.&lt;/p&gt;&lt;p&gt;Towards the bottom of the first page of results (as of this writing), we see the&lt;code&gt;ExceptionWrapper&lt;/code&gt; class, which includes &lt;a href=&#34;https://github.com/rails/rails/blob/291a3d2ef29a3842d1156ada7526f4ee60dd2b59/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L8-L24&#34;&gt;this&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;  cattr_accessor &lt;span style=&#34;color:#e6db74&#34;&gt;:rescue_responses&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Hash&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;:internal_server_error&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge!(      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::RoutingError&amp;#34;&lt;/span&gt;                     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AbstractController::ActionNotFound&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::MethodNotAllowed&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:method_not_allowed&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::UnknownHttpMethod&amp;#34;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:method_not_allowed&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::NotImplemented&amp;#34;&lt;/span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_implemented&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::UnknownFormat&amp;#34;&lt;/span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_acceptable&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionDispatch::Http::MimeNegotiation::InvalidType&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_acceptable&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::MissingExactTemplate&amp;#34;&lt;/span&gt;             &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_acceptable&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::InvalidAuthenticityToken&amp;#34;&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:unprocessable_entity&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::InvalidCrossOriginRequest&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:unprocessable_entity&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionDispatch::Http::Parameters::ParseError&amp;#34;&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::BadRequest&amp;#34;&lt;/span&gt;                       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActionController::ParameterMissing&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rack::QueryParser::ParameterTypeError&amp;#34;&lt;/span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rack::QueryParser::InvalidParameterError&amp;#34;&lt;/span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bad_request&lt;/span&gt;    )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This looks like a big list of exceptions that are mapped to HTTP status codes.This seems promising - but &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; isn&amp;rsquo;t in this hash!&lt;/p&gt;&lt;p&gt;If we search further, we will eventually run into &lt;a href=&#34;https://github.com/rails/rails/blob/d75c2a175215c0f6d011b60f1c9f2b6466184adb/activerecord/lib/active_record/railtie.rb#L22-L27&#34;&gt;ActiveRecord&amp;rsquo;s railtie&lt;/a&gt;,which includes:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;action_dispatch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge!(  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::RecordNotFound&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:not_found&lt;/span&gt;,  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::StaleObjectError&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:conflict&lt;/span&gt;,  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::RecordInvalid&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:unprocessable_entity&lt;/span&gt;,  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::RecordNotSaved&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:unprocessable_entity&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is adding ActiveRecord exceptions to that same hash we saw above in&lt;code&gt;ActionDispatch&lt;/code&gt;. We&amp;rsquo;ve found where the special handling of mapping exceptionsto status codes occurs!&lt;/p&gt;&lt;h3 id=&#34;pull-out-some-tools&#34;&gt;Pull Out Some Tools &lt;a href=&#34;#pull-out-some-tools&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Returning to the &lt;code&gt;ExceptionWrapper&lt;/code&gt; class, we see the &lt;code&gt;status_code_for_exception&lt;/code&gt; &lt;a href=&#34;https://github.com/rails/rails/blob/291a3d2ef29a3842d1156ada7526f4ee60dd2b59/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb#L117-L119&#34;&gt;method&lt;/a&gt;, which looks to take in an exception class and convert it to a status code, based on the &lt;code&gt;@@rescue_responses&lt;/code&gt; hash.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status_code_for_exception&lt;/span&gt;(class_name)  &lt;span style=&#34;color:#66d9ef&#34;&gt;Rack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code(@@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;class_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maybe if we could see what class name is getting passed into that, we could seeif the exception is somehow getting transformed before or after that point. But,we need a way to get into the rails source code on our running rails app -that&amp;rsquo;s not our code; how can we do that?&lt;/p&gt;&lt;h4 id=&#34;opening-a-world-of-possibilities&#34;&gt;&lt;code&gt;Open&lt;/code&gt;ing A World of Possibilities &lt;a href=&#34;#opening-a-world-of-possibilities&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Rails 5 appears to be showing confusing results - we&amp;rsquo;re explicitly raising a&lt;code&gt;RuntimeError&lt;/code&gt;, but it&amp;rsquo;s returning a 404. As such, let&amp;rsquo;s look in Rails 5.&lt;/p&gt;&lt;p&gt;You can &lt;a href=&#34;https://boringrails.com/tips/bundle-open-debug-gems&#34;&gt;access the source&lt;/a&gt;of any dependency using bundler&amp;rsquo;s &lt;code&gt;open&lt;/code&gt; &lt;a href=&#34;https://bundler.io/bundle_open.html&#34;&gt;command&lt;/a&gt;.Rails itself is a series of gems, and we can see that this &lt;code&gt;ExceptionWrapper&lt;/code&gt;is part of &lt;code&gt;actionpack&lt;/code&gt;, so let&amp;rsquo;s open that up:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bundle open actionpack&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will open up the source code for the &lt;code&gt;actionpack&lt;/code&gt; gem in the editor you havedefined. We open the &lt;code&gt;ExceptionWrapper&lt;/code&gt; class, and we know we want to find outwhat value is passed to it, but we&amp;rsquo;re not sure what else we might want to seewhile we&amp;rsquo;re there. Using &lt;a href=&#34;https://ruby-doc.org/stdlib-3.0.0/libdoc/irb/rdoc/Binding.html&#34;&gt;Ruby&amp;rsquo;s&lt;/a&gt; &lt;code&gt;binding.irb&lt;/code&gt;, we can &lt;a href=&#34;https://jemma.dev/blog/binding-irb&#34;&gt;start a console&lt;/a&gt; when we hit that method.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status_code_for_exception&lt;/span&gt;(class_name)  binding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;irb  &lt;span style=&#34;color:#66d9ef&#34;&gt;Rack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code(@@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;class_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After starting a rails server, and issuing a request to our endpoint via curl,we eventually hit our breakpoint:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;From&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;/ruby/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ruby&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gems&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gems&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;actionpack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;action_dispatch&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;middleware&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;exception_wrapper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rb &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt; line &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; :    &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;:         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Full Trace&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; full_trace_with_ids    &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;:       }    &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;:    &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status_code_for_exception&lt;/span&gt;(class_name) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;:       binding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;irb    &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;:       &lt;span style=&#34;color:#66d9ef&#34;&gt;Rack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code(@@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;class_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)    &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;:    &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;source_extracts&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;:       backtrace&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;trace&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;  class_name&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RuntimeError&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This isn&amp;rsquo;t surprising that we&amp;rsquo;re getting the &lt;code&gt;RuntimeError&lt;/code&gt;, but doesn&amp;rsquo;t helpexplain how we&amp;rsquo;re getting a 404 returned. Let&amp;rsquo;s exit and regroup on a newstrategy.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; exit&lt;span style=&#34;color:#66d9ef&#34;&gt;Completed&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;ms (&lt;span style=&#34;color:#e6db74&#34;&gt;ActiveRecord&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;ms)&lt;span style=&#34;color:#e6db74&#34;&gt;From&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;/ruby/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ruby&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gems&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gems&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;actionpack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;action_dispatch&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;middleware&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;exception_wrapper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rb &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt; line &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; :    &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;:         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Full Trace&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; full_trace_with_ids    &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;:       }    &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;:    &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status_code_for_exception&lt;/span&gt;(class_name) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;:       binding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;irb    &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;:       &lt;span style=&#34;color:#66d9ef&#34;&gt;Rack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code(@@rescue_responses&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;class_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)    &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;:    &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;source_extracts&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;:       backtrace&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;trace&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait! This method is called a second time. And that time, the class name is&lt;em&gt;still&lt;/em&gt; &lt;code&gt;&amp;quot;RuntimeError&amp;quot;&lt;/code&gt;. It gets called a &lt;strong&gt;third&lt;/strong&gt; time, and that time, we see:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; class_name&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ActiveRecord::RecordNotFound&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ve found our &lt;code&gt;NotFound&lt;/code&gt;! But - what do we do now?&lt;/p&gt;&lt;h3 id=&#34;calling-in-a-favor&#34;&gt;&lt;code&gt;Call&lt;/code&gt;ing In A Favor &lt;a href=&#34;#calling-in-a-favor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;re still in our console session, and we&amp;rsquo;ve executed the &lt;code&gt;status_code_for_exception&lt;/code&gt; for the third time when processing a single HTTP request. What&amp;rsquo;s calling this method? Ruby will tell us its &lt;a href=&#34;https://ruby-doc.org/core-3.0.0/Kernel.html#method-i-caller&#34;&gt;caller&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;irb(&lt;span style=&#34;color:#66d9ef&#34;&gt;ActionDispatch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;):&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; caller&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/workspace.rb:85:in `eval&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/workspace.rb:85:in `evaluate&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/context.rb:385:in `evaluate&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:493:in `block (2 levels) in eval_input&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:647:in `signal_status&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:490:in `block in eval_input&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:246:in `block (2 levels) in each_top_level_statement&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:232:in `loop&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:232:in `block in each_top_level_statement&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:231:in `catch&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb/ruby-lex.rb:231:in `each_top_level_statement&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:489:in `eval_input&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:428:in `block in run&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:427:in `catch&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:427:in `run&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/2.6.0/irb.rb:796:in `irb&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/exception_wrapper.rb:86:in `status_code_for_exception&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/exception_wrapper.rb:46:in `status_code&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/debug_exceptions.rb:105:in `render_for_browser_request&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/debug_exceptions.rb:87:in `render_exception&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/extensions.rb:28:in `render_exception_with_web_console&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/debug_exceptions.rb:71:in `rescue in call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/debug_exceptions.rb:59:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:135:in `call_app&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:30:in `block in call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:20:in `catch&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/web-console-3.7.0/lib/web_console/middleware.rb:20:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/show_exceptions.rb:33:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/railties-5.2.4.5/lib/rails/rack/logger.rb:38:in `call_app&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/railties-5.2.4.5/lib/rails/rack/logger.rb:26:in `block in call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/activesupport-5.2.4.5/lib/active_support/tagged_logging.rb:71:in `block in tagged&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/activesupport-5.2.4.5/lib/active_support/tagged_logging.rb:28:in `tagged&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/activesupport-5.2.4.5/lib/active_support/tagged_logging.rb:71:in `tagged&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/railties-5.2.4.5/lib/rails/rack/logger.rb:26:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/sprockets-rails-3.2.2/lib/sprockets/rails/quiet_assets.rb:13:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/remote_ip.rb:81:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/request_id.rb:27:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/rack-2.2.3/lib/rack/method_override.rb:24:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/rack-2.2.3/lib/rack/runtime.rb:22:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/activesupport-5.2.4.5/lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/executor.rb:14:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/actionpack-5.2.4.5/lib/action_dispatch/middleware/static.rb:127:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/rack-2.2.3/lib/rack/sendfile.rb:110:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/railties-5.2.4.5/lib/rails/engine.rb:524:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/configuration.rb:227:in `call&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/server.rb:706:in `handle_request&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/server.rb:476:in `process_client&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/server.rb:334:in `block in run&amp;#39;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ruby/2.6.6/lib/ruby/gems/2.6.0/gems/puma-3.12.6/lib/puma/thread_pool.rb:135:in `block in spawn_thread&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starting from the bottom, we can see the full path that leads us to executing&lt;code&gt;status_code_for_exception&lt;/code&gt;. Tracing our way backwards from&lt;code&gt;status_code_for_exception&lt;/code&gt;, we eventually find where the &lt;code&gt;ExceptionWrapper&lt;/code&gt; is&lt;a href=&#34;https://github.com/rails/rails/blob/63d3f3f4d868a5ed9eacf00af2a80278aa005051/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb#L78&#34;&gt;created&lt;/a&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;render_exception&lt;/span&gt;(request, exception)  backtrace_cleaner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action_dispatch.backtrace_cleaner&amp;#34;&lt;/span&gt;)  wrapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ExceptionWrapper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(backtrace_cleaner, exception)  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We drop a &lt;code&gt;binding.irb&lt;/code&gt; in here, and it looks like the exception is always our&lt;code&gt;RuntimeError&lt;/code&gt;. It looks like something inside of &lt;code&gt;ExceptionWrapper&lt;/code&gt; is doing&lt;em&gt;something&lt;/em&gt; to change this to an &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception.&lt;/p&gt;&lt;h3 id=&#34;walk-away&#34;&gt;Walk Away &lt;a href=&#34;#walk-away&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We&amp;rsquo;ve been at this for a while, and we&amp;rsquo;ve got a lead to track down, but at thispoint, let&amp;rsquo;s take a break. We should clean up our mess by &lt;a href=&#34;https://bundler.io/man/bundle-pristine.1.html&#34;&gt;restoring&lt;/a&gt;&lt;code&gt;actionpack&lt;/code&gt; back to how it was before.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bundle pristine&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take stock in what we&amp;rsquo;ve done:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identified that Rails has a list of exceptions that it maps to specific HTTPstatus codes.&lt;/li&gt;&lt;li&gt;Used &lt;code&gt;bundle open&lt;/code&gt; to manipulate the source code of our dependency.&lt;/li&gt;&lt;li&gt;Inserted a &lt;code&gt;binding.irb&lt;/code&gt; to play around in a method that we think isinteresting, and asked where it&amp;rsquo;s being invoked with &lt;code&gt;caller&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Confirmed that what&amp;rsquo;s calling our class in question is always passing it a &lt;code&gt;RuntimeError&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We still don&amp;rsquo;t know where the &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception is comingfrom.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll take another look at this with fresh eyes in our &lt;a href=&#34;https://kevinjmurphy.com/posts/wrapping-up-rails-exceptional-behavior/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/wrapping-about-exceptional-behavior-in-rails&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Engineering MBA</title>
       <link>https://kevinjmurphy.com/posts/engineering-mba/</link>
       <pubDate>Fri, 12 Mar 2021 20:30:07 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/engineering-mba/</guid>
       <description>&lt;h2 id=&#34;apply-to-graduate&#34;&gt;Apply To Graduate &lt;a href=&#34;#apply-to-graduate&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Congratulations on completing your coursework. To receive your diploma, pleasefill out the form below.&lt;/p&gt;&lt;p style=&#34;text-align: center;&#34;&gt;  &lt;a href=&#34;https://engineering-mba-diploma.herokuapp.com/&#34;)&gt;Claim Your Diploma&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6ldCGo29w5g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://youtu.be/6ldCGo29w5g&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/engineering-mba&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;curriculum&#34;&gt;Curriculum &lt;a href=&#34;#curriculum&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;situational-leadership&#34;&gt;Situational Leadership &lt;a href=&#34;#situational-leadership&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Situational_leadership_theory&#34;&gt;Situational Leadership Model&lt;/a&gt; posits that there are four different styles ofleadership.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directing - provide close, detailed supervision with clear instructions andexpectations.&lt;/li&gt;&lt;li&gt;Coaching - focus on getting buy-in from the team on explaining why decisionsare made the way they are.&lt;/li&gt;&lt;li&gt;Supporting - shift decision-making ownership to the team and facilitatediscussion amongst the team to reach decisions and provide encouragement.&lt;/li&gt;&lt;li&gt;Delegating - focus on overall vision, trusting the team with autonomy onday-to-day decision-making.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A leader must be able to exhibit all of these styles. Otherwise, they&amp;rsquo;ll only beeffective in very specific scenarios with a very specific group of people at agiven time. In order to determine which style to use at a given time, considerhow much relationship and task behavior is required by the individual or team atthe moment.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/situational-leadership.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;Consider this model when you&amp;rsquo;re in a position of leadership, or to identify whattype of leadership you or your team would benefit from at the moment. Sprintplanning exercises are an opportunity to understand how different leadershipstyles can benefit different people on a specific task.&lt;/p&gt;&lt;h3 id=&#34;competitive-advantage&#34;&gt;Competitive Advantage &lt;a href=&#34;#competitive-advantage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A firm&amp;rsquo;s &lt;a href=&#34;https://corporatefinanceinstitute.com/resources/knowledge/strategy/competitive-advantage/&#34;&gt;competitive advantage&lt;/a&gt; is the attributes that allow it to flourish against competitors. There are three general competitive &lt;a href=&#34;https://www.ifm.eng.cam.ac.uk/research/dstools/porters-generic-competitive-strategies/&#34;&gt;strategies&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cost.&lt;/li&gt;&lt;li&gt;Differentiation.&lt;/li&gt;&lt;li&gt;Focus.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;core-competency&#34;&gt;Core Competency &lt;a href=&#34;#core-competency&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A firm&amp;rsquo;s &lt;a href=&#34;http://www.personal.psu.edu/kkm11/files/HandP_Core%20Competence%20of%20the%20organization.pdf&#34;&gt;core competencies&lt;/a&gt; are the very specific set of qualities or characteristics that drive success. A core competency must meet all of the following criteria:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Provides access to various markets.&lt;/li&gt;&lt;li&gt;Contributes to perceived customer benefit.&lt;/li&gt;&lt;li&gt;Difficult for competitors to imitate.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Identification of core competencies can aid in more quickly answering your nextbuild vs. buy vs. borrow conundrum when building out a feature.&lt;/p&gt;&lt;h3 id=&#34;business-process-management&#34;&gt;Business Process Management &lt;a href=&#34;#business-process-management&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Dr. Thomas Davenport &lt;a href=&#34;https://books.google.com/books?id=kLlIOMGaKnsC&amp;amp;lpg=PP1&amp;amp;pg=PA5#v=onepage&amp;amp;q&amp;amp;f=false&#34;&gt;defines a process&lt;/a&gt; as:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;a structured, measured set of activities designed to produce a specificoutput.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The Association of Business Process Management &lt;a href=&#34;https://www.abpmp.org/page/BPM_Profession&#34;&gt;states&lt;/a&gt;that Business Process Management&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;enables an enterprise to align its business processes to its businessstrategy.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Managing and delivering iterative improvements of a &lt;a href=&#34;https://www.bpminstitute.org/resources/articles/what-bpm-anyway-business-process-management-explained&#34;&gt;business process&lt;/a&gt; involvesfollowing these cyclical steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Design - document the existing process and propose an improved future state.&lt;/li&gt;&lt;li&gt;Model - perform &amp;ldquo;what if&amp;rdquo; analysis to subject different theoreticalconstraints to the proposed future state.&lt;/li&gt;&lt;li&gt;Execute - in an automated &lt;em&gt;or&lt;/em&gt; manual fashion, roll out the future state to asmall group.&lt;/li&gt;&lt;li&gt;Monitor - track and report on key performance indicators (KPIs) to observethe impact of the change.&lt;/li&gt;&lt;li&gt;Optimize - identify current bottlenecks and feed that in to future designiterations.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;business-process-reengineering&#34;&gt;Business Process Reengineering &lt;a href=&#34;#business-process-reengineering&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://hbr.org/1990/07/reengineering-work-dont-automate-obliterate&#34;&gt;Reengineering&lt;/a&gt; is the big rewrite of processes. The process is reimagined from the ground-up, ensuring that each step in the flow directly contributes to the intended goal and adds value.&lt;/p&gt;&lt;p&gt;Much of our work as software developers involves managing processes. Whetherwe&amp;rsquo;re optimizing our individual developer workflow, or automating businessprocesses, we can follow the same methodical approach to know if we&amp;rsquo;ve succeededin improving stakeholders&#39; well-being.&lt;/p&gt;&lt;p&gt;Ensure that the ultimate focus is notpurely on solving the optimization problem - consider the impact andconsequences of the work being delivered for users of the system and thoseotherwise impacted by the decisions made by the system.&lt;/p&gt;&lt;p&gt;Dr. Hammer, credited with introducing the concept of Business ProcessReengineering, later &lt;a href=&#34;https://www.wsj.com/articles/SB848961197738163500&#34;&gt;stated&lt;/a&gt; that,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I was reflecting my engineering background and was insufficientlyappreciative of the human dimension.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Dr. Davenport, who provided our definition of a process above, also&lt;a href=&#34;https://www.fastcompany.com/26310/fad-forgot-people&#34;&gt;remarked&lt;/a&gt;,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The rock that reengineering has foundered on is simple: people.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Consider the consequences of our work. Not only for the team building thesystem, or using the system, or that uses its output. Consider the impact onsystems and individuals who are affected by the decisions your system makes whodon&amp;rsquo;t even know your system exists.&lt;/p&gt;&lt;h2 id=&#34;extra-credit-reading&#34;&gt;Extra Credit Reading &lt;a href=&#34;#extra-credit-reading&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Getting-Yes-Negotiating-Agreement-Without/dp/0143118757&#34;&gt;Getting To Yes&lt;/a&gt;: This is a seminal read on negotiation tactics. If you&amp;rsquo;ve heard of BATNA, best alternative to a negotiated agreement, this is where that comes from.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Reengineering-Corporation-Manifesto-Business-Revolution/dp/0887306403&#34;&gt;Reengineering the Corporation&lt;/a&gt;: Our coursework introduces the topic of Business Process Reengineering. If you&amp;rsquo;d like to dig in further, this is the book to pick up.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Blue-Ocean-Strategy-Expanded-Uncontested/dp/1625274491&#34;&gt;Blue Ocean Strategy&lt;/a&gt;: If you&amp;rsquo;re interested in how to explore different strategies for a successful business, I recommend reading this.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Good-Great-Some-Companies-Others/dp/0066620996/&#34;&gt;Good to Great&lt;/a&gt;: This is a fascinating dissection of the characteristics and qualities that define successful companies over the long-term.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Essentials-Business-Communication-Ellen-Guffey/dp/1337386499/&#34;&gt;Essentials of Business Communication&lt;/a&gt;: I&amp;rsquo;m only familiar with the 7th edition of this textbook, but it&amp;rsquo;s a reference I continue to use today when I need to structure a certain kind of written business report or communication.&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Engineering MBA @ RailsConf</title>
       <link>https://kevinjmurphy.com/posts/engineering-mba-railsconf/</link>
       <pubDate>Mon, 08 Mar 2021 08:12:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/engineering-mba-railsconf/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be speaking as part of RailsConf 2021, which you can join from&lt;a href=&#34;http://railsconf.com/&#34;&gt;wherever&lt;/a&gt; you are. I hope you&amp;rsquo;ll join &lt;a href=&#34;https://railsconf.com/program/sessions#session-1136&#34;&gt;my session&lt;/a&gt;and many others from April 13 - 15, 2021.&lt;/p&gt;&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Improve your work as a developer with an introduction to strategic planning,situational leadership, and process management. No balance sheets or incomestatements here; join me to learn the MBA skills valuable to developers withoutthe opportunity costs of lost wages or additional student loans.&lt;/p&gt;&lt;p&gt;Demystify the strategic frameworks your management team may use to makedecisions and learn how you can use those same concepts in your daily work.Explore the synergy one developer achieved by going to business school (sorry,the synergy comment slipped out - old habit).&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Featured in Ruby Weekly 541</title>
       <link>https://kevinjmurphy.com/posts/ruby-weekly-541/</link>
       <pubDate>Thu, 25 Feb 2021 18:20:36 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-weekly-541/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m excited to be in this week&amp;rsquo;s Ruby Weekly, &lt;a href=&#34;https://rubyweekly.com/issues/541&#34;&gt;#541&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_541.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;The article they included is a &lt;a href=&#34;https://kevinjmurphy.com/posts/querying-papertrail-object-changes-json/&#34;&gt;post&lt;/a&gt;from my employer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/querying-papertrail-object-changes-json&#34;&gt;blog&lt;/a&gt;about querying for JSON data in your database. The specific use case is usingPaperTrail&amp;rsquo;s versions to query for what changed.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Querying PaperTrail Object Changes in JSON</title>
       <link>https://kevinjmurphy.com/posts/querying-papertrail-object-changes-json/</link>
       <pubDate>Mon, 15 Feb 2021 16:47:03 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/querying-papertrail-object-changes-json/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail&#34;&gt;PaperTrail&lt;/a&gt; may be a fit foryour rails app if you&amp;rsquo;ve ever wanted help answering the question, &amp;ldquo;whatseries of events conspired to put my database in this state?&amp;rdquo; It acts as a timecapsule, storing each change made to instances of your models that you havePaperTrail turned on for.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s create a user. Unfortunately, we can&amp;rsquo;t make up our mind about whichemail to use, so we change that a few times.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;first_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kevin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;last_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Murphy&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevinfinal@example.com&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have PaperTrail set to &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail#only&#34;&gt;track changes&lt;/a&gt;made to a user&amp;rsquo;s email. Later on, we may need to do some archaeology to figureout why this user&amp;rsquo;s email address isn&amp;rsquo;t &amp;ldquo;km@example.com&amp;rdquo;. Let&amp;rsquo;s investigate howPaperTrail can help with that.&lt;/p&gt;&lt;h2 id=&#34;using-papertrails-api&#34;&gt;Using PaperTrail&amp;rsquo;s API &lt;a href=&#34;#using-papertrails-api&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PaperTrail provides a few options to &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail#3b-navigating-versions&#34;&gt;navigate&lt;/a&gt;changes made over the history of our object. We&amp;rsquo;re going to use&lt;code&gt;where_object_changes&lt;/code&gt; to figure out what happened with &amp;ldquo;km@example.com&amp;rdquo;.&lt;code&gt;where_object_changes&lt;/code&gt; will find any time the provided attributes changed to&lt;strong&gt;or&lt;/strong&gt; from the values provided.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s first find out if this user&amp;rsquo;s email ever was &amp;ldquo;km@example.com&amp;rdquo;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where_object_changes(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we know that at some point in time, this user&amp;rsquo;s email was stored as&amp;ldquo;km@example.com&amp;rdquo;. We can hone in on the changes, and specifically only look atthe email address changes.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where_object_changes(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:object_changes&lt;/span&gt;)    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) }&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;},   {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevinfinal@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Any PaperTrail Version has an &lt;code&gt;object_changes&lt;/code&gt; attribute. The value of thatattribute is a hash. The keys of that hash are the attributes that changed, andthe value is a tuple (as an array) that shows first the value that attributechanged from, and the value it changed to.&lt;/p&gt;&lt;p&gt;Here we&amp;rsquo;re finding all versions that have to do with the email address&amp;ldquo;km@example.com&amp;rdquo; and only showing the changes to the email address.&lt;/p&gt;&lt;p&gt;This first version shows that the email address changed from &amp;ldquo;kevin@example.com&amp;rdquo;to &amp;ldquo;km@example.com&amp;rdquo;. Later on, the second version shows the email addresschanging from &amp;ldquo;km@example.com&amp;rdquo; to &amp;ldquo;kevinfinal@example.com&amp;rdquo;.&lt;/p&gt;&lt;h2 id=&#34;enhanced-json-querying&#34;&gt;Enhanced JSON Querying &lt;a href=&#34;#enhanced-json-querying&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If &lt;a href=&#34;https://github.com/paper-trail-gem/paper_trail#postgresql-json-column-type-support&#34;&gt;PaperTrail versions&lt;/a&gt;are stored as JSON or JSONB in Postgres, we have some more detailed queries wecan write by digging into Postgres&#39; &lt;a href=&#34;https://www.postgresql.org/docs/9.4/functions-json.html&#34;&gt;JSON functions&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;changed&#34;&gt;Changed &lt;a href=&#34;#changed&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Sometimes we may not have an attribute value that we want to search for. We mayneed to first know when an attribute changed to anything at all. Let&amp;rsquo;s look forany time that this user&amp;rsquo;s email attribute changed.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object_changes -&amp;gt; &amp;#39;email&amp;#39; IS NOT NULL&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:object_changes&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) }&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevinfinal@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first version is logged when you initially create the row in your database,which is why it changes from the empty string to &amp;ldquo;kevin@example.com&amp;rdquo;. Fromthere, we see the additional updates to email, as all versions have changed theemail address.&lt;/p&gt;&lt;h3 id=&#34;changing-from&#34;&gt;Changing From &lt;a href=&#34;#changing-from&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While the prior query gives us &lt;em&gt;less&lt;/em&gt; specificity than PaperTrail provides with&lt;code&gt;where_object_changes&lt;/code&gt;, we may also benefit from &lt;em&gt;more&lt;/em&gt; specificity. Forexample, we may want to know when the user&amp;rsquo;s email changed from&amp;ldquo;km@example.com&amp;rdquo;, and not care about when it changed to &amp;ldquo;km@example.com&amp;rdquo;.&lt;/p&gt;&lt;p&gt;We &lt;strong&gt;can&lt;/strong&gt; use &lt;code&gt;where_object_changes&lt;/code&gt;, but to find out which changes are onlychanging the value from &amp;ldquo;km@example.com&amp;rdquo;, we&amp;rsquo;ll need to scan the resultsourselves or in memory, rather than relying on the database.&lt;/p&gt;&lt;p&gt;However, we can construct a query ourselves to tell us only when an attributechanged from a value.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object_changes -&amp;gt;&amp;gt;&amp;#39;email&amp;#39; ILIKE &amp;#39;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;km@example.com&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,%&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:object_changes&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) }&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevinfinal@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember that the object changes of an attribute are stored as a tuple in anarray. The first value in the array is the value the attribute changed from, andthe second value is the value the attribute changed to.&lt;/p&gt;&lt;p&gt;This query looks within the &lt;code&gt;object_changes&lt;/code&gt; attribute, and checks to see if thevalue of the &lt;code&gt;email&lt;/code&gt; field within that attribute has the email address we&amp;rsquo;relooking for as the first element in the tuple. The opening bracket before theemail address in escaped quotes is the start of the array/tuple.&lt;/p&gt;&lt;h3 id=&#34;changing-to&#34;&gt;Changing To &lt;a href=&#34;#changing-to&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can also construct a query to look for versions on the other side of theequation. We can find all instances where the attribute changed &lt;em&gt;to&lt;/em&gt; aparticular value.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;versions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object_changes -&amp;gt;&amp;gt;&amp;#39;email&amp;#39; ILIKE &amp;#39;[%,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;km@example.com&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;:object_changes&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) }&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kevin@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;km@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When looking for what the value changed to, we want to look in our tuple to findthe email address in question as the last element, which will be preceded by acomma and have an ending bracket after it.&lt;/p&gt;&lt;h2 id=&#34;trailing-off&#34;&gt;Trailing Off &lt;a href=&#34;#trailing-off&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Thanks to storing our PaperTrail versions in a JSON format, we were able tosneak in an applied lesson on Postgres&#39; powerful JSON functions andoperators while also reviewing the structure of data that&amp;rsquo;s used by PaperTrailto track any versions of our database records.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/querying-papertrail-object-changes-json&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Featured in Ruby Weekly</title>
       <link>https://kevinjmurphy.com/posts/ruby-weekly-539/</link>
       <pubDate>Thu, 11 Feb 2021 15:20:36 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/ruby-weekly-539/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be in this week&amp;rsquo;s Ruby Weekly, &lt;a href=&#34;https://rubyweekly.com/issues/539&#34;&gt;#539&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_539.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;The article they included is a &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;post&lt;/a&gt; from my employer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/using-sonic-pi-to-play-music-with-ruby&#34;&gt;blog&lt;/a&gt; that waspart of my self-described &amp;ldquo;Software Design Concert Series&amp;rdquo;. You can read it tolearn about how to trigger Sonic Pi from within your ruby code.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Nokogiri Notoriety</title>
       <link>https://kevinjmurphy.com/posts/nokogiri-notoriety/</link>
       <pubDate>Wed, 13 Jan 2021 18:20:36 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/nokogiri-notoriety/</guid>
       <description>&lt;p&gt;Last week, I wrote a &lt;a href=&#34;https://kevinjmurphy.com/posts/caching-all-native-gem-platforms/&#34;&gt;post&lt;/a&gt; onmy employer&amp;rsquo;s &lt;a href=&#34;https://blog.thegnar.co/caching-all-native-gem-platforms&#34;&gt;blog&lt;/a&gt;about how to set up the correct bundler configurationto support caching multiple platforms of gems. This came up with the latest Nokogirirelease, where pre-built binaries for various platforms are now available, soyou don&amp;rsquo;t need to install from source.&lt;/p&gt;&lt;p&gt;That post has been featured in Ruby Weekly &lt;a href=&#34;https://rubyweekly.com/issues/534&#34;&gt;#534&lt;/a&gt;!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/ruby_weekly_534.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;I was also humbled to receive this tweet reply from a Nokogiri maintainer:&lt;/p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;ve linked out to your post from the &amp;quot;Troubleshooting&amp;quot; section of the installation guide. Thanks again!&lt;a href=&#34;https://t.co/tG76v2bojF&#34;&gt;https://t.co/tG76v2bojF&lt;/a&gt;&lt;/p&gt;&amp;mdash; mike dalessio (@flavorjones) &lt;a href=&#34;https://twitter.com/flavorjones/status/1347195095079137285?ref_src=twsrc%5Etfw&#34;&gt;January 7, 2021&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;p&gt;In case you can&amp;rsquo;t read that, the tweet from Mike Dalessio says:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I&amp;rsquo;ve linked out to your post from the &amp;ldquo;Troubleshooting&amp;rdquo; section of the installation guide. Thanks again!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And &lt;a href=&#34;https://nokogiri.org/tutorials/installing_nokogiri.html#using-vendorcache-to-deploy-to-another-architecture&#34;&gt;here I am&lt;/a&gt;in the Nokogiri tutorials!&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;https://kevinjmurphy.com/img/nokogiri_tutorial.png&#34;/&gt;&lt;/figure&gt;&lt;p&gt;The commit adding me to the guide is &lt;a href=&#34;https://github.com/sparklemotion/nokogiri.org/commit/173ecdc110c738d0c5708934eb51d03e8e9f418d&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Thanks to Peter Cooper for featuring me in Ruby Weekly, and Mike Dalessio foradding me to Nokogiri&amp;rsquo;s guides!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Caching All Native Ruby Gem Platforms</title>
       <link>https://kevinjmurphy.com/posts/caching-all-native-gem-platforms/</link>
       <pubDate>Wed, 06 Jan 2021 12:20:07 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/caching-all-native-gem-platforms/</guid>
       <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR &lt;a href=&#34;#tldr&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Some dependencies, like nokogiri, ship with multiple libraries for differentarchitectures. If you cache your gems, you may need to cache multiple platforms,because your development team is spread across various platforms or you deployto a different platform. To do this, you can use:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;bundle cache &lt;span style=&#34;color:#75715e&#34;&gt;# cache gems in vendor/cache &lt;/span&gt;bundle lock --add-platform x86_64-linux &lt;span style=&#34;color:#75715e&#34;&gt;# add additional platforms &lt;/span&gt;bundle package --all-platforms &lt;span style=&#34;color:#75715e&#34;&gt;# cache multiple platforms &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On bundler version 1.x, add:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;bundle config specific_platform true &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;native-nokogiri&#34;&gt;Native Nokogiri &lt;a href=&#34;#native-nokogiri&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Nokogiri 1.11.0 has been released, and one of the exciting &lt;a href=&#34;https://github.com/sparklemotion/nokogiri/blob/007662fc216902a5ae186cb78b0d46f7f48b8d92/CHANGELOG.md#v1110--2021-01-03&#34;&gt;updates&lt;/a&gt;is the inclusion of pre-compiled native gems for various platforms! If you&amp;rsquo;reusing a supported platform, your days of installing nokogiri with nativeextensions may be over. These &lt;a href=&#34;https://nokogiri.org/tutorials/installing_nokogiri.html#installing-native-gems&#34;&gt;changes&lt;/a&gt;result, &amp;ldquo;in much faster installation and more reliable installation&amp;rdquo;. Manythanks to the maintainers and contributors for this great update.&lt;/p&gt;&lt;p&gt;Updating to these pre-compiled gems should be a seamless experience. Bundlerwill grab the appropriate pre-compiled &lt;code&gt;.gem&lt;/code&gt; file, if you&amp;rsquo;re on asupported version, and use that. However, if you &lt;a href=&#34;https://bundler.io/man/bundle-cache.1.html&#34;&gt;cache&lt;/a&gt;your gems, and you&amp;rsquo;d like to cache multiple platforms, you have a few moresteps to complete.&lt;/p&gt;&lt;h2 id=&#34;cache-hit&#34;&gt;Cache Hit &lt;a href=&#34;#cache-hit&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Gem dependencies can be cached along with your app and then you can use thatcache to retrieve your application&amp;rsquo;s dependencies, rather than RubyGems.We take advantage of this on a number of projects for various reasons, but themost important one that requires all gems to be vendored is that someapplications are deployed to, and the deployments are created in, environmentswhere they &lt;strong&gt;cannot&lt;/strong&gt; access &lt;a href=&#34;https://rubygems.org/&#34;&gt;RubyGems&lt;/a&gt; directly.&lt;/p&gt;&lt;p&gt;We need to tell bundler to cache our gems.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;bundle cache &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running that on an existing application will add &lt;code&gt;.gem&lt;/code&gt; files into the &lt;code&gt;vendor/cache&lt;/code&gt;&lt;a href=&#34;https://github.com/kevin-j-m/bundler_2_cache_all_platforms/commit/75c7ddb8f569e33cdd09e0ee1c4a377885318416&#34;&gt;directory&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;platform-dependence&#34;&gt;Platform Dependence &lt;a href=&#34;#platform-dependence&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You need to tell bundler that you require multiple platforms. In the case ofthis example, I&amp;rsquo;m developing on a computer running macOS, so installing nokogiriwill &lt;a href=&#34;https://github.com/kevin-j-m/bundler_2_cache_all_platforms/commit/61b73d01e929ec3b43c43ae9ea1af00df273a4b1&#34;&gt;give me&lt;/a&gt;the pre-compiled gem for that architecture. That&amp;rsquo;s great, but I also need thelinux native gem for my deployment environments.&lt;/p&gt;&lt;p&gt;First, I need to tell &lt;a href=&#34;https://bundler.io/v2.0/bundle_lock.html&#34;&gt;bundler&lt;/a&gt; toadd the platform.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;bundle lock --add-platform x86_64-linux&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After doing that, the &lt;code&gt;Gemfile.lock&lt;/code&gt; file is &lt;a href=&#34;https://github.com/kevin-j-m/bundler_2_cache_all_platforms/commit/d36495a715c26fb1f674021ffc19dc61c1787e4f&#34;&gt;updated&lt;/a&gt;to list that platform.&lt;/p&gt;&lt;h2 id=&#34;platform-independence&#34;&gt;Platform Independence &lt;a href=&#34;#platform-independence&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;However, even if you add the platform &lt;em&gt;before&lt;/em&gt; installing the dependency, addingthe platform will still not retrieve and cache both platform&amp;rsquo;s &lt;code&gt;.gem&lt;/code&gt; files.We also need to tell bundler to cache those&lt;a href=&#34;https://bundler.io/man/bundle-cache.1.html#SUPPORT-FOR-MULTIPLE-PLATFORMS&#34;&gt;other platforms&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;bundle package --all-platforms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our other platform is &lt;a href=&#34;https://github.com/kevin-j-m/bundler_2_cache_all_platforms/commit/a9ef611df04114921e71b4d8e4100894d00e2925&#34;&gt;cached&lt;/a&gt;,along with the existing platforms.&lt;/p&gt;&lt;p&gt;If you are using Bundler version 1.x, you may also need to set the&lt;code&gt;specific_platform&lt;/code&gt; configuration &lt;a href=&#34;https://github.com/rubygems/bundler/issues/5863#issuecomment-315800951&#34;&gt;setting&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;bundle config specific_platform true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you should have all your gem dependencies cached across all platformsspecified in your &lt;code&gt;Gemfile.lock&lt;/code&gt;. You no longer need to compile nokogiri!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/caching-all-native-gem-platforms&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Stringing Code Together to Play Music</title>
       <link>https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/</link>
       <pubDate>Tue, 15 Dec 2020 07:03:46 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Stringing Code Together To Play Music&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;last post&lt;/a&gt;, I talked about how I built an interface to &lt;a href=&#34;https://sonic-pi.net&#34;&gt;Sonic Pi&lt;/a&gt; whenI was preparing my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt; talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module. At theend of that post, we could send sounds to Sonic Pi. Today, we&amp;rsquo;ll have our codeplay the guitar, and send those sounds to our amplifier.&lt;/p&gt;&lt;h2 id=&#34;string-theory&#34;&gt;String Theory &lt;a href=&#34;#string-theory&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A guitar is a string instrument, and each of those strings make a sound when youplay them. For this example we&amp;rsquo;ll focus on the happy path, which is thatplucking the string plays the expected note. The code I built also considersthat strings can break, and attempting to play broken strings won&amp;rsquo;t work. Youcan look at the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar/string.rb#L20-L28&#34;&gt;full implementation&lt;/a&gt;to see how that works.&lt;/p&gt;&lt;p&gt;Plucking an individual string creates a new sound.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pluck&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;:)    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;    play_note(fret)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play_note&lt;/span&gt;(fret)    &lt;span style=&#34;color:#66d9ef&#34;&gt;StringSound&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(      &lt;span style=&#34;color:#e6db74&#34;&gt;string_number&lt;/span&gt;: @number,      &lt;span style=&#34;color:#e6db74&#34;&gt;tuning_note&lt;/span&gt;: tuning_note,      &lt;span style=&#34;color:#e6db74&#34;&gt;fret_number&lt;/span&gt;: fret,    )  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;@number&lt;/code&gt; variable is which string on the guitar it is, with index 0 beingthe low E, and index 5 being the high E, in standard tuning. The &lt;code&gt;tuning_note&lt;/code&gt;is what note that string is tuned to, because any string &lt;strong&gt;can&lt;/strong&gt; be tuned to anynote. Again, for simplicity here, we&amp;rsquo;ll assume standard tuning (EADGBE).&lt;/p&gt;&lt;p&gt;Our &lt;code&gt;StringSound&lt;/code&gt; class converts that information into the command we&amp;rsquo;ll send toSonic Pi. All notes in Sonic Pi are represented with a &lt;a href=&#34;https://sonic-pi.net/tutorial#section-2-1&#34;&gt;number&lt;/a&gt;,and we can also use &amp;ldquo;traditional&amp;rdquo; note names, passed to it as a symbol. We canuse that to figure out the note our string would play if you plucked it withoutpressing down on a fret.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringSound&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;playable_note_root&lt;/span&gt;    playable_note_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dig(@string_number, @tuning_note)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;playable_note_key&lt;/span&gt;    {      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e2&lt;/span&gt; },      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a2&lt;/span&gt; },      &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:d3&lt;/span&gt; },      &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;g&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:g3&lt;/span&gt; },      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:b3&lt;/span&gt; },      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e4&lt;/span&gt; },    }  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The number next to the note (the &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;:e2&lt;/code&gt; for the low E string) representsthe octave.&lt;/p&gt;&lt;p&gt;A helpful thing here is that the note is still a number to Sonic Pi. We can addthe fret number pressed on the string to the root note of the string and SonicPi will know what note that is.We&amp;rsquo;ll construct a Sonic Pi command to send to our &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;amplifier&lt;/a&gt;to play that note.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringSound&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amp_value&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(note(:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;playable_note_root&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) + &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;@fret_number&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is all in a string (the data type, not the part of the instrument),because we&amp;rsquo;re going to pass it to Sonic Pi via the&lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/&#34;&gt;sonic-pi-cli gem&lt;/a&gt;.This is going to execute the &lt;code&gt;note&lt;/code&gt; method in Sonic Pi to play that singletone.&lt;/p&gt;&lt;h2 id=&#34;plucking-a-single-string&#34;&gt;Plucking a Single String &lt;a href=&#34;#plucking-a-single-string&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our guitarist is interfacing with the guitar as a whole, which is &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;composed&lt;/a&gt; ofmany strings. They&amp;rsquo;ll first place their fingers on the neck of the guitar.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FingerPlacement&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:fret&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:string_number&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And pluck an individual string with that placement.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt;(finger_placement, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;finger_placement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;string_number&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: finger_placement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fret)    @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(sound_output(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;play &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;amp_value&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: duration))  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here our guitar is adding details to the command that we&amp;rsquo;ll send toSonic Pi. We have the information about the note to play from the string, butnow we want it to sound like a note from a guitar, and we&amp;rsquo;ll rely on theguitarist to say how long to play the note for (the duration).&lt;/p&gt;&lt;p&gt;We can do this in Sonic Pi by specifying the synthesizer to use when playing thenote, and we&amp;rsquo;ll choose one that sounds like a guitar.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sound_output&lt;/span&gt;(play_operation, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;with_synth :pluck do&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;play_operation&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, release: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;duration&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you wanted to play this directly in Sonic Pi&amp;rsquo;s IDE, it would look morefamiliar:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;with_synth &lt;span style=&#34;color:#e6db74&#34;&gt;:pluck&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;  play note(&lt;span style=&#34;color:#e6db74&#34;&gt;:e2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;release&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we need to package this all up in a string to then send that commandover to Sonic Pi via the sonic-pi-cli gem.&lt;/p&gt;&lt;p&gt;Our amplifier, passed in via &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;,then takes that command and sends it to Sonic Pi, producing a sound!&lt;/p&gt;&lt;h2 id=&#34;strike-a-chord&#34;&gt;Strike a Chord &lt;a href=&#34;#strike-a-chord&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Sonic Pi already knows how to play &lt;a href=&#34;https://sonic-pi.net/tutorial#section-8-2&#34;&gt;chords&lt;/a&gt;,so this could be a quick section; however, we&amp;rsquo;re going to replicate thatfunctionality a little differently. We&amp;rsquo;re doing this because of the reality Imentioned when talking about strings - and that is, they can break. If a stringis broken, the note in the chord that string would regularly play shouldn&amp;rsquo;t beheard.&lt;/p&gt;&lt;p&gt;As such, we need to go string by string to determine the notes to play. Eventhough the reasoning is to handle broken strings, we&amp;rsquo;re not going to considerthat case in this explanation. You can view the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar.rb#L23-L41&#34;&gt;fullimplementation&lt;/a&gt;to see how that&amp;rsquo;s handled.&lt;/p&gt;&lt;p&gt;We first need to know which notes we should play:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)    notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_fret),      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;second_fret),      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;third_fret),      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fourth_fret),      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fifth_fret),      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sixth_fret),    &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:amp_value&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll then take all of those notes and pass them to our amplifier, using SonicPi&amp;rsquo;s &lt;code&gt;play_pattern_timed&lt;/code&gt; &lt;a href=&#34;https://github.com/hashbangstudio/Sonic-Pi-Examples/blob/master/10-play-pattern-timed.rb&#34;&gt;method&lt;/a&gt;.This also allows us to define a time between each note, so we can place a smallamount of time in between each to simulate the time it would take your hand tocomplete a downstroke across all the strings.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)    notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[...].&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:amp_value&lt;/span&gt;)    @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(      sound_output(        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;play_pattern_timed [&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;pattern_notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], 0.05&amp;#34;&lt;/span&gt;,        &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: duration,      )    )  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The 0.05 is our amount of time it&amp;rsquo;ll take to pluck from one string to the nextwhen playing a chord.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Combining a few key software design principles, we were able to create aflexible, extensible, and testable system for playing music over the course of afew blog posts.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;re now armed with an amplifier that knows how to communicate with &lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Sonic Pi&lt;/a&gt;that&amp;rsquo;s passed in to our guitar via &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt; (but could send the notes anywhere as long as the injected class &lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;responds&lt;/a&gt; to the right methods). Our guitar is &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;composed&lt;/a&gt; of various strings, each of which are responsible for knowing what sound to make.&lt;/p&gt;&lt;p&gt;Given a songwriter who knows how to&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;consistently write&lt;/a&gt; for our band, we canplay chords and individual notes on our guitar as the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/songs/the_line_begins_to_blur.rb&#34;&gt;song&lt;/a&gt; requires.&lt;/p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GncJGXdS6R8?rel=0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;If you listen closely at :14, you can hear a string break. Even with theseprinciples in place, mistakes and errors happen. Make sure your system isprepared to handle errors in a fault-tolerant way - but that&amp;rsquo;s a different blogseries altogether. Thanks for joining me in this exploration.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/stringing-code-together-to-play-music&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Using Sonic Pi to Play Music With Ruby</title>
       <link>https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/</link>
       <pubDate>Mon, 14 Dec 2020 18:48:24 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Using Sonic Pi To Play Music With Ruby&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; moduleuses examples about playing live music. As such, I had the ambitious goal ofdelivering a live performance of some music during the presentation. This endedup getting cut for a variety of reasons (time, concern about the audio workingon the streaming platform, the reality of ambition turning into actual work todo), but I built out the structure to support this for one instrument, theguitar. This is the first of two posts that&amp;rsquo;ll describe the work that I did tosupport this.&lt;/p&gt;&lt;p&gt;First, I had to figure out if it was possible to make this happen. I wanted tohook into my existing code samples and trigger musical notes from them somehow.As such, I decided to build my first amplifier, virtually, without fear ofblowing up any capacitors.&lt;/p&gt;&lt;h2 id=&#34;parts-list&#34;&gt;Parts List &lt;a href=&#34;#parts-list&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the earlier post on &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;,I created a &lt;code&gt;PracticeAmplifier&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/practice_amplifier.rb&#34;&gt;class&lt;/a&gt;that did nothing so I could use it in tests, rather than the &amp;ldquo;regular&amp;rdquo; amplifier.&lt;/p&gt;&lt;p&gt;What the &amp;ldquo;regular&amp;rdquo; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/amplifier.rb&#34;&gt;amplifier&lt;/a&gt;does is interface with &lt;a href=&#34;https://sonic-pi.net/&#34;&gt;Sonic Pi&lt;/a&gt;, which is awesomesoftware that&amp;rsquo;ll make sound and music driven by code. Sonic Pi comes withan &lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-1-2&#34;&gt;IDE&lt;/a&gt; of sorts that you canuse to program the composition you&amp;rsquo;d like to play, and get immediate feedbackfrom hearing how your code is translated into audio. It&amp;rsquo;s a great way to losetrack of time for a night or two (or more). However, I was envisioningcontrolling my audio from the code examples directly. I didn&amp;rsquo;t want to have towork within the IDE.&lt;/p&gt;&lt;p&gt;To get around using the IDE directly, I found the &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli&#34;&gt;sonic-pi-cli&lt;/a&gt;gem. Its principal use case is to be used directly in the&lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/c4280f98edcec4de99801d013ec946cc47787932/bin/sonic_pi&#34;&gt;terminal&lt;/a&gt;.However, it&amp;rsquo;s a gem, and written in ruby, and the core functionality isavailable in a &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/c4280f98edcec4de99801d013ec946cc47787932/lib/sonic_pi.rb&#34;&gt;class&lt;/a&gt;that you can use in any of your code.&lt;/p&gt;&lt;h2 id=&#34;wiring-schematic&#34;&gt;Wiring Schematic &lt;a href=&#34;#wiring-schematic&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;With enough knowledge and conviction to be dangerous, I set out wiring up myamplifier. The CLI requires that Sonic Pi itself is running, and first ensuresit can communicate with it - and to do so, it needs to know what port thesoftware is running on. Sonic Pi used to always run on the same port; however,it has since changed to run on a &lt;a href=&#34;https://github.com/sonic-pi-net/sonic-pi/commit/d245d93c5b797ad76fa333f829c32d67480af96c&#34;&gt;dynamically-determined&lt;/a&gt; port.&lt;/p&gt;&lt;p&gt;The CLI already implemented the functionality to &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/20a18f91b4aa24de9f4b187aa20c69334ddf0329/bin/sonic_pi#L13-L33&#34;&gt;find the port&lt;/a&gt;to send to the &lt;code&gt;SonicPi&lt;/code&gt; class, so for demonstration purposes, I copied that inmy constructor.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Amplifier&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;    @port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_port    @speaker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SonicPi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(@port)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_port&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Code from sonic-pi-cli&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Needing to find the port is now something that the &lt;code&gt;SonicPi&lt;/code&gt; class can do &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/pull/23&#34;&gt;by itself&lt;/a&gt;as of version v0.2.0; however, this work preceded that.&lt;/p&gt;&lt;p&gt;The rest of the functionality in the &lt;code&gt;Amplifier&lt;/code&gt; class is now to &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;delegate&lt;/a&gt; commands to the &lt;code&gt;@speaker&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Amplifier&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;(sound)    @speaker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(sound)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Using this amplifier still requires knowing all the correct&lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-2-1&#34;&gt;commands&lt;/a&gt; to send to Sonic Pi,and Sonic Pi must be running; however, we can now trigger it to execute thesecommands from outside of its IDE. We have a way to &lt;em&gt;send&lt;/em&gt; soundout of our ruby code.&lt;/p&gt;&lt;p&gt;In our next post, we&amp;rsquo;ll take a look at how we &lt;em&gt;generate&lt;/em&gt; the sound to send froma &lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;guitar&lt;/a&gt; to an amplifier.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/using-sonic-pi-to-play-music-with-ruby&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Inheritance: Derivative Songwriting</title>
       <link>https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/</link>
       <pubDate>Thu, 10 Dec 2020 16:56:38 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Inheritance: Derivative Songwriting&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Inheritance sets up a relationship or a taxonomy between classes to allow forcode reuse. It is both a commonly reached for and commonly derided tool whichhas its place, but must be wielded with care. We&amp;rsquo;ll use inheritance to write newsongs for our concert setlist, an example which comes from my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;talk about Ruby&amp;rsquo;s&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;song-structure&#34;&gt;Song Structure &lt;a href=&#34;#song-structure&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When you create a song, it needs a name (or at least a working title) and aseries of notes. The notes may change over time, and the title may be refined,but for our purposes, we&amp;rsquo;re not calling it a song until there&amp;rsquo;s a bit more thanan empty page.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;notes&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;, name:)    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes    @name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you&amp;rsquo;re writing songs for a band or yourself, you need to be able to play thesong. In this example, our song is written for a band that has a known number ofinstruments.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For every note (representing a beat or measure of the song) each member of theband needs to play their part simultaneously. All of these instruments playingtogether note for note comprise the song.&lt;/p&gt;&lt;h2 id=&#34;on-repeat&#34;&gt;On Repeat &lt;a href=&#34;#on-repeat&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A touring band is going to play the same song &lt;strong&gt;many&lt;/strong&gt; times night after night.For each concert on the tour, the band needs to construct a setlist of all thesongs that they&amp;rsquo;ll play that night, and in what order.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Setlist&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_song&lt;/span&gt;(song)    @songs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; song  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Transcribing all the notes for each song over and over again for every concertwould be tedious and unnecessary. To save all that work, each song that couldappear in the band&amp;rsquo;s setlist is catalogued as a separate class.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;    @name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Line Begins To Blur&amp;#34;&lt;/span&gt;    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; verse_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; verse_2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; outro  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t need to accept any arguments for the name of the song or the notesbecause it&amp;rsquo;s already a fully-formed song. We&amp;rsquo;re not going to change thearrangement in the middle of the tour. However, we &lt;strong&gt;do&lt;/strong&gt; need to be able toplay the song. As such, let&amp;rsquo;s copy and paste the &lt;code&gt;play&lt;/code&gt; method as something wecan do for our specific song here.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is great because we now have a stable of songs we can pull from every nightwhen creating our setlist; however, rewriting the &lt;code&gt;play&lt;/code&gt; method in each song isnot great. If the implementation of &lt;code&gt;play&lt;/code&gt; needs to change, we need topropagate that change across every song. If we forget to add a &lt;code&gt;play&lt;/code&gt; method toone of our songs, everyone is going to look foolish when the band is staringblankly at each other, unsure of what to do.&lt;/p&gt;&lt;h2 id=&#34;composing-a-song&#34;&gt;Composing a Song &lt;a href=&#34;#composing-a-song&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Taking a note from our earlier post on&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;composition and delegation&lt;/a&gt;, we canbuild a class that&amp;rsquo;s solely responsible for playing the song.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SongPerformer&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(notes)    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of our songs can then use that performer and delegate the responsibility ofplaying to it.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SongPerformer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(@notes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have now isolated the responsibility of playing the song to one place. If weneed to change the way in which songs are played in totality, we can do so inthe &lt;code&gt;SongPerformer&lt;/code&gt; and that change will be reflected in all of our songs. Wecan even &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency inject&lt;/a&gt; the performer classinto the song, allowing us to set up different arrangements of the same song.Even with those benefits, we &lt;em&gt;do&lt;/em&gt; still have to remember to implement a &lt;code&gt;play&lt;/code&gt;method that calls our &lt;code&gt;SongPerformer&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;There is another option we can explore: inheritance.&lt;/p&gt;&lt;h2 id=&#34;playing-the-hits&#34;&gt;Playing the Hits &lt;a href=&#34;#playing-the-hits&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can leverage our existing, generic, &lt;code&gt;Song&lt;/code&gt; class and have all of our classesabout specific songs &lt;em&gt;inherit&lt;/em&gt; the behavior of the &lt;code&gt;Song&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;By doing this, our different songs don&amp;rsquo;t need to implement the &lt;code&gt;play&lt;/code&gt; method.They&amp;rsquo;ll get this behavior from &lt;code&gt;Song&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Song&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(      name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Line Begins To Blur&amp;#34;&lt;/span&gt;,      &lt;span style=&#34;color:#e6db74&#34;&gt;notes&lt;/span&gt;: verse_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; verse_2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; outro,    )  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We denote that we&amp;rsquo;re inheriting from the &lt;code&gt;Song&lt;/code&gt; class with &lt;code&gt;&amp;lt; Song&lt;/code&gt;. &lt;code&gt;Song&lt;/code&gt; isour &amp;ldquo;base class&amp;rdquo;. In our constructor, we then call &lt;code&gt;Song&lt;/code&gt;&amp;rsquo;s constructor with&lt;code&gt;super&lt;/code&gt;, passing in the title of the song and the notes that should be playedwith the song. &lt;code&gt;TheLineBeginsToBlur&lt;/code&gt; has no reference to &lt;code&gt;play&lt;/code&gt; in its classdefinition. It still responds to it because &lt;code&gt;Song&lt;/code&gt; does, and we&amp;rsquo;reinheriting all of &lt;code&gt;Song&lt;/code&gt;s behavior.&lt;/p&gt;&lt;p&gt;When we discussed composition, we mentioned Sandi Metz&amp;rsquo;s &lt;a href=&#34;https://www.poodr.com/&#34;&gt;Practical Object-Oriented Design In Ruby&lt;/a&gt;for her recommendation to use composition when modeling a &lt;em&gt;has a&lt;/em&gt; relationship.In that same section, she recommends using inheritance when you encounter an&lt;em&gt;is a&lt;/em&gt; relationship. In our case, a particular song is a &lt;strong&gt;specialized&lt;/strong&gt;version of our &lt;code&gt;Song&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;Inheritance is a common design choice in Object-Oriented languages. Specificallyin Ruby, if you&amp;rsquo;ve worked with Rails, then you&amp;rsquo;ve likely used inheritance allover the place. All of your models inherit from &lt;code&gt;ApplicationRecord&lt;/code&gt; (ultimatelyinheriting from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;) and all of your controllers inheritfrom &lt;code&gt;ApplicationController&lt;/code&gt; (ultimately inheriting from&lt;code&gt;ActionController::Base&lt;/code&gt;).&lt;/p&gt;&lt;h2 id=&#34;a-measured-approach&#34;&gt;A Measured Approach &lt;a href=&#34;#a-measured-approach&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Inheritance does come with some drawbacks. Enough that it&amp;rsquo;s commonly recommendedto avoid. You may have encountered the phrase, &amp;ldquo;prefer composition overinheritance&amp;rdquo; before. Let&amp;rsquo;s discuss why that is.&lt;/p&gt;&lt;h3 id=&#34;transparency&#34;&gt;Transparency &lt;a href=&#34;#transparency&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Inheritance makes it more difficult to know what behaviors a particular classhas. None of our song classes that inherit from &lt;code&gt;Song&lt;/code&gt; have a &lt;code&gt;play&lt;/code&gt; methodin their class definition. However, because they all inherit from &lt;code&gt;Song&lt;/code&gt;, theyall respond to &lt;code&gt;play&lt;/code&gt;. Determining that is not obvious based on a quick readingof the class.&lt;/p&gt;&lt;h3 id=&#34;limitations-of-base-class&#34;&gt;Limitations of Base Class &lt;a href=&#34;#limitations-of-base-class&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Any inheriting classes shouldn&amp;rsquo;t necessarily do things differently than how thebase class does. Of course, you &lt;em&gt;can&lt;/em&gt; do this, but it should be used veryjudiciously. We could redefine the &lt;code&gt;play&lt;/code&gt; method in a particular class - sharingthe rest of the behavior and redefining &lt;code&gt;play&lt;/code&gt; for our one-off specialexception. The issue is that these exceptions start to pile up, we end upchipping away at the commonality, and the shared understanding of what it meansto inherit from the base class gets eroded with each change that seems smallon its own.&lt;/p&gt;&lt;p&gt;For our songs, if we suddenly need to write a song for a string quartet, our&lt;code&gt;Song&lt;/code&gt; class isn&amp;rsquo;t helpful. It assumes a guitar, vocalist, drummer, andkeyboardist. While particularly in Ruby we have an out by being able to redefineany method definition, from a design perspective, we should be willing to acceptthe limitations that inheritance places on us within the scope of our domain.If those limitations cannot be respected, then consider another organizationalstructure, like composition.&lt;/p&gt;&lt;h3 id=&#34;future-inflexibility&#34;&gt;Future Inflexibility &lt;a href=&#34;#future-inflexibility&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It&amp;rsquo;s often impossible to know how your system will evolve over time. Inheritancecan lock you in to a very specific representation of how your system should bemodeled, and the assumptions that went into developing that structure may nothold true as features are needed to be added and the needs that the applicationmust serve grow.&lt;/p&gt;&lt;p&gt;This rigidity over time ends up getting pushed and strainedenough that maintaining inheritance structures becomes difficult. In myopinion, it is this long-view perspective that becomes the principal reason whyinheritance is sparsely recommended by practitioners. It can work great aslong as you have perfect knowledge about both the current and future state ofyour system. The reality is, it&amp;rsquo;s extremely rare to be in that situation.&lt;/p&gt;&lt;p&gt;In this example, our application is modeling a concert tour for one band, themembers and makeup of which &lt;strong&gt;shouldn&amp;rsquo;t&lt;/strong&gt; change throughout the course of thetour. We&amp;rsquo;ve made the bet that even if the guitarist we start the tour with isreplaced, there will still &lt;strong&gt;be&lt;/strong&gt; a guitarist, and we will not have picked up afrench horn player along the way to play two of the songs. From a practicalitystandpoint, it&amp;rsquo;s reasonable to be tied to this rigid structure of how to playeach of these songs on stage in the context of this application. However, fromthe onset, we&amp;rsquo;ve already identified one way in which this structure may comeback to haunt us.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Inheritance is often reached for as a quick and easy way to achieve code reuse.It does just that; however, it imposes limitations and constraints on your systemthat can make it more difficult or painful to change over time. Thoselimitations may be intentional and required guardrails - but often times, theyend up being factors that cause pain, tears, multiple &amp;ldquo;code spikes&amp;rdquo;, and&amp;ldquo;technical debt sprints&amp;rdquo; to allow for needed future functionality. Inheritanceshouldn&amp;rsquo;t be avoided wholesale based on this, but it should be carefully andjudiciously applied in your systems.&lt;/p&gt;&lt;p&gt;Our next post will move a little further from theory and explore how to build an&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;interface to Sonic Pi&lt;/a&gt;,so that these principles can work together to actually make sounds on yourcomputer.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/inheritance-derivative-songwriting&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Synthesizing Composition With Delegation</title>
       <link>https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/</link>
       <pubDate>Sat, 05 Dec 2020 14:00:55 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Synthesizing Composition With Delegation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Any application will be comprised of multiple components - in Object-Orientedlanguages, typically classes. Sometimes these classes even work together!External users of one of these classes may not know that behind the scenes thereare more classes working together, nor do they care. The public API does whatthey need it to, and anything else is an implementation detail. However, keepingthe specialization of these different classes apart, but using them together,is beneficial.&lt;/p&gt;&lt;p&gt;To demonstrate using composition to model a complex system and using delegationin that composition, we will explore how a synthesizer can handle memorymanagement to store presets of sounds. This example comes from my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;talk about Ruby&amp;rsquo;s&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;noise-reduction&#34;&gt;Noise Reduction &lt;a href=&#34;#noise-reduction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Synthesizer&#34;&gt;synthesizer&lt;/a&gt; is an instrumentcapable of producing a wide array of sounds. A collection of sounds and effects are known as a patch.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Patch&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:sound&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:effect&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:filter&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:oscillator&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can save these patches on the synthesizer&amp;rsquo;s memory and recall them later foreasy access.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;patch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Patch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newsynth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Synthesizer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newsynth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_patch(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:b1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;: patch)synth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_patch(patch)synth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play_key(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;save-you-the-trouble&#34;&gt;Save You the Trouble &lt;a href=&#34;#save-you-the-trouble&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Much like the actual instrument is comprised of various subcomponents, our&lt;code&gt;Synthesizer&lt;/code&gt; is made up of various classes that specialize in its area ofexpertise.&lt;/p&gt;&lt;p&gt;For example, our synthesizer above doesn&amp;rsquo;t know how to save a patch to itsonboard memory. It relies on its patch memory to handle that.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Synthesizer&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save_patch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;:)    @patch_memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;: location, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;: patch)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All the synthesizer itself knows is what &lt;em&gt;message&lt;/em&gt; to send to the memory tohave it do that. The synthesizer is &lt;strong&gt;delegating&lt;/strong&gt; the responsibility of storingthese patches to the patch memory instance.&lt;/p&gt;&lt;p&gt;Anyone playing the synthesizer does not need to be concerned with how it&amp;rsquo;sstoring these patches, just that it&amp;rsquo;s doing it. Anyone using our synthesizerclass isn&amp;rsquo;t aware that there is a separate patch memory class that thesynthesizer is using.&lt;/p&gt;&lt;p&gt;At the same time, our synthesizer doesn&amp;rsquo;t know directly how to access its memory.It relies on the &lt;code&gt;PatchMemory&lt;/code&gt; class for that, and delegates any responsibilityrelated to memory management to that class. As Sandi Metz describes in&lt;a href=&#34;https://www.poodr.com/&#34;&gt;Practical Object-Oriented Design In Ruby&lt;/a&gt;, a synthesizer&lt;em&gt;has a&lt;/em&gt; patch memory, as it &lt;em&gt;has a&lt;/em&gt; series of other parts, and those arecomposed together to deliver all the functionality that a synthesizerprovides.&lt;/p&gt;&lt;h2 id=&#34;key-benefits-to-delegation&#34;&gt;Key Benefits to Delegation &lt;a href=&#34;#key-benefits-to-delegation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Delegation provides a few important drivers that make it easier to wranglecomplex systems.&lt;/p&gt;&lt;h3 id=&#34;specialization&#34;&gt;Specialization &lt;a href=&#34;#specialization&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Our patch memory component is solely focused on interfacing with the onboardmemory of the instrument, which is where it saves and recalls stored sounds.Its tests can dig into all of the edge cases and minutiae that need to beaccounted for. The implementation can make very specific decisions so that itis extremely performant without other areas of the system needing to worryabout that.&lt;/p&gt;&lt;p&gt;A synthesizer itself is a complex system. The memory management is only onesmall part of it. The strength and value-add of our &lt;code&gt;Synthesizer&lt;/code&gt; class is inorganizing all of these components together, knowing the right messages to passto them, with a public API that doesn&amp;rsquo;t require intimate knowledge of all thosedetails. If the internals of our &lt;code&gt;Synthesizer&lt;/code&gt; class handled all of thisresponsibility itself, it would quickly become unwieldy, difficult to navigate,hard to read, a challenge to troubleshoot, a burden to test, and feared whenchanges are required.&lt;/p&gt;&lt;h3 id=&#34;flexibility--reuse&#34;&gt;Flexibility &amp;amp; Reuse &lt;a href=&#34;#flexibility--reuse&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In reality, there are many different kinds of synthesizer, all of which havedifferent capabilities. Some may be able to store 1,000 different patches onboard. Others may only have capacity for four. Still more may have expandablememory, where you can plug in a USB device for nearly infinite storage.&lt;/p&gt;&lt;p&gt;Rather than needing to create entirely different synthesizer classes to handleany of these scenarios, instead we only need to model those differences in patchmemory classes. Our synthesizer can then use any of those and still maintain therest of its functionality, without needing to duplicate it across differentclasses.&lt;/p&gt;&lt;p&gt;In this &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/synthesizer.rb#L41-L47&#34;&gt;example&lt;/a&gt;,our synthesizer changes its memory capabilities based on the brand that it is.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_memory&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @brand &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:moog&lt;/span&gt;    @patch_memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MoogPatchMemory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; @brand &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:nord&lt;/span&gt;    @patch_memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NordPatchMemory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;duck typing&lt;/a&gt;, as long as these patchmemory classes respond to the same messages, our &lt;code&gt;Synthesizer&lt;/code&gt; class can useeither of them interchangeably.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Composing classes together allows us to create a fully-functional system. Aclass that uses another class to handle a request or responsibility isdelegating that duty to the helper class. Delegation can encapsulate theknowledge of different specialties for code organization without externalconsumers needing to know or care about that implementation detail. Delegatingresponsibility to different classes can also make it easier for the system tochange, making it more likely to promote code reuse.&lt;/p&gt;&lt;p&gt;Next we&amp;rsquo;re going to play one of the greatest hits in software design:&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;inheritance&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/synthesizing-composition-with-delegation&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Shedding a Light on Duck Typing</title>
       <link>https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/</link>
       <pubDate>Thu, 03 Dec 2020 12:10:31 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Shedding a Light on Duck Typing&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Duck typing is commonly used by Rubyists and other users of dynamic languages.We&amp;rsquo;ll demonstrate duck typing by helping a concert lighting team set up thelighting for a band, which comes from my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt; talk about Ruby&amp;rsquo;s&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;stage-design&#34;&gt;Stage Design &lt;a href=&#34;#stage-design&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To light the stage for our concert, we have a wide range of lights touse.&lt;/p&gt;&lt;p&gt;We have our trusty can, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Stage_lighting_instrument#PAR_lights&#34;&gt;PAR&lt;/a&gt;, lights.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CanLight&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have &lt;a href=&#34;https://en.wikipedia.org/wiki/Stage_lighting_instrument#Spotlights&#34;&gt;spotlights&lt;/a&gt; tasked on each band member.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spotlight&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have fancy &lt;a href=&#34;https://en.wikipedia.org/wiki/Intelligent_lighting&#34;&gt;moving lights&lt;/a&gt; for versatile coverage across the stage.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MovingLight&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We even have a &lt;a href=&#34;https://en.wikipedia.org/wiki/Beam_projector&#34;&gt;beam projector&lt;/a&gt;for a more powerful spotlight effect.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BeamProjector&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What any of these lights do isn&amp;rsquo;t important here. What is key to notice is thatyou operate them all by calling the &lt;code&gt;trigger&lt;/code&gt; method.&lt;/p&gt;&lt;h2 id=&#34;a-light-touch&#34;&gt;A Light Touch &lt;a href=&#34;#a-light-touch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The stage lighting technicians, just like the band, are performers in theconcert. For every single note of every single song, they need to make sure thatthe visual aesthetic of the stage is set &lt;em&gt;just so&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;All of these lights are managed by a central controller, from which they canpower on all the lights in preparation for a show.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;    @powered_lights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turn_on_lights&lt;/span&gt;    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:beam_projector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BeamProjector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:can&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CanLight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:moving_light&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MovingLight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:spotlight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Spotlight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As I mentioned, for every note of every song, they need to make sure the lightslook exactly as they&amp;rsquo;re supposed to. This is tracked as the lighting&amp;rsquo;scomposition.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingComposition&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:light_name&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:color&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:effect&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ducking-into-lights-on-stage&#34;&gt;Ducking into Lights on Stage &lt;a href=&#34;#ducking-into-lights-on-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As the band is playing the show, the lighting technicians follow note-for-noteand need to apply the composition.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @lighting&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_lighting(note) }&lt;/span&gt;      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because each of our different lights respond to the same message (&lt;code&gt;trigger&lt;/code&gt;)with the same signature, the lighting controller doesn&amp;rsquo;t need to care, or evenknow, about which light it&amp;rsquo;s operating. All it knows is that it needs to sendit the trigger signal and apply the required composition.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_lighting&lt;/span&gt;(note)    lighting_composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lighting    trigger(@powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;lighting_composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;light_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, lighting_composition)  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(light, composition)    light&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trigger(      &lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;: composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color,      &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;: composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;effect,    )  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;LightingController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;trigger&lt;/code&gt; method is taking advantage of duck typing.Ruby doesn&amp;rsquo;t care what kind of object it&amp;rsquo;s calling in its &lt;code&gt;light&lt;/code&gt; argument. Allthat matters is that it responds to &lt;code&gt;trigger&lt;/code&gt;. We also used duck typing when wediscussed &lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;. Our guitardidn&amp;rsquo;t care how the amplifier made sound, or even if it did make sound. All thatmatters at runtime to satisfy Ruby is that the object we pass in responds to&lt;code&gt;play&lt;/code&gt; and accepts an argument.&lt;/p&gt;&lt;h2 id=&#34;static-lighting&#34;&gt;Static Lighting &lt;a href=&#34;#static-lighting&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re more familiar with static languages or different typing systems, andyou need to define common behavior for what a set of classes do, you may befamiliar with an interface. For example, let&amp;rsquo;s use Java to define an interfacefor our lights.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Light&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Color color&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; LightingEffect effect&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each of our lights would then implement this interface, defining their ownimplementation of what they do when the light is triggered.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spotlight&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Light &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Color color&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; LightingEffect effect&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Turn the light on or off&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now set our &lt;code&gt;LightingController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;trigger&lt;/code&gt; method to accept any kind oflight.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Light light&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; LightingComposition composition&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    light&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This satisfies Java&amp;rsquo;s type system, because anything that implementsthe &lt;code&gt;Light&lt;/code&gt; interface is required to respond to the &lt;code&gt;trigger&lt;/code&gt; method acceptingthose types of arguments.&lt;/p&gt;&lt;p&gt;Because of duck typing in Ruby, defining this contract and enforcing it isunnecessary. However, Ruby 3 will be &lt;a href=&#34;https://www.ruby-lang.org/en/news/2020/09/25/ruby-3-0-0-preview1-released/&#34;&gt;shipping&lt;/a&gt; with a way to define typesignatures, called &lt;a href=&#34;https://github.com/ruby/rbs&#34;&gt;RBS&lt;/a&gt;. RBS includes a mechanismto define interfaces, which you can read more about &lt;a href=&#34;https://developer.squareup.com/blog/the-state-of-ruby-3-typing/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Duck typing is a core design feature of Ruby and other dynamic languages;however, it does require a degree of trust. Because everything is determined atruntime, there&amp;rsquo;s nothing stopping you from passing in an object to a method thatdoesn&amp;rsquo;t respond to the methods it needs to. That will generate anexception, but that may be too late to get that feedback. However, to manyRubyists, the flexibility this approach provides often outweighs the cost.&lt;/p&gt;&lt;p&gt;If you&amp;rsquo;re coming from a static typing system, or desiring more direction orenforcement about what&amp;rsquo;s expected to be provided as an argument, theninvestigate defining interface types with RBS, which will be part of Ruby 3.&lt;/p&gt;&lt;p&gt;Our concert series continues with a discussion on &lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;composition and delegation&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/shedding-light-on-duck-typing&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Dependency Injection: Plug In</title>
       <link>https://kevinjmurphy.com/posts/dependency-injection-plug-in/</link>
       <pubDate>Tue, 24 Nov 2020 14:10:31 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/dependency-injection-plug-in/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Dependency Injection: Plug In&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://kevinjmurphy.com/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Dependency injection is a fancy term. It &lt;strong&gt;sounds&lt;/strong&gt; intimidating. The purpose ofthis post is to explain what dependency injection is, how to use it, and why itcan be beneficial. To illustrate, let&amp;rsquo;s talk about playing a guitar in aconcert, which comes from my &lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;RubyConf 2020&lt;/a&gt;talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;&lt;h2 id=&#34;sound-check&#34;&gt;Sound Check &lt;a href=&#34;#sound-check&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A guitarist in a band uses an amplifier when playing a live concert.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;    @amplifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the guitar is played the sound travels through the amplifier, so theaudience can hear the notes being played.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord)    chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;phrasing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;string_sound&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;      @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(string_sound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;amp_value)    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can play a great show with this setup! Your guitar uses the amplifier itdefines, and all is well. Until&amp;hellip;&lt;/p&gt;&lt;h2 id=&#34;wall-of-sound&#34;&gt;Wall of Sound &lt;a href=&#34;#wall-of-sound&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Some guitarists experiment with gear - a lot. Different amplifiers are going tomake different sounds. However, we&amp;rsquo;ve made it very difficult for our guitar tobe plugged in to different amplifiers.&lt;/p&gt;&lt;p&gt;Right now, our dependence on the amplifier class to play the sound from theguitar is hard-coded in the &lt;code&gt;Guitar&lt;/code&gt; class. The initializer sets up an explicitdependency with the &lt;code&gt;Amplifier&lt;/code&gt; class.&lt;/p&gt;&lt;p&gt;If we want to plug the guitar into a &lt;code&gt;LouderAmplifier&lt;/code&gt;, we can&amp;rsquo;t do that withoutchanging our &lt;code&gt;Guitar&lt;/code&gt; class. Every different amplifier will require a change toour &lt;code&gt;Guitar&lt;/code&gt; class.&lt;/p&gt;&lt;h2 id=&#34;plug-and-play&#34;&gt;Plug and Play &lt;a href=&#34;#plug-and-play&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can resolve this limitation by instead passing in the amplifier that&amp;rsquo;ll beused with the guitar when we make a new guitar.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(amplifier)    @amplifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; amplifier  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this small change, our &lt;code&gt;Guitar&lt;/code&gt; can work with any amplifier that respondsto the &lt;code&gt;play&lt;/code&gt; method. Rather than being coupled to the &lt;code&gt;Amplifier&lt;/code&gt; class, werequire that any users of the &lt;code&gt;Guitar&lt;/code&gt; class instead explicitly pass in thiscollaborating class. This is a form of dependency injection, specifically&lt;a href=&#34;https://martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer&#34;&gt;Constructor Injection&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;sound-engineering&#34;&gt;Sound Engineering &lt;a href=&#34;#sound-engineering&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that we&amp;rsquo;ve seen an example of what dependency injection is, let&amp;rsquo;s discusswhy we would want to use it.&lt;/p&gt;&lt;h3 id=&#34;flexibility&#34;&gt;Flexibility &lt;a href=&#34;#flexibility&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is the motivation described in the example above. By removing thehard-coded dependency as an implementation detail of our class, we can insteaduse any dependency desired, as long as it responds to the methods that we needto use within the class. For us, this means that guitars can use any amplifierthey&amp;rsquo;d like; the guitarist isn&amp;rsquo;t limited to the amp they had when first buyingthe guitar.&lt;/p&gt;&lt;h3 id=&#34;testing&#34;&gt;Testing &lt;a href=&#34;#testing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Testing may be the first situation where the value of this flexibility can beappreciated. Tests are the first consumers of your implementation, and it&amp;rsquo;simportant to listen to the implicit feedback they give you. If a class or amethod is hard to test, it very likely will be hard to use - or at least complexto understand.&lt;/p&gt;&lt;p&gt;In reality, the difficulty in testing the &lt;code&gt;Guitar&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar.rb&#34;&gt;class&lt;/a&gt;is what led to the decision to inject the amplifier in. That&amp;rsquo;s because the&lt;code&gt;Amplifier&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/amplifier.rb&#34;&gt;class&lt;/a&gt;is essentially a wrapper around &lt;a href=&#34;https://sonic-pi.net/&#34;&gt;Sonic Pi&lt;/a&gt;. Sonic Pidescribes itself as a &amp;ldquo;code-based music creation and performance tool&amp;rdquo;, soplaying the guitar with this amplifier will actually play a sound on yourcomputer.&lt;/p&gt;&lt;p&gt;As exciting as that is, I don&amp;rsquo;t want to have Sonic Pi running just to execute mytests. And even if I did, I don&amp;rsquo;t need to hear the sound it would generate everytime I run my tests. And so, I created a separate amp for testing: a&lt;code&gt;PracticeAmplifier&lt;/code&gt;. What does that amp do? &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/practice_amplifier.rb&#34;&gt;Absolutely nothing&lt;/a&gt;!And that&amp;rsquo;s perfect for my unit tests. They&amp;rsquo;re not concerned with the sound theamplifier makes when playing the guitar. They&amp;rsquo;re interested in exercising thelogic that&amp;rsquo;s within the &lt;code&gt;Guitar&lt;/code&gt; class only.&lt;/p&gt;&lt;p&gt;More generally, maybe your class is collaborating with another class that makesan API call or performs file I/O. You don&amp;rsquo;t want to have to execute or mock outthose actions in your class&amp;rsquo;s tests - it&amp;rsquo;s the collaborator&amp;rsquo;s tests that shouldbe concerned with that. You can instead pass in another class that doesn&amp;rsquo;t dothose things, providing speedy and relevant feedback in your tests.&lt;/p&gt;&lt;h3 id=&#34;complexity-identification&#34;&gt;Complexity Identification &lt;a href=&#34;#complexity-identification&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The responsibility of systems tends to grow over time. This is true not only foryour entire application, but the different components of it, down to theindividual classes or methods. As functionality continues to get added toclasses, you may need to add in more and more collaborators. If each of thesechanges are made piecemeal over time, it can be difficult to step back andrealize not only how coupled a class is to other classes, but how &lt;strong&gt;many&lt;/strong&gt;classes it&amp;rsquo;s coupled to.&lt;/p&gt;&lt;p&gt;Injecting dependencies explicitly makes it more clear &lt;em&gt;what&lt;/em&gt; this class isdependent on, and &lt;em&gt;how many&lt;/em&gt; things. As the list of things you need to pass in toa constructor or a method grows to support new features, it can serveas a proxy to gauge how complexity within the class or method is growing. Thismay exert more natural pressure to identify different abstractions orrefactorings to implement.&lt;/p&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ruby&amp;rsquo;s inherent flexibility can make dependency injection a less-likely tool toreach for, particularly if &lt;a href=&#34;https://dhh.dk/2012/dependency-injection-is-not-a-virtue.html&#34;&gt;testing&lt;/a&gt; is when you would notice that pain initially, given the &lt;a href=&#34;https://www.youtube.com/watch?v=iEfpAp2sqiw&#34;&gt;tools&lt;/a&gt; at ourdisposal to make testing interactions with dependencies easier.&lt;/p&gt;&lt;p&gt;Dependency injection is also a daunting term that often carries the assumptionthat you need a heavyweight &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection#Dependency_injection_frameworks&#34;&gt;framework&lt;/a&gt; to implement it. However, if you can pass in an object as an argument to an initializer (constructor) or even an individual method - congratulations, you&amp;rsquo;ve injected a dependency!&lt;/p&gt;&lt;p&gt;Using dependency injection can lead to less tightly-coupled code, whichallows for more flexibility in collaborating with others, reduces the burden oftesting, and makes it more clear when classes are growing to the point wheretheir current design needs to be reconsidered.&lt;/p&gt;&lt;p&gt;The next post in our series explains using &lt;a href=&#34;https://kevinjmurphy.com/posts/shedding-light-on-duck-typing/&#34;&gt;duck typing&lt;/a&gt; in ruby.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/dependency-injection-plug-in&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Explain Like I&#39;m Five</title>
       <link>https://kevinjmurphy.com/posts/explain-like-im-five/</link>
       <pubDate>Wed, 11 Nov 2020 15:38:10 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/explain-like-im-five/</guid>
       <description>&lt;h2 id=&#34;explaining-myself&#34;&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;ing Myself &lt;a href=&#34;#explaining-myself&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Running &lt;code&gt;EXPLAIN&lt;/code&gt; to show the execution plan for different database queries canhelp you understand why the performance of a particular database interactionis the way it is, and how you might be able to improve it. The purpose of thispost is not to interpret and understand the results of an execution plan.Rather, we&amp;rsquo;ll learn five different ways you can get this information from yourRails app.&lt;/p&gt;&lt;p&gt;Some of these examples are PostgreSQL-specific.&lt;/p&gt;&lt;h2 id=&#34;1-activerecords-explain-method&#34;&gt;1. ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; Method &lt;a href=&#34;#1-activerecords-explain-method&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Rails already has the &lt;code&gt;explain&lt;/code&gt; method &lt;a href=&#34;https://apidock.com/rails/ActiveRecord/Relation/explain&#34;&gt;built into&lt;/a&gt; ActiveRecord for you to use.You can add &lt;code&gt;explain&lt;/code&gt; to any ActiveRecord relation, and you&amp;rsquo;ll receive theexecution plan.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXPLAIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $1 &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;                      &lt;span style=&#34;color:#66d9ef&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PLAN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-------------------------------------------------------&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Scan&lt;/span&gt; on users  (cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;340&lt;/span&gt;)   &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: ((email)&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text)(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; rows)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us a great starting point, and works across various databases.However, if you want some additional features, like &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-explain.html&#34;&gt;running&lt;/a&gt; &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;,you&amp;rsquo;ll need to look elsewhere.&lt;/p&gt;&lt;h2 id=&#34;2-interpolating-a-query-in-an-activerecord-connection&#34;&gt;2. Interpolating a Query in an ActiveRecord Connection &lt;a href=&#34;#2-interpolating-a-query-in-an-activerecord-connection&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can fall back to creating your own SQL statement and passing that intoActiveRecord&amp;rsquo;s &lt;code&gt;execute&lt;/code&gt; method. However, you probably don&amp;rsquo;t want to go throughthe error-prone and arduous effort of hand-writing the SQL query you just wroteusing ActiveRecord&amp;rsquo;s syntax.&lt;/p&gt;&lt;p&gt;Luckily, you don&amp;rsquo;t have to! You can convert your ActiveRecord query to a string with&lt;code&gt;.to_sql&lt;/code&gt;, and add that into a string you provide to &lt;code&gt;execute&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPLAIN &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This itself isn&amp;rsquo;t much of a win at all over using ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt;method. It&amp;rsquo;s longer, you&amp;rsquo;ve got to remember to grab the &lt;code&gt;values&lt;/code&gt; from the&lt;code&gt;execute&lt;/code&gt; results, and the output isn&amp;rsquo;t as nicely formatted. However, becausethis is &amp;ldquo;just SQL&amp;rdquo; that you&amp;rsquo;re running in &lt;code&gt;execute&lt;/code&gt;, you can use any featuresyour database engine of choice provides, like &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPLAIN ANALYZE &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340) (actual time=0.184..0.233 rows=0 loops=1)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Rows Removed by Filter: 57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Planning time: 0.185 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Execution time: 0.472 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/mlodato517&#34;&gt;Mark Lodato&lt;/a&gt; for this recommendation.&lt;/p&gt;&lt;h2 id=&#34;3-the-activerecord-explain-analyze-gem&#34;&gt;3. The activerecord-explain-analyze Gem &lt;a href=&#34;#3-the-activerecord-explain-analyze-gem&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re willing to take on a dependency to get some additional explanatory power,are using ActiveRecord 4 through 6, and use PostgresSQL, thenyou can reach for the &lt;a href=&#34;https://github.com/6/activerecord-explain-analyze&#34;&gt;activerecord-explain-analyze&lt;/a&gt; gem.&lt;/p&gt;&lt;p&gt;Now you can specify the output formatting of your &lt;code&gt;EXPLAIN&lt;/code&gt; results, and call&lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain(&lt;span style=&#34;color:#e6db74&#34;&gt;analyze&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXPLAIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $1&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Scan&lt;/span&gt; on &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;users  (cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;340&lt;/span&gt;) (actual time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; loops&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#e6db74&#34;&gt;Output&lt;/span&gt;: id, email, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, created_at, updated_at, time_zone, first_name, last_name, role, applicant_id, centrify_uuid, display_name, uuid, login_authorized, invite_id, legacy_identifier, disabled_at, invite_sent_at, password_last_changed_at, deprovisioning_reason  &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: ((users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email)&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text)  &lt;span style=&#34;color:#66d9ef&#34;&gt;Rows&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Removed&lt;/span&gt; by &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;Buffers&lt;/span&gt;: shared hit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Planning&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;time&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;277&lt;/span&gt; ms&lt;span style=&#34;color:#66d9ef&#34;&gt;Execution&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;time&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt; ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-the-pg-eyeballs-gem&#34;&gt;4. The pg-eyeballs Gem &lt;a href=&#34;#4-the-pg-eyeballs-gem&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/bradurani/pg-eyeballs&#34;&gt;pg-eyeballs&lt;/a&gt; is another gem that&amp;rsquo;s PostgreSQL-specific, and provides additionalfunctionality that ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; method does not currently.&lt;/p&gt;&lt;p&gt;Our sought-after &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; is one of many options you can request:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eyeballs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain(&lt;span style=&#34;color:#e6db74&#34;&gt;options&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:analyze&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340) (actual time=0.028..0.036 rows=0 loops=1)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Rows Removed by Filter: 57&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Planning time: 0.087 ms&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Execution time: 0.084 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-terminal-cli-of-your-database&#34;&gt;5. Terminal CLI of Your Database &lt;a href=&#34;#5-terminal-cli-of-your-database&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All of these prior examples have been run from within a Rails process such as theRails console. However, we can skip Rails entirely and use our databasedirectly. In our case with PostgreSQL, we can use &lt;code&gt;psql&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# psql -U postgres&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After connecting, we can list which databases exist with &lt;code&gt;\l&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# \l&lt;/span&gt;                                              List of databases                Name                 |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges-------------------------------------+----------+----------+------------+------------+----------------------- example_app_development             | postgres | UTF8     | en_US.utf8 | en_US.utf8 |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After finding the correct database, we can connect to it with &lt;code&gt;\c&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# \c example_app_development&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then we can run any query we would like, including EXPLAIN:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;example_app_development&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# EXPLAIN SELECT * FROM USERS WHERE EMAIL = &amp;#39;test@example.com&amp;#39;;&lt;/span&gt;                      QUERY PLAN------------------------------------------------------- Seq Scan on users  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.00..2.71 rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;340&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;   Filter: &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;::text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;::text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, we have all the features available to us that our database enginesupports, so we can use &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; or any other functionality, withoutneeding it to be built into Rails. This gives us all the power our databaseprovides, but we lose the expressiveness of ActiveRecord&amp;rsquo;s query API - orrather, we need to find the &lt;code&gt;.to_sql&lt;/code&gt; representation of the query we&amp;rsquo;reinterested in prior to using this.&lt;/p&gt;&lt;h2 id=&#34;explaining-which-to-use&#34;&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;ing Which to Use &lt;a href=&#34;#explaining-which-to-use&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re interested in quickly getting an execution plan of an existingActiveRecord query, start with using ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;Should you need more functionality that your database engine provides, you can&lt;code&gt;execute&lt;/code&gt; any query you would like to your database through ActiveRecord.&lt;/p&gt;&lt;p&gt;If you need that additional functionality, such as &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;, on aregular basis, consider taking on an additional dependency that&amp;rsquo;ll provide thatfor you, such as &lt;code&gt;activerecord-explain-analyze&lt;/code&gt; or &lt;code&gt;pg-eyeballs&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Don&amp;rsquo;t forget you can go directly to your database without using Rails as anintermediary.&lt;/p&gt;&lt;p&gt;I hope this has &lt;code&gt;EXPLAIN&lt;/code&gt;ed a thing or two (or five) about ways to gather performanceinformation for your queries. Once you decide which method is right for you,good luck optimizing!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/explain-like-im-five&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Enough Coverage To Beat The Band</title>
       <link>https://kevinjmurphy.com/posts/coverage/</link>
       <pubDate>Mon, 19 Oct 2020 08:12:10 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/coverage/</guid>
       <description>&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EyLO0EEm3BQ&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://youtu.be/EyLO0EEm3BQ&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/enough-coverage-to-beat-the-band&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;code-coverage-modes&#34;&gt;Code Coverage Modes &lt;a href=&#34;#code-coverage-modes&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Each mode answers a different question about the code that was run under coverage:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lines - how many times was each line executed?&lt;/li&gt;&lt;li&gt;Oneshot Lines - which lines were executed?&lt;/li&gt;&lt;li&gt;Methods - how many times was each method executed?&lt;/li&gt;&lt;li&gt;Branches - how many times was each conditional executed?&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;lines&#34;&gt;Lines &lt;a href=&#34;#lines&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p class=&#34;float-image coverage-emoji&#34;&gt;🎸&lt;/p&gt;&lt;p&gt;This is the “classic” implementation of providing coverage. Each relevant line, that is those that aren’t things like empty lines or &lt;code&gt;end&lt;/code&gt; statements, has a counter that is incremented each time the line is visited in code execution while coverage is running. At the conclusion, you will see how many times each line is executed.&lt;/p&gt;&lt;h4 id=&#34;benefits&#34;&gt;Benefits &lt;a href=&#34;#benefits&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;This is the default mode for coverage.&lt;/li&gt;&lt;li&gt;Most of the time, this option will provide you with the information you want.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;oneshot-lines&#34;&gt;Oneshot Lines &lt;a href=&#34;#oneshot-lines&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p class=&#34;float-image coverage-emoji&#34;&gt;🎹&lt;/p&gt;&lt;p&gt;Similar to lines coverage, this also documents that a relevant line was executed while coverage was running. However, it’s a binary report of whether it was executed or not. It will not tell you how often. This may be sufficient in many cases, and comes with the benefit of being more performant every subsequent time a particular line of code is executed under coverage.&lt;/p&gt;&lt;h4 id=&#34;benefits-1&#34;&gt;Benefits &lt;a href=&#34;#benefits-1&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Oneshot provides you with nothing more than if a line of application code is executed in a test suite.&lt;/li&gt;&lt;li&gt;As long as being constrained to knowing if something ran or not, and not knowing how often, is sufficient, oneshot lines coverage provides the same feedback as lines coverage with better performance.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;methods&#34;&gt;Methods &lt;a href=&#34;#methods&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p class=&#34;float-image coverage-emoji&#34;&gt;💡&lt;/p&gt;&lt;p&gt;Methods coverage brings the granularity of lines coverage up to a coarser grain. Rather than tracking individual lines, it’s concerned with whether a particular method is executed. It can be a 10 line method where the first line is the only line ever executed. Methods coverage will still consider that as executed the same as a 20 line method where each line is executed.&lt;/p&gt;&lt;h4 id=&#34;benefits-2&#34;&gt;Benefits &lt;a href=&#34;#benefits-2&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;This has a targeted focus to be able to answer a more specific question - is this method executed? - with easier to process feedback.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;branches&#34;&gt;Branches &lt;a href=&#34;#branches&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p class=&#34;float-image coverage-emoji&#34;&gt;🎤&lt;/p&gt;&lt;p&gt;Branches coverage tracks execution of different conditional paths and documents how often those different paths are run. The unique benefit that this provides over lines coverage is in conditionals that execute multiple code paths in a single line, such as ternary statements. You may have a part of that conditional that’s never run or tested, but you wouldn&amp;rsquo;t know that if you’re relying on lines coverage alone.&lt;/p&gt;&lt;h4 id=&#34;benefits-3&#34;&gt;Benefits &lt;a href=&#34;#benefits-3&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;It provides a different frame of reference than lines coverage, which ends up being either coarser or more granular than line coverage in different situations.&lt;/li&gt;&lt;li&gt;For conditionals that lay out multiple code paths on a single line, this provides feedback on their individual execution where lines coverage only considers whether any part of the line was run.&lt;/li&gt;&lt;li&gt;When interested in conditionals, and only conditionals, it has less noise than lines coverage.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;gem-support&#34;&gt;Gem Support &lt;a href=&#34;#gem-support&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;d like to leverage existing abstractions on top of ruby&amp;rsquo;s coverage modulein your current applications, I recommend:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/simplecov-ruby/simplecov&#34;&gt;SimpleCov&lt;/a&gt; for test coverage. Itnow supports &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov#branch-coverage-ruby--25&#34;&gt;branches&lt;/a&gt; coverage!&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/danmayer/coverband&#34;&gt;Coverband&lt;/a&gt; for measuring coverage ofproduction code. Here&amp;rsquo;s an &lt;a href=&#34;https://github.com/danmayer/coverband/blob/43c5ac94febc7a961346b0e9408d829d4d2ef8ad/test/rails5_dummy/config/coverband.rb#L15&#34;&gt;example&lt;/a&gt; on how to configure it to run using oneshot lines coverage.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;supplemental-content&#34;&gt;Supplemental Content &lt;a href=&#34;#supplemental-content&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I have a series of blog posts using the live music examples I wrote for the talkto describe various software design principles. The first post is about&lt;a href=&#34;https://kevinjmurphy.com/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;.You can see the full series &lt;a href=&#34;https://kevinjmurphy.com/tags/software-design-concert-series/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;presentation-fonts&#34;&gt;Presentation Fonts &lt;a href=&#34;#presentation-fonts&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The main content of all my slides, for code examples and similar text, is Arial Narrow.&lt;/p&gt;&lt;p&gt;Slide titles and big statement fonts are The Fragile, available from &lt;a href=&#34;https://www.theninhotline.com/features/fonts/&#34;&gt;The NIN Hotline&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Supplemental content, like my twitter handle and text pointing to areasexplaining what coverage output represents are The Wretched, also available from&lt;a href=&#34;https://www.theninhotline.com/features/fonts/&#34;&gt;The NIN Hotline&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;presentation-photo-credits&#34;&gt;Presentation Photo Credits &lt;a href=&#34;#presentation-photo-credits&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All photos used in the presentation are from the band &lt;a href=&#34;https://www.nin.com/&#34;&gt;Nine Inch Nails&lt;/a&gt;, and released ontheir &lt;a href=&#34;https://www.flickr.com/photos/nineinchnails/&#34;&gt;flickr&lt;/a&gt; account with a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/2.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 2.0 Generic&lt;/a&gt; license.&lt;/p&gt;&lt;p&gt;Below I&amp;rsquo;ve embedded all the images used to link directly to their originalsource.&lt;/p&gt;&lt;h3 id=&#34;introduction&#34;&gt;Introduction &lt;a href=&#34;#introduction&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738980841/&#34; title=&#34;Nine Inch Nails Live @ Lollapalooza - Chicago, IL, 8.03.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2222/2738980841_dbc739b957_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Lollapalooza - Chicago, IL, 8.03.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639150601/&#34; title=&#34;Nine Inch Nails live @ PNC Bank Arts Center, Holmdel, NJ, 6.06.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3606/3639150601_409c17e154_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails live @ PNC Bank Arts Center, Holmdel, NJ, 6.06.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;lines-coverage&#34;&gt;Lines Coverage &lt;a href=&#34;#lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573650628/&#34; title=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2455/3573650628_75ed822d85_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573650014/&#34; title=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3340/3573650014_cf942da814_c.jpg&#34; width=&#34;500&#34; height=&#34;750&#34; alt=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722222236&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2841/10722222236_c5e6dd1150_c.jpg&#34; width=&#34;533&#34; height=&#34;800&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639160537/&#34; title=&#34;Nine Inch Nails live @ Bonnaroo Festival in Manchester, TN, 6.13.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3331/3639160537_b3f8ea5158_c.jpg&#34; width=&#34;533&#34; height=&#34;800&#34; alt=&#34;Nine Inch Nails live @ Bonnaroo Festival in Manchester, TN, 6.13.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3572799825/&#34; title=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2432/3572799825_c091e87ff3_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639938714/&#34; title=&#34;Nine Inch Nails live @ Starlight Theatre, Kansas City, MO, 5.27.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3664/3639938714_81c6079524_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails live @ Starlight Theatre, Kansas City, MO, 5.27.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;oneshot-lines-coverage&#34;&gt;Oneshot Lines Coverage &lt;a href=&#34;#oneshot-lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639113025/&#34; title=&#34;Nine Inch Nails Live @ Sasquatch Festival in George, WA, on 5.24.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2460/3639113025_dee5235b96_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails Live @ Sasquatch Festival in George, WA, on 5.24.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3032772287/&#34; title=&#34;Nine Inch Nails Live @ Bell Centre - Montreal, QC, 11.12.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3057/3032772287_517c1d7b41_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Bell Centre - Montreal, QC, 11.12.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739834768&#34; title=&#34;Nine Inch Nails Live @ Air Canada Centre - Toronto, ON, 8.05.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3252/2739834768_7d40ed685e_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Air Canada Centre - Toronto, ON, 8.05.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573642602&#34; title=&#34;Nine Inch Nails Live @ Santa Barbara Bowl - Santa Barbara, CA, 5.21.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3606/3573642602_c343bd27b4_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Santa Barbara Bowl - Santa Barbara, CA, 5.21.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3212245282&#34; title=&#34;Nine Inch Nails Live @ Razzmatazz - Barcelona, Spain, 2.19.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3463/3212245282_e1fee55ee5_z.jpg&#34; width=&#34;640&#34; height=&#34;480&#34; alt=&#34;Nine Inch Nails Live @ Razzmatazz - Barcelona, Spain, 2.19.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573605580/&#34; title=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3601/3573605580_2dafcc463c_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3211397961/&#34; title=&#34;Nine Inch Nails Live @ Olympia - Paris, France, 2.21.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3481/3211397961_2c19e04509_z.jpg&#34; width=&#34;640&#34; height=&#34;480&#34; alt=&#34;Nine Inch Nails Live @ Olympia - Paris, France, 2.21.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2827641506/&#34; title=&#34;Nine Inch Nails Live @ Seagate Convention Center - Toledo, OH, 8.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3148/2827641506_d102315760_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Seagate Convention Center - Toledo, OH, 8.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2768600347/&#34; title=&#34;Nine Inch Nails Live @ Gwinnett Arena - Duluth, GA, 8.13.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3147/2768600347_8a7059bf75_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Gwinnett Arena - Duluth, GA, 8.13.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997174649/&#34; title=&#34;Nine Inch Nails Live @ Arena Santiago - Santiago, Chile, 10.04.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3276/2997174649_c8067aa285_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Arena Santiago - Santiago, Chile, 10.04.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;methods-coverage&#34;&gt;Methods Coverage &lt;a href=&#34;#methods-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722216364&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3723/10722216364_e307c51d3b_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3572822083/&#34; title=&#34;Nine Inch Nails Live @ The Pearl - Las Vegas, NV, 5.18.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3298/3572822083_88b2ccae93_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live @ The Pearl - Las Vegas, NV, 5.18.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722275244/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3694/10722275244_34e8865f69_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722195315/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/7459/10722195315_2e3a458395_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722461283/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/5539/10722461283_68242773f4_z.jpg&#34; width=&#34;640&#34; height=&#34;424&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722293856/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/7387/10722293856_eedc277cda_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738931283/&#34; title=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2353/2738931283_2bcaac316c_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739771096/&#34; title=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2103/2739771096_6fda018740_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2826802685/&#34; title=&#34;Nine Inch Nails Live @ Q Arena - Cleveland, OH, 8.22.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3100/2826802685_f425c65f80_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Q Arena - Cleveland, OH, 8.22.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3202016537/&#34; title=&#34;Nine Inch Nails Live @ Coliseum - Lisbon, Portugal, 2.11.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3079/3202016537_6c2dd2e850_z.jpg&#34; width=&#34;480&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails Live @ Coliseum - Lisbon, Portugal, 2.11.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738948949/&#34; title=&#34;Nine Inch Nails Live @ Key Arena - Seattle, WA, 7.26.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3223/2738948949_a6e508137f_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Key Arena - Seattle, WA, 7.26.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;branches-coverage&#34;&gt;Branches Coverage &lt;a href=&#34;#branches-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3032765125/&#34; title=&#34;Nine Inch Nails Live @ DCU Center - Worcester, MA, 11.09.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3044/3032765125_0cea90d73b_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ DCU Center - Worcester, MA, 11.09.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997970466/&#34; title=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3143/2997970466_c27cdaef49_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997970974/&#34; title=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3012/2997970974_2cb4dec9ba_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739752862/&#34; title=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2307/2739752862_346b683bcb_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738913701/&#34; title=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3201/2738913701_9b991d6e95_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997202615/&#34; title=&#34;Soundcheck in Mexico City, Mexico - 10.17.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3061/2997202615_04151a1234_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Soundcheck in Mexico City, Mexico - 10.17.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3017100564/&#34; title=&#34;Nine Inch Nails Live @ House Of Blues - Atlantic City, New Jersey, 11.06.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3017/3017100564_0a48c0b815_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ House Of Blues - Atlantic City, New Jersey, 11.06.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;h3 id=&#34;closing&#34;&gt;Closing &lt;a href=&#34;#closing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639141695/&#34; title=&#34;Nine Inch Nails live @ DTE Energy Music Theatre, Clarkston, MI, 5.31.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3360/3639141695_836a8f0745_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails live @ DTE Energy Music Theatre, Clarkston, MI, 5.31.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
     </item>
   
     <item>
       <title>Enough Coverage To Beat The Band at RubyConf</title>
       <link>https://kevinjmurphy.com/posts/rubyconf-2020/</link>
       <pubDate>Wed, 16 Sep 2020 19:47:00 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubyconf-2020/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be speaking as part of RubyConf 2020, which you can join from&lt;a href=&#34;http://rubyconf.org/&#34;&gt;wherever&lt;/a&gt; you are. I hope you&amp;rsquo;ll join &lt;a href=&#34;http://rubyconf.org/program/sessions#session-1044&#34;&gt;my session&lt;/a&gt; and many others from Nov17 - 19, 2020.&lt;/p&gt;&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The lights cut out. The crowd roars. It’s time. The band takes the stage. They’ve practiced the songs, particularly the covers. They’ve sound checked the coverage of the speakers. They know the lighting rig has the proper colored gels covering the lamps. They’re nervous, but they’ve got it all covered.&lt;/p&gt;&lt;p&gt;Similarly, code coverage can give you confidence before your app performs on production and also tell you how live code is used (or not used). We’ll cover how to leverage ruby’s different coverage measurement techniques in concert to assist your crew and delight your audience.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Fake It While You Make It</title>
       <link>https://kevinjmurphy.com/posts/railsconf-2020/</link>
       <pubDate>Mon, 06 Apr 2020 20:05:03 -0400</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/railsconf-2020/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be speaking as a part of RailsConf 2020, which you can join fromthe comfort of your own &lt;a href=&#34;https://railsconf.com/&#34;&gt;couch&lt;/a&gt;! I hope you&amp;rsquo;ll join &lt;a href=&#34;https://railsconf.com/2020/video/kevin-murphy-fake-it-while-you-make-it&#34;&gt;my session&lt;/a&gt; and many otherswhen they are released on May 5, 2020.&lt;/p&gt;&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We all write code to interface with external systems, like a web service or a message queue. Can you confidently write tests without requiring the system as a dependency? How can you shield users of your code from the inner workings of the interface? Explore one attempt to answer these questions.&lt;/p&gt;&lt;p&gt;There&amp;rsquo;s no shortage of tools at your disposal to solve these problems. This talk will introduce some available options, provide guidance on when one approach may be more appropriate than another, and discuss how to use these tools together to ease the testing process.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/iEfpAp2sqiw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://youtu.be/iEfpAp2sqiw&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/testing-services&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/testing-services#testing-methods&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Coding for Fun (Not Profit)</title>
       <link>https://kevinjmurphy.com/posts/coding-for-fun-not-profit/</link>
       <pubDate>Tue, 31 Dec 2019 08:56:04 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/coding-for-fun-not-profit/</guid>
       <description>&lt;p&gt;I originally wanted to call this post &amp;ldquo;Coding for Fun &lt;del&gt;And Profit&lt;/del&gt;&amp;rdquo; with AndProfit in strikethrough, but hugo wouldn&amp;rsquo;t recognize markdown in the title of anew post, so I gave up immediately and renamed it, which is a perfectencapsulation of what I&amp;rsquo;m looking to convey here.&lt;/p&gt;&lt;h2 id=&#34;background&#34;&gt;Background &lt;a href=&#34;#background&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve been paid to write code for almost 15 years now. I think I&amp;rsquo;m decent at it,and I enjoy doing it as a profession, but it&amp;rsquo;s not something I do much of in myfree time. I&amp;rsquo;m not against people having side projects, spending their freetime how they&amp;rsquo;d like and doing whatever energizes them, but I write enough codeduring the day at work to satisfy my interests there. I&amp;rsquo;ll never get a jobsomewhere that requires an extensive personal portfolio to show as proof of&amp;ldquo;passion&amp;rdquo;. I&amp;rsquo;m comfortable with that, and privileged enough to be able to saythat.&lt;/p&gt;&lt;p&gt;Before this, I&amp;rsquo;ve also never had a personal website - ever. Sure, I maintainvarious profiles on different social networks, but I&amp;rsquo;ve never had a place of myown on the internet. I&amp;rsquo;m also probably the only Rails developer who&amp;rsquo;s nevertyped &lt;code&gt;git push heroku&lt;/code&gt; in a terminal, but that&amp;rsquo;s a different story.&lt;/p&gt;&lt;h2 id=&#34;coding-for-work&#34;&gt;Coding For Work &lt;a href=&#34;#coding-for-work&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m a pretty methodical person in general, and I take that with me to work. Itcomes in handy in this business, but as with everything, it has a cost. It takestime and effort, but my belief is that the value for my employer or clientoutweighs that cost. Some of these items include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Requirements vetting&lt;/li&gt;&lt;li&gt;Alternatives analysis&lt;/li&gt;&lt;li&gt;Automated testing, whether through TDD or not&lt;/li&gt;&lt;li&gt;Code review&lt;/li&gt;&lt;li&gt;Maintenance and upkeep of dependencies&lt;/li&gt;&lt;li&gt;Clean commit history throughout the project&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Because the results of my actions affect the overall product, my team members,and all of my business partners, I&amp;rsquo;m careful and deliberate in the work that Ido.&lt;/p&gt;&lt;h2 id=&#34;coding-for-me&#34;&gt;Coding For Me &lt;a href=&#34;#coding-for-me&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I decided to stand this site up because I had some content I wanted to maintain,and I had the blessing of my employer to do so. I needed something quick andfast that I wouldn&amp;rsquo;t need to put a lot of effort into maintaining.&lt;/p&gt;&lt;p&gt;I also wanted to try out something new, so knowing I only needed a static sitegenerator, rather than reaching for my comfortable &lt;a href=&#34;https://middlemanapp.com/&#34;&gt;Middleman&lt;/a&gt;tool, I instead gave &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt; a try. After all, it is:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The world&amp;rsquo;s fastest framework for building websites&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In doing so, I of course ran into some hiccups and problems, but what I&amp;rsquo;ll talkabout here is the process, and how this was different than how I regularly work.&lt;/p&gt;&lt;h3 id=&#34;what-goes&#34;&gt;What Goes &lt;a href=&#34;#what-goes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;alternatives--upfront-analysis&#34;&gt;Alternatives &amp;amp; Upfront Analysis &lt;a href=&#34;#alternatives--upfront-analysis&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I went with hugo on name recognition only. I didn&amp;rsquo;t even identify the corefeature set I needed or didn&amp;rsquo;t need; I just dove right in. Similarly, I could havearduously reviewed the vast number of &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt; intheir gallery to find the perfect one, or customized my own. Instead, I chosethree that seemed &amp;ldquo;fine&amp;rdquo; above the fold, and picked the one that I liked bestafter a one minute review.&lt;/p&gt;&lt;h4 id=&#34;focus&#34;&gt;Focus &lt;a href=&#34;#focus&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;When I work from home, I do so from my office, with the door closed. I controlthe environment and am particular about what noises or stimuli are present.However, this is just for me, so instead I sat down on the couch next to my wifewhile she was watching something on TV. It&amp;rsquo;s ok if it takes a bit longer, or I&amp;rsquo;ma bit distracted, as long as I&amp;rsquo;m making that trade for me and me alone.&lt;/p&gt;&lt;h3 id=&#34;what-stays&#34;&gt;What Stays &lt;a href=&#34;#what-stays&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;verification&#34;&gt;Verification &lt;a href=&#34;#verification&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Testing brings comfort to me and I dislike working without tests. It helps guidemy initial implementation, gives safety for future refactors, and providesconfidence in delivering functionality. And most of the work that I like doingthe most, and as such gravitate towards, rarely has a direct user-facingcomponent.&lt;/p&gt;&lt;p&gt;However, that&amp;rsquo;s &lt;strong&gt;all&lt;/strong&gt; that this site is. I don&amp;rsquo;t want to spend time futzingwith configurations that I don&amp;rsquo;t need to, or meddling with the theme to eek outperformance improvements, or evaluating updating, changing, or removingdependencies. But I still need to make sure it works. I spent a ton more time inthe browser than I typically do developing for work, but it&amp;rsquo;s the same process:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify a thin slice of functionality&lt;/li&gt;&lt;li&gt;Focus on implementing it&lt;/li&gt;&lt;li&gt;Document other observations for future work&lt;/li&gt;&lt;li&gt;Iterate to the next thin slice&lt;/li&gt;&lt;li&gt;Deliver&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The mechanism by which I worked that process changed (refreshing the browser vs.running a test), but the process itself stayed the same.&lt;/p&gt;&lt;h4 id=&#34;documentation&#34;&gt;Documentation &lt;a href=&#34;#documentation&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Sure, my commit messages are definitely not to the degree that I would expect,hope, or want them to be. However, that doesn&amp;rsquo;t mean that they&amp;rsquo;re worthless.Particularly on these projects where I&amp;rsquo;m moving fast, their value is more as&amp;ldquo;save points&amp;rdquo; than documentation (and I&amp;rsquo;m not cleaning them up prior to movingthem into a mainline branch), but they can still provide valuable information on&lt;em&gt;why&lt;/em&gt; a change was made.&lt;/p&gt;&lt;p&gt;Additionally, particularly because this is a project that I&amp;rsquo;m likely to berevisiting infrequently, I made sure to take the time to add a README thatincludes quick examples of all the things I&amp;rsquo;m going to want to do. For thisproject, that includes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Creating a new post.&lt;/li&gt;&lt;li&gt;Running the server locally.&lt;/li&gt;&lt;li&gt;Deploying the changes (which there&amp;rsquo;s a script for).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Because&lt;/em&gt; it&amp;rsquo;s something I won&amp;rsquo;t touch day-to-day, it&amp;rsquo;s even &lt;strong&gt;more&lt;/strong&gt; importantto take the few minutes to document those quick commands to save myself the timeof needing to search for it every time that I want to edit this.&lt;/p&gt;&lt;h3 id=&#34;what-emerges&#34;&gt;What Emerges &lt;a href=&#34;#what-emerges&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;quick-assessment-of-good-enough&#34;&gt;Quick Assessment of &amp;ldquo;Good Enough&amp;rdquo; &lt;a href=&#34;#quick-assessment-of-good-enough&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;There&amp;rsquo;s always an ideal version of what you&amp;rsquo;re looking to accomplish. Thatlikely manifests itself both in the code itself, as well as the user-facingproduct. And we all want to hit that ideal; however, it&amp;rsquo;s not always feasible.And while I work diligently to reach that at work, I also do my best to bepragmatic about at least explaining the implications of getting to that ideal,presenting that to the decision-makers, and working with them to come to anagreement on how to proceed.&lt;/p&gt;&lt;p&gt;However, in this example, my goal was speed and speed alone. For example, I hada post to add which had some images that I wanted formatted just so. I couldn&amp;rsquo;tfigure out exactly how to position or size them to my liking. I think fromsearching for about 30 minutes I could have gotten there by having the images as&lt;a href=&#34;https://gohugo.io/content-management/page-resources/&#34;&gt;page resources&lt;/a&gt;, then usinghugo&amp;rsquo;s &lt;a href=&#34;https://gohugo.io/content-management/image-processing/&#34;&gt;image processing&lt;/a&gt;,and having those available in a &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;shortcode&lt;/a&gt;that I reference in my post.&lt;/p&gt;&lt;p&gt;I could have done that, but instead - I deleted the images. They weren&amp;rsquo;ttremendously important to the post. They certainly made things look nicer, butthey didn&amp;rsquo;t provide any explanatory value. So I removed them, and freed myselfof the problem. And the page doesn&amp;rsquo;t look exactly how I wanted it to, but it&amp;rsquo;sdone. And if I feel the need to scratch that itch in the future, I know where tostart.&lt;/p&gt;&lt;p&gt;Remember the context under which you&amp;rsquo;re developing, who the decision-makers are,and what choices you should make based on that. But work to know what you&lt;strong&gt;aren&amp;rsquo;t&lt;/strong&gt; willing to give up in your process, regardless of the context.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Diffin&#39; Dots</title>
       <link>https://kevinjmurphy.com/posts/diffin-dots/</link>
       <pubDate>Mon, 30 Dec 2019 21:04:53 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/diffin-dots/</guid>
       <description>&lt;h2 id=&#34;a-sweet-surprise&#34;&gt;A Sweet Surprise &lt;a href=&#34;#a-sweet-surprise&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Recently, a project needed to re-order some commits on a git branch. Weinitially performed this interactive rebase on a separate branch, so we didn&amp;rsquo;tmake a mistake on the original branch. After performing that rebase, we thenused Github&amp;rsquo;s &lt;a href=&#34;https://help.github.com/en/github/committing-changes-to-your-project/comparing-commits-across-time#comparing-branches&#34;&gt;compare view&lt;/a&gt;, expecting to see no files changed.&lt;/p&gt;&lt;p&gt;Instead, what we saw was every change that was introduced in all of the commitsthat were reordered on the new branch. This very much surprised us. We made nofunctional changes and were expecting to use this comparison as proof that wedidn&amp;rsquo;t accidentally drop a commit or do something terrible on accident.&lt;/p&gt;&lt;p&gt;We then looked to compare the branches locally. When we did that, we saw nodiff.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;⇒ diff-test|reorder git diff master&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Did we find a bug in Github? Did our re-ordering work? At this point, we had noidea.&lt;/p&gt;&lt;h2 id=&#34;read-the-recipe&#34;&gt;Read The Recipe &lt;a href=&#34;#read-the-recipe&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We dug into the documentation for &lt;code&gt;diff&lt;/code&gt;, a tool I use frequently,but don&amp;rsquo;t spend much time considering how it works.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s read some of the help on how to use the diff tool:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;⇒ git diff --helpGIT-DIFF&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                                      Git Manual                                      GIT-DIFF&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;...       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;           This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;.           You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip           of a different branch.       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;           This is to view the changes between two arbitrary &amp;lt;commit&amp;gt;.       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;           This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the           same effect as using HEAD instead.       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;...&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;           This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting           at a common ancestor of both &amp;lt;commit&amp;gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Almost exclusively I&amp;rsquo;ve used diff in the form of &lt;code&gt;git diff other-ref&lt;/code&gt;. Andwith that, I would see what, if any, file changes occurred between those twobranches or commits. This is the two-dot comparison. However, Github uses the&lt;a href=&#34;https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-comparing-branches-in-pull-requests#three-dot-and-two-dot-git-diff-comparisons&#34;&gt;three-dot comparison&lt;/a&gt;by default.&lt;/p&gt;&lt;p&gt;In this scenario, the common ancestor is the latest commit on the reorderingbranch that wasn&amp;rsquo;t reordered. After the rebase, all of those reordered commitshave different SHAs, so are seen as different commits. As such, using thethree-dot option, git considers all of those SHAs as different or new, so all ofthem show as changes, even though there are no differences in the file contentsthemselves.&lt;/p&gt;&lt;h2 id=&#34;homemade-flavor&#34;&gt;Homemade Flavor &lt;a href=&#34;#homemade-flavor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s look at demonstrating this behavior entirely locally.&lt;/p&gt;&lt;h3 id=&#34;setup&#34;&gt;Setup &lt;a href=&#34;#setup&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;First, let&amp;rsquo;s create a new repository:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;⇒ mkdir diff-test⇒ cd diff-testdiff-test|⇒ git init .Initialized empty Git repository&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll start by adding a few new files, and making the first commit:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creamy Vanilla Ice Cream done Dippin’ Dots style&amp;#34;&lt;/span&gt; &amp;gt; vanilla.txtdiff-test|master⚡ ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creamy Milk Chocolate Ice Cream.  Someone pass the spoon&amp;#34;&lt;/span&gt; &amp;gt; chocolate.txtdiff-test|master⚡ ⇒ git add --alldiff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IFO: initial flavor offering&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will then add two more commits with some additional changes:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dippin&amp;#39; Dots Strawberry Ice Cream is as sweet as a summer&amp;#39;s day and so berry, berry good&amp;#34;&lt;/span&gt; &amp;gt; strawberry.txtdiff-test|master⚡ ⇒ git add --alldiff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introducing strawberry&amp;#34;&lt;/span&gt;diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Orange Flavored Ice&amp;#34;&lt;/span&gt; &amp;gt; orange.txtdiff-test|master⚡ ⇒ git add --alldiff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introducing orange&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;introduce-a-change&#34;&gt;Introduce a change &lt;a href=&#34;#introduce-a-change&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;At this point, we realize that it&amp;rsquo;s important to us that orange be introduced inour history before strawberry.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s create a new branch to address this, and look at the current order of thecommits:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|master ⇒ git checkout -b reorderSwitched to a new branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reorder&amp;#39;&lt;/span&gt;diff-test|reorder ⇒ git log --onelinee378256 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; reorder, master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Introducing orangef455e5b Introducing strawberrye42566b IFO: initial flavor offering&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will then perform an interactive rebase, going back two commits in history.During that rebase, we will switch the order of orange and strawberry, so orangeis first, as we need it:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git rebase -i HEAD~2pick e378256 Introducing orangepick f455e5b Introducing strawberry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After performing the rebase, here is the order of our commits:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git log --oneline5fa36f4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; reorder&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Introducing strawberry7a1d500 Introducing orangee42566b IFO: initial flavor offering&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Congratulations! We&amp;rsquo;ve done what we set out to do, performing a rebase toreorder our commits. Now let&amp;rsquo;s compare that to our original branch to make sureeverything looks to be as we&amp;rsquo;d expect.&lt;/p&gt;&lt;h3 id=&#34;differences&#34;&gt;&lt;code&gt;diff&lt;/code&gt;erences &lt;a href=&#34;#differences&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We start by comparing this branch to the original branch:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git diff master&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see that there&amp;rsquo;s no difference, which we&amp;rsquo;re expecting and hoping for. Nofiles changed, no functionality is different; only the history has changed.&lt;/p&gt;&lt;p&gt;If we diff using the two-dot version, we see the same result:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git diff master..reorder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That sounds right, because according to the documentation, the two-dot usage isthe same as not providing dots:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;          This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the          same effect as using HEAD instead.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly, let&amp;rsquo;s perform a three-dot diff:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git diff master...reorderdiff --git a/orange.txt b/orange.txtnew file mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;index 0000000..09d8732--- /dev/null+++ b/orange.txt@@ -0,0 +1 @@+Orange Flavored Icediff --git a/strawberry.txt b/strawberry.txtnew file mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;index 0000000..6ab358d--- /dev/null+++ b/strawberry.txt@@ -0,0 +1 @@+Dippin&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; Dots Strawberry Ice Cream is as sweet as a summer&amp;#39;&lt;/span&gt;s day and so berry, berry good&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is where we see that it looks like each of those files have been changed asa result of this rebase. However, the files themselves &lt;strong&gt;haven&amp;rsquo;t&lt;/strong&gt; changed. Whathas is the commits themselves. Their common ancestor is the initial commit ofthe repository, so everything that happened since then shows as a difference.&lt;/p&gt;&lt;h2 id=&#34;the-cherry-on-top&#34;&gt;The Cherry On Top &lt;a href=&#34;#the-cherry-on-top&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Locally, unless you tell git otherwise, &lt;code&gt;diff&lt;/code&gt; will show you the file changedifferences between your comparisons. Github by default will show you thechanges from the common ancestor between what&amp;rsquo;s changed.&lt;/p&gt;&lt;p&gt;Most of the time, this different behavior won&amp;rsquo;t or shouldn&amp;rsquo;t matter in thecourse of your workflow. However, if you&amp;rsquo;re doing something a bit moreadventurous, or perhaps ill-advised, knowing how git will, by default, comparechanges locally and how Github, by default, will surface those changes can beparamount.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/diffin-dots&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;</description>
     </item>
   
     <item>
       <title>Don’t Hang Me Out To DRY</title>
       <link>https://kevinjmurphy.com/posts/rubyconf-2019/</link>
       <pubDate>Mon, 30 Dec 2019 20:57:49 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/rubyconf-2019/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Close your eyes and imagine the perfect codebase to work on. I bet you’ll say it has complete test coverage. It’s fully-optimized, both in terms of performance and architectural design. And, of course, it contains only DRY code. Surely we can all agree that this is an aspirational situation. But&amp;hellip;do we &lt;strong&gt;really&lt;/strong&gt; want that?&lt;/p&gt;&lt;p&gt;Don’t get me wrong; these qualities are all beneficial. However, if we also think we should value everything in moderation, when should we push back on these ideals? What problems can they introduce? Let’s talk about the exceptions to some of the “rules” we all hold dear.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/b960MApGA7A&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=b960MApGA7A&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/dont-hang-me-out-to-dry&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ivory-tower&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ivory-tower#code-examples&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;common-guiding-principles&#34;&gt;Common Guiding Principles &lt;a href=&#34;#common-guiding-principles&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Full test coverage, DRY code, and optimized code are all incredibly valuable, and we, as craftspeople, are better off for having them overall. But when should we push back on these ideals? What problems can they introduce?&lt;/p&gt;&lt;h3 id=&#34;code-coverage&#34;&gt;Code Coverage &lt;a href=&#34;#code-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Code coverage provides a valuable signal about the extent to which some code is tested, but it is not sufficient for a quality metric. 100% test coverage does not mean all code paths are fully exercised, just that all lines are hit at least once in the execution of the test suite. An application with 100% test coverage can still have bugs and can still have sections of code that don&amp;rsquo;t have all scenarios tested. Additionally, testing every line of code has a cost that is felt initially in the time to conceive of the tests and the test strategy. However, the larger costs are felt over time if it leads to a long test suite run time, flakey or inconsistent tests, and a large suite that needs to be continually maintained as both the technologies and requirements of the application change.&lt;/p&gt;&lt;h3 id=&#34;dry-code&#34;&gt;DRY Code &lt;a href=&#34;#dry-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;DRY code helps to ensure you don&amp;rsquo;t have to make a change in multiple places when the way the system should work changes; instead, everything is in the isolated abstraction. However, not repeating yourself can lead to premature optimizations or abstractions that end up saddling the codebase with a difficult-to-change architecture when it’s discovered that use cases aren’t as similar as initially thought. Certainly reach for design patterns and well-known architectural principles when the opportunity presents itself. But, consider how one might back out of such an introduction should it turn out that the choice was premature - or hold off on introducing it entirely until it’s more clear or there’s sufficient churn in that area of the codebase to warrant the attention.&lt;/p&gt;&lt;h3 id=&#34;performant-code&#34;&gt;Performant Code &lt;a href=&#34;#performant-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Performant code is objectively better than non-performant code, right? As always, the answer is, &amp;ldquo;maybe.&amp;rdquo; Code that is preemptively performance-tuned may or may not be necessary or accurate. Without the data and benchmarking, under load, to illustrate the performance impact, any improvements made in service of performance are done so based on conjecture. This could lead to unnecessary time in developing the believed performance benefit or may even introduce subtle bugs.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>I Know I Can, But Should I?</title>
       <link>https://kevinjmurphy.com/posts/railsconf-2019/</link>
       <pubDate>Mon, 30 Dec 2019 17:40:50 -0500</pubDate>
       
       <guid>https://kevinjmurphy.com/posts/railsconf-2019/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You &lt;strong&gt;can&lt;/strong&gt; use a hammer to drive a screw into wood, but I’d recommend a screwdriver. Why? And when is a hammer the better option? This talk will propose a framework to use when comparing alternative technical choices. I won’t decide for you, but will leave you with a structure to apply in your decision-making process.&lt;/p&gt;&lt;p&gt;The ruby toolbox is vast. While Rails provides a default experience, it leaves plenty of room for alternatives. In learning how to do something, you may uncover different ways to accomplish the same goal. Determine which tool fits best in your situation with these lessons.&lt;/p&gt;&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2NiePLJVjNI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2NiePLJVjNI&amp;amp;feature=youtu.be&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/i-know-i-can-but-should-i-evaluating-alternatives&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/evaluating-alternatives&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/evaluating-alternatives#code-examples&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;evaluating-gnarly-alternatives&#34;&gt;Evaluating Gnarly Alternatives &lt;a href=&#34;#evaluating-gnarly-alternatives&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At &lt;a href=&#34;https://www.thegnar.co/&#34;&gt;The Gnar Company&lt;/a&gt;, learning about our client’s needs and providing solutions is one of the most satisfying parts of our work. Rails is a great and well-worn tool in our toolbox, but we work with you to understand your needs before ascribing a particular technology or framework. Our team works hard to make it easy to work with us.&lt;/p&gt;&lt;h3 id=&#34;impact&#34;&gt;Impact &lt;a href=&#34;#impact&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Building a customer portal with &lt;a href=&#34;https://www.thegnar.co/work/dispatch.html&#34;&gt;Dispatch&lt;/a&gt; required a keen eye on the &lt;strong&gt;impact&lt;/strong&gt; of our decisions. Working with the team we’d be handing the project off to, we ensured that any conventions we introduced met their expectations. Additionally, we needed to maintain a focus on non-functional requirements to provide fast response times and real-time communication with their customers.&lt;/p&gt;&lt;h3 id=&#34;cost&#34;&gt;Cost &lt;a href=&#34;#cost&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Cost&lt;/strong&gt; can be more than dollars and cents. Evaluating when to develop functionality yourself or utilize existing solutions is critical. When we worked to bring &lt;a href=&#34;https://www.thegnar.co/work/valor-performance.html&#34;&gt;Valor Performance&lt;/a&gt;’s product to market, we focused on delivering a custom experience for coaching sales professionals while relying on third-party services to complement the product with scheduling, communication, and authorization functionality. As our involvement on the project wound down, we helped interview and onboard their internal team. Investing in the long-term success of our clients, even beyond our involvement, is built into our process.&lt;/p&gt;&lt;h3 id=&#34;maintenance&#34;&gt;Maintenance &lt;a href=&#34;#maintenance&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We don’t limit our focus to the scope of our initial engagement; we make sure to account for any &lt;strong&gt;maintenance&lt;/strong&gt; activities that’ll need consideration throughout the life of your product. After delivering a foundational product for &lt;a href=&#34;https://www.thegnar.co/work/qeepsake.html&#34;&gt;Qeepsake&lt;/a&gt;, we continued to provide assistance and iterate on product features and application performance as adoption took off. While initially developing the product, we made sure to leverage best-in-breed solutions in billing and messaging to quickly provide core functionality that will continue to scale as their business grows.&lt;/p&gt;&lt;h3 id=&#34;consistency&#34;&gt;Consistency &lt;a href=&#34;#consistency&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While working with a large existing development team at &lt;a href=&#34;https://www.thegnar.co/work/level-up.html&#34;&gt;LevelUp&lt;/a&gt;, it was critical to consider &lt;strong&gt;consistency&lt;/strong&gt;. We ensured we were delivering code that adhered to the team’s existing standards to provide a seamless hand-off that they were comfortable supporting. While we introduced our approach and experience to solving similar problems in different contexts, it was all done in a way that aligned with the larger team’s process.&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
