
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>conference on Kevin Murphy</title>
   <link>https://kevin-j-m.github.io/tags/conference/</link>
   <description>Recent content in conference on Kevin Murphy</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2020 - Kevin Murphy</copyright>
   <lastBuildDate>Mon, 19 Oct 2020 08:12:10 -0400</lastBuildDate>
   
       <atom:link href="https://kevin-j-m.github.io/tags/conference/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Stringing Code Together to Play Music</title>
       <link>https://kevin-j-m.github.io/posts/stringing-code-together-to-play-music/</link>
       <pubDate>Tue, 15 Dec 2020 07:03:46 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/stringing-code-together-to-play-music/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stringing Code Together To Play Music&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In our &lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;last post&lt;/a&gt;, I talked about how I built an interface to &lt;a href=&#34;https://sonic-pi.net&#34;&gt;Sonic Pi&lt;/a&gt; when
I was preparing my &lt;a href=&#34;https://rubyconf.org/program/sessions#session-1044&#34;&gt;RubyConf 2020&lt;/a&gt; talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module. At the
end of that post, we could send sounds to Sonic Pi. Today, we&amp;rsquo;ll have our code
play the guitar, and send those sounds to our amplifier.&lt;/p&gt;
&lt;h2 id=&#34;string-theory&#34;&gt;String Theory &lt;a href=&#34;#string-theory&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A guitar is a string instrument, and each of those strings make a sound when you
play them. For this example we&amp;rsquo;ll focus on the happy path, which is that
plucking the string plays the expected note. The code I built also considers
that strings can break, and attempting to play broken strings won&amp;rsquo;t work. You
can look at the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar/string.rb#L20-L28&#34;&gt;full implementation&lt;/a&gt;
to see how that works.&lt;/p&gt;
&lt;p&gt;Plucking an individual string creates a new sound.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pluck&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;:)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    play_note(fret)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play_note&lt;/span&gt;(fret)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;StringSound&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(
      &lt;span style=&#34;color:#e6db74&#34;&gt;string_number&lt;/span&gt;: @number,
      &lt;span style=&#34;color:#e6db74&#34;&gt;tuning_note&lt;/span&gt;: tuning_note,
      &lt;span style=&#34;color:#e6db74&#34;&gt;fret_number&lt;/span&gt;: fret,
    )
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;@number&lt;/code&gt; variable is which string on the guitar it is, with index 0 being
the low E, and index 5 being the high E, in standard tuning. The &lt;code&gt;tuning_note&lt;/code&gt;
is what note that string is tuned to, because any string &lt;strong&gt;can&lt;/strong&gt; be tuned to any
note. Again, for simplicity here, we&amp;rsquo;ll assume standard tuning (EADGBE).&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;StringSound&lt;/code&gt; class converts that information into the command we&amp;rsquo;ll send to
Sonic Pi. All notes in Sonic Pi are represented with a &lt;a href=&#34;https://sonic-pi.net/tutorial#section-2-1&#34;&gt;number&lt;/a&gt;,
and we can also use &amp;ldquo;traditional&amp;rdquo; note names, passed to it as a symbol. We can
use that to figure out the note our string would play if you plucked it without
pressing down on a fret.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringSound&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;playable_note_root&lt;/span&gt;
    playable_note_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dig(@string_number, @tuning_note)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;playable_note_key&lt;/span&gt;
    {
      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e2&lt;/span&gt; },
      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a2&lt;/span&gt; },
      &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:d3&lt;/span&gt; },
      &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;g&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:g3&lt;/span&gt; },
      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:b3&lt;/span&gt; },
      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:e4&lt;/span&gt; },
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The number next to the note (the &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;:e2&lt;/code&gt; for the low E string) represents
the octave.&lt;/p&gt;
&lt;p&gt;A helpful thing here is that the note is still a number to Sonic Pi. We can add
the fret number pressed on the string to the root note of the string and Sonic
Pi will know what note that is.
We&amp;rsquo;ll construct a Sonic Pi command to send to our &lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;amplifier&lt;/a&gt;
to play that note.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringSound&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amp_value&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(note(:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;playable_note_root&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) + &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;@fret_number&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is all in a string (the data type, not the part of the instrument),
because we&amp;rsquo;re going to pass it to Sonic Pi via the
&lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/&#34;&gt;sonic-pi-cli gem&lt;/a&gt;.
This is going to execute the &lt;code&gt;note&lt;/code&gt; method in Sonic Pi to play that single
tone.&lt;/p&gt;
&lt;h2 id=&#34;plucking-a-single-string&#34;&gt;Plucking a Single String &lt;a href=&#34;#plucking-a-single-string&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our guitarist is interfacing with the guitar as a whole, which is &lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;composed&lt;/a&gt; of
many strings. They&amp;rsquo;ll first place their fingers on the neck of the guitar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FingerPlacement&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:fret&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:string_number&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And pluck an individual string with that placement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pick&lt;/span&gt;(finger_placement, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;finger_placement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;string_number&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: finger_placement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fret)
    @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(sound_output(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;play &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;amp_value&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: duration))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here our guitar is adding details to the command that we&amp;rsquo;ll send to
Sonic Pi. We have the information about the note to play from the string, but
now we want it to sound like a note from a guitar, and we&amp;rsquo;ll rely on the
guitarist to say how long to play the note for (the duration).&lt;/p&gt;
&lt;p&gt;We can do this in Sonic Pi by specifying the synthesizer to use when playing the
note, and we&amp;rsquo;ll choose one that sounds like a guitar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sound_output&lt;/span&gt;(play_operation, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;with_synth :pluck do&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;play_operation&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, release: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;duration&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you wanted to play this directly in Sonic Pi&amp;rsquo;s IDE, it would look more
familiar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;with_synth &lt;span style=&#34;color:#e6db74&#34;&gt;:pluck&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  play note(&lt;span style=&#34;color:#e6db74&#34;&gt;:e2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;release&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we need to package this all up in a string to then send that command
over to Sonic Pi via the sonic-pi-cli gem.&lt;/p&gt;
&lt;p&gt;Our amplifier, passed in via &lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;,
then takes that command and sends it to Sonic Pi, producing a sound!&lt;/p&gt;
&lt;h2 id=&#34;strike-a-chord&#34;&gt;Strike a Chord &lt;a href=&#34;#strike-a-chord&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sonic Pi already knows how to play &lt;a href=&#34;https://sonic-pi.net/tutorial#section-8-2&#34;&gt;chords&lt;/a&gt;,
so this could be a quick section; however, we&amp;rsquo;re going to replicate that
functionality a little differently. We&amp;rsquo;re doing this because of the reality I
mentioned when talking about strings - and that is, they can break. If a string
is broken, the note in the chord that string would regularly play shouldn&amp;rsquo;t be
heard.&lt;/p&gt;
&lt;p&gt;As such, we need to go string by string to determine the notes to play. Even
though the reasoning is to handle broken strings, we&amp;rsquo;re not going to consider
that case in this explanation. You can view the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar.rb#L23-L41&#34;&gt;full
implementation&lt;/a&gt;
to see how that&amp;rsquo;s handled.&lt;/p&gt;
&lt;p&gt;We first need to know which notes we should play:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_fret),
      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;second_fret),
      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;third_fret),
      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fourth_fret),
      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fifth_fret),
      strings&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;pluck(&lt;span style=&#34;color:#e6db74&#34;&gt;fret&lt;/span&gt;: chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sixth_fret),
    &lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:amp_value&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll then take all of those notes and pass them to our amplifier, using Sonic
Pi&amp;rsquo;s &lt;code&gt;play_pattern_timed&lt;/code&gt; &lt;a href=&#34;https://github.com/hashbangstudio/Sonic-Pi-Examples/blob/master/10-play-pattern-timed.rb&#34;&gt;method&lt;/a&gt;.
This also allows us to define a time between each note, so we can place a small
amount of time in between each to simulate the time it would take your hand to
complete a downstroke across all the strings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[...].&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:amp_value&lt;/span&gt;)

    @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(
      sound_output(
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;play_pattern_timed [&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;pattern_notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], 0.05&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: duration,
      )
    )
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The 0.05 is our amount of time it&amp;rsquo;ll take to pluck from one string to the next
when playing a chord.&lt;/p&gt;
&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Combining a few key software design principles, we were able to create a
flexible, extensible, and testable system for playing music over the course of a
few blog posts.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re now armed with an amplifier that knows how to communicate with &lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Sonic Pi&lt;/a&gt;
that&amp;rsquo;s passed in to our guitar via &lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt; (but could send the notes anywhere as long as the injected class &lt;a href=&#34;https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/&#34;&gt;responds&lt;/a&gt; to the right methods). Our guitar is &lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;composed&lt;/a&gt; of various strings, each of which are responsible for knowing what sound to make.&lt;/p&gt;
&lt;p&gt;Given a songwriter who knows how to
&lt;a href=&#34;https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/&#34;&gt;consistently write&lt;/a&gt; for our band, we can
play chords and individual notes on our guitar as the &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/songs/the_line_begins_to_blur.rb&#34;&gt;song&lt;/a&gt; requires.&lt;/p&gt;


&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GncJGXdS6R8?rel=0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;If you listen closely at :14, you can hear a string break. Even with these
principles in place, mistakes and errors happen. Make sure your system is
prepared to handle errors in a fault-tolerant way - but that&amp;rsquo;s a different blog
series altogether. Thanks for joining me in this exploration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/stringing-code-together-to-play-music&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>Using Sonic Pi to Play Music With Ruby</title>
       <link>https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/</link>
       <pubDate>Mon, 14 Dec 2020 18:48:24 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using Sonic Pi To Play Music With Ruby&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My &lt;a href=&#34;https://rubyconf.org/program/sessions#session-1044&#34;&gt;RubyConf 2020&lt;/a&gt;
talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module
uses examples about playing live music. As such, I had the ambitious goal of
delivering a live performance of some music during the presentation. This ended
up getting cut for a variety of reasons (time, concern about the audio working
on the streaming platform, the reality of ambition turning into actual work to
do), but I built out the structure to support this for one instrument, the
guitar. This is the first of two posts that&amp;rsquo;ll describe the work that I did to
support this.&lt;/p&gt;
&lt;p&gt;First, I had to figure out if it was possible to make this happen. I wanted to
hook into my existing code samples and trigger musical notes from them somehow.
As such, I decided to build my first amplifier, virtually, without fear of
blowing up any capacitors.&lt;/p&gt;
&lt;h2 id=&#34;parts-list&#34;&gt;Parts List &lt;a href=&#34;#parts-list&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the earlier post on &lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;,
I created a &lt;code&gt;PracticeAmplifier&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/practice_amplifier.rb&#34;&gt;class&lt;/a&gt;
that did nothing so I could use it in tests, rather than the &amp;ldquo;regular&amp;rdquo; amplifier.&lt;/p&gt;
&lt;p&gt;What the &amp;ldquo;regular&amp;rdquo; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/amplifier.rb&#34;&gt;amplifier&lt;/a&gt;
does is interface with &lt;a href=&#34;https://sonic-pi.net/&#34;&gt;Sonic Pi&lt;/a&gt;, which is awesome
software that&amp;rsquo;ll make sound and music driven by code. Sonic Pi comes with
an &lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-1-2&#34;&gt;IDE&lt;/a&gt; of sorts that you can
use to program the composition you&amp;rsquo;d like to play, and get immediate feedback
from hearing how your code is translated into audio. It&amp;rsquo;s a great way to lose
track of time for a night or two (or more). However, I was envisioning
controlling my audio from the code examples directly. I didn&amp;rsquo;t want to have to
work within the IDE.&lt;/p&gt;
&lt;p&gt;To get around using the IDE directly, I found the &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli&#34;&gt;sonic-pi-cli&lt;/a&gt;
gem. Its principal use case is to be used directly in the
&lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/c4280f98edcec4de99801d013ec946cc47787932/bin/sonic_pi&#34;&gt;terminal&lt;/a&gt;.
However, it&amp;rsquo;s a gem, and written in ruby, and the core functionality is
available in a &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/c4280f98edcec4de99801d013ec946cc47787932/lib/sonic_pi.rb&#34;&gt;class&lt;/a&gt;
that you can use in any of your code.&lt;/p&gt;
&lt;h2 id=&#34;wiring-schematic&#34;&gt;Wiring Schematic &lt;a href=&#34;#wiring-schematic&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With enough knowledge and conviction to be dangerous, I set out wiring up my
amplifier. The CLI requires that Sonic Pi itself is running, and first ensures
it can communicate with it - and to do so, it needs to know what port the
software is running on. Sonic Pi used to always run on the same port; however,
it has since changed to run on a &lt;a href=&#34;https://github.com/sonic-pi-net/sonic-pi/commit/d245d93c5b797ad76fa333f829c32d67480af96c&#34;&gt;dynamically-determined&lt;/a&gt; port.&lt;/p&gt;
&lt;p&gt;The CLI already implemented the functionality to &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/blob/20a18f91b4aa24de9f4b187aa20c69334ddf0329/bin/sonic_pi#L13-L33&#34;&gt;find the port&lt;/a&gt;
to send to the &lt;code&gt;SonicPi&lt;/code&gt; class, so for demonstration purposes, I copied that in
my constructor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Amplifier&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;
    @port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_port
    @speaker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SonicPi&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(@port)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_port&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Code from sonic-pi-cli&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Needing to find the port is now something that the &lt;code&gt;SonicPi&lt;/code&gt; class can do &lt;a href=&#34;https://github.com/Widdershin/sonic-pi-cli/pull/23&#34;&gt;by itself&lt;/a&gt;
as of version v0.2.0; however, this work preceded that.&lt;/p&gt;
&lt;p&gt;The rest of the functionality in the &lt;code&gt;Amplifier&lt;/code&gt; class is now to &lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;delegate&lt;/a&gt; commands to the &lt;code&gt;@speaker&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Amplifier&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;(sound)
    @speaker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(sound)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using this amplifier still requires knowing all the correct
&lt;a href=&#34;https://sonic-pi.net/tutorial.html#section-2-1&#34;&gt;commands&lt;/a&gt; to send to Sonic Pi,
and Sonic Pi must be running; however, we can now trigger it to execute these
commands from outside of its IDE. We have a way to &lt;em&gt;send&lt;/em&gt; sound
out of our ruby code.&lt;/p&gt;
&lt;p&gt;In our next post, we&amp;rsquo;ll take a look at how we &lt;em&gt;generate&lt;/em&gt; the sound to send from
a &lt;a href=&#34;https://kevin-j-m.github.io/posts/stringing-code-together-to-play-music/&#34;&gt;guitar&lt;/a&gt; to an amplifier.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/using-sonic-pi-to-play-music-with-ruby&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>Inheritance: Derivative Songwriting</title>
       <link>https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/</link>
       <pubDate>Thu, 10 Dec 2020 16:56:38 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inheritance: Derivative Songwriting&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inheritance sets up a relationship or a taxonomy between classes to allow for
code reuse. It is both a commonly reached for and commonly derided tool which
has its place, but must be wielded with care. We&amp;rsquo;ll use inheritance to write new
songs for our concert setlist, an example which comes from my &lt;a href=&#34;https://rubyconf.org/program/sessions#session-1044&#34;&gt;RubyConf 2020&lt;/a&gt;
talk about Ruby&amp;rsquo;s
&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;
&lt;h2 id=&#34;song-structure&#34;&gt;Song Structure &lt;a href=&#34;#song-structure&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you create a song, it needs a name (or at least a working title) and a
series of notes. The notes may change over time, and the title may be refined,
but for our purposes, we&amp;rsquo;re not calling it a song until there&amp;rsquo;s a bit more than
an empty page.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;notes&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;, name:)
    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes
    @name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you&amp;rsquo;re writing songs for a band or yourself, you need to be able to play the
song. In this example, our song is written for a band that has a known number of
instruments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;
    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;

      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }

      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For every note (representing a beat or measure of the song) each member of the
band needs to play their part simultaneously. All of these instruments playing
together note for note comprise the song.&lt;/p&gt;
&lt;h2 id=&#34;on-repeat&#34;&gt;On Repeat &lt;a href=&#34;#on-repeat&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A touring band is going to play the same song &lt;strong&gt;many&lt;/strong&gt; times night after night.
For each concert on the tour, the band needs to construct a setlist of all the
songs that they&amp;rsquo;ll play that night, and in what order.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Setlist&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_song&lt;/span&gt;(song)
    @songs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; song
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Transcribing all the notes for each song over and over again for every concert
would be tedious and unnecessary. To save all that work, each song that could
appear in the band&amp;rsquo;s setlist is catalogued as a separate class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;
    @name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Line Begins To Blur&amp;#34;&lt;/span&gt;
    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; verse_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; verse_2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; outro
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t need to accept any arguments for the name of the song or the notes
because it&amp;rsquo;s already a fully-formed song. We&amp;rsquo;re not going to change the
arrangement in the middle of the tour. However, we &lt;strong&gt;do&lt;/strong&gt; need to be able to
play the song. As such, let&amp;rsquo;s copy and paste the &lt;code&gt;play&lt;/code&gt; method as something we
can do for our specific song here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;
    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;

      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }

      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is great because we now have a stable of songs we can pull from every night
when creating our setlist; however, rewriting the &lt;code&gt;play&lt;/code&gt; method in each song is
not great. If the implementation of &lt;code&gt;play&lt;/code&gt; needs to change, we need to
propagate that change across every song. If we forget to add a &lt;code&gt;play&lt;/code&gt; method to
one of our songs, everyone is going to look foolish when the band is staring
blankly at each other, unsure of what to do.&lt;/p&gt;
&lt;h2 id=&#34;composing-a-song&#34;&gt;Composing a Song &lt;a href=&#34;#composing-a-song&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Taking a note from our earlier post on
&lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;composition and delegation&lt;/a&gt;, we can
build a class that&amp;rsquo;s solely responsible for playing the song.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SongPerformer&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(notes)
    @notes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; notes
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;
    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;

      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }

      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of our songs can then use that performer and delegate the responsibility of
playing to it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;SongPerformer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(@notes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have now isolated the responsibility of playing the song to one place. If we
need to change the way in which songs are played in totality, we can do so in
the &lt;code&gt;SongPerformer&lt;/code&gt; and that change will be reflected in all of our songs. We
can even &lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;dependency inject&lt;/a&gt; the performer class
into the song, allowing us to set up different arrangements of the same song.
Even with those benefits, we &lt;em&gt;do&lt;/em&gt; still have to remember to implement a &lt;code&gt;play&lt;/code&gt;
method that calls our &lt;code&gt;SongPerformer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is another option we can explore: inheritance.&lt;/p&gt;
&lt;h2 id=&#34;playing-the-hits&#34;&gt;Playing the Hits &lt;a href=&#34;#playing-the-hits&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can leverage our existing, generic, &lt;code&gt;Song&lt;/code&gt; class and have all of our classes
about specific songs &lt;em&gt;inherit&lt;/em&gt; the behavior of the &lt;code&gt;Song&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;By doing this, our different songs don&amp;rsquo;t need to implement the &lt;code&gt;play&lt;/code&gt; method.
They&amp;rsquo;ll get this behavior from &lt;code&gt;Song&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TheLineBeginsToBlur&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Song&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(
      name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Line Begins To Blur&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;notes&lt;/span&gt;: verse_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; verse_2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chorus &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; outro,
    )
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We denote that we&amp;rsquo;re inheriting from the &lt;code&gt;Song&lt;/code&gt; class with &lt;code&gt;&amp;lt; Song&lt;/code&gt;. &lt;code&gt;Song&lt;/code&gt; is
our &amp;ldquo;base class&amp;rdquo;. In our constructor, we then call &lt;code&gt;Song&lt;/code&gt;&amp;rsquo;s constructor with
&lt;code&gt;super&lt;/code&gt;, passing in the title of the song and the notes that should be played
with the song. &lt;code&gt;TheLineBeginsToBlur&lt;/code&gt; has no reference to &lt;code&gt;play&lt;/code&gt; in its class
definition. It still responds to it because &lt;code&gt;Song&lt;/code&gt; does, and we&amp;rsquo;re
inheriting all of &lt;code&gt;Song&lt;/code&gt;s behavior.&lt;/p&gt;
&lt;p&gt;When we discussed composition, we mentioned Sandi Metz&amp;rsquo;s &lt;a href=&#34;https://www.poodr.com/&#34;&gt;Practical Object-Oriented Design In Ruby&lt;/a&gt;
for her recommendation to use composition when modeling a &lt;em&gt;has a&lt;/em&gt; relationship.
In that same section, she recommends using inheritance when you encounter an
&lt;em&gt;is a&lt;/em&gt; relationship. In our case, a particular song is a &lt;strong&gt;specialized&lt;/strong&gt;
version of our &lt;code&gt;Song&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Inheritance is a common design choice in Object-Oriented languages. Specifically
in Ruby, if you&amp;rsquo;ve worked with Rails, then you&amp;rsquo;ve likely used inheritance all
over the place. All of your models inherit from &lt;code&gt;ApplicationRecord&lt;/code&gt; (ultimately
inheriting from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;) and all of your controllers inherit
from &lt;code&gt;ApplicationController&lt;/code&gt; (ultimately inheriting from
&lt;code&gt;ActionController::Base&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;a-measured-approach&#34;&gt;A Measured Approach &lt;a href=&#34;#a-measured-approach&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inheritance does come with some drawbacks. Enough that it&amp;rsquo;s commonly recommended
to avoid. You may have encountered the phrase, &amp;ldquo;prefer composition over
inheritance&amp;rdquo; before. Let&amp;rsquo;s discuss why that is.&lt;/p&gt;
&lt;h3 id=&#34;transparency&#34;&gt;Transparency &lt;a href=&#34;#transparency&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Inheritance makes it more difficult to know what behaviors a particular class
has. None of our song classes that inherit from &lt;code&gt;Song&lt;/code&gt; have a &lt;code&gt;play&lt;/code&gt; method
in their class definition. However, because they all inherit from &lt;code&gt;Song&lt;/code&gt;, they
all respond to &lt;code&gt;play&lt;/code&gt;. Determining that is not obvious based on a quick reading
of the class.&lt;/p&gt;
&lt;h3 id=&#34;limitations-of-base-class&#34;&gt;Limitations of Base Class &lt;a href=&#34;#limitations-of-base-class&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Any inheriting classes shouldn&amp;rsquo;t necessarily do things differently than how the
base class does. Of course, you &lt;em&gt;can&lt;/em&gt; do this, but it should be used very
judiciously. We could redefine the &lt;code&gt;play&lt;/code&gt; method in a particular class - sharing
the rest of the behavior and redefining &lt;code&gt;play&lt;/code&gt; for our one-off special
exception. The issue is that these exceptions start to pile up, we end up
chipping away at the commonality, and the shared understanding of what it means
to inherit from the base class gets eroded with each change that seems small
on its own.&lt;/p&gt;
&lt;p&gt;For our songs, if we suddenly need to write a song for a string quartet, our
&lt;code&gt;Song&lt;/code&gt; class isn&amp;rsquo;t helpful. It assumes a guitar, vocalist, drummer, and
keyboardist. While particularly in Ruby we have an out by being able to redefine
any method definition, from a design perspective, we should be willing to accept
the limitations that inheritance places on us within the scope of our domain.
If those limitations cannot be respected, then consider another organizational
structure, like composition.&lt;/p&gt;
&lt;h3 id=&#34;future-inflexibility&#34;&gt;Future Inflexibility &lt;a href=&#34;#future-inflexibility&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s often impossible to know how your system will evolve over time. Inheritance
can lock you in to a very specific representation of how your system should be
modeled, and the assumptions that went into developing that structure may not
hold true as features are needed to be added and the needs that the application
must serve grow.&lt;/p&gt;
&lt;p&gt;This rigidity over time ends up getting pushed and strained
enough that maintaining inheritance structures becomes difficult. In my
opinion, it is this long-view perspective that becomes the principal reason why
inheritance is sparsely recommended by practitioners. It can work great as
long as you have perfect knowledge about both the current and future state of
your system. The reality is, it&amp;rsquo;s extremely rare to be in that situation.&lt;/p&gt;
&lt;p&gt;In this example, our application is modeling a concert tour for one band, the
members and makeup of which &lt;strong&gt;shouldn&amp;rsquo;t&lt;/strong&gt; change throughout the course of the
tour. We&amp;rsquo;ve made the bet that even if the guitarist we start the tour with is
replaced, there will still &lt;strong&gt;be&lt;/strong&gt; a guitarist, and we will not have picked up a
french horn player along the way to play two of the songs. From a practicality
standpoint, it&amp;rsquo;s reasonable to be tied to this rigid structure of how to play
each of these songs on stage in the context of this application. However, from
the onset, we&amp;rsquo;ve already identified one way in which this structure may come
back to haunt us.&lt;/p&gt;
&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inheritance is often reached for as a quick and easy way to achieve code reuse.
It does just that; however, it imposes limitations and constraints on your system
that can make it more difficult or painful to change over time. Those
limitations may be intentional and required guardrails - but often times, they
end up being factors that cause pain, tears, multiple &amp;ldquo;code spikes&amp;rdquo;, and
&amp;ldquo;technical debt sprints&amp;rdquo; to allow for needed future functionality. Inheritance
shouldn&amp;rsquo;t be avoided wholesale based on this, but it should be carefully and
judiciously applied in your systems.&lt;/p&gt;
&lt;p&gt;Our next post will move a little further from theory and explore how to build an
&lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;interface to Sonic Pi&lt;/a&gt;,
so that these principles can work together to actually make sounds on your
computer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/inheritance-derivative-songwriting&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>Synthesizing Composition With Delegation</title>
       <link>https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/</link>
       <pubDate>Sat, 05 Dec 2020 14:00:55 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Synthesizing Composition With Delegation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any application will be comprised of multiple components - in Object-Oriented
languages, typically classes. Sometimes these classes even work together!
External users of one of these classes may not know that behind the scenes there
are more classes working together, nor do they care. The public API does what
they need it to, and anything else is an implementation detail. However, keeping
the specialization of these different classes apart, but using them together,
is beneficial.&lt;/p&gt;
&lt;p&gt;To demonstrate using composition to model a complex system and using delegation
in that composition, we will explore how a synthesizer can handle memory
management to store presets of sounds. This example comes from my &lt;a href=&#34;https://rubyconf.org/program/sessions#session-1044&#34;&gt;RubyConf 2020&lt;/a&gt;
talk about Ruby&amp;rsquo;s
&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;
&lt;h2 id=&#34;noise-reduction&#34;&gt;Noise Reduction &lt;a href=&#34;#noise-reduction&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Synthesizer&#34;&gt;synthesizer&lt;/a&gt; is an instrument
capable of producing a wide array of sounds. A collection of sounds and effects are known as a patch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Patch&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:sound&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:effect&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:filter&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:oscillator&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can save these patches on the synthesizer&amp;rsquo;s memory and recall them later for
easy access.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;patch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Patch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
synth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Synthesizer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new

synth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_patch(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:b1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;: patch)
synth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_patch(patch)
synth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play_key(&lt;span style=&#34;color:#e6db74&#34;&gt;note&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;duration&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;save-you-the-trouble&#34;&gt;Save You the Trouble &lt;a href=&#34;#save-you-the-trouble&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Much like the actual instrument is comprised of various subcomponents, our
&lt;code&gt;Synthesizer&lt;/code&gt; is made up of various classes that specialize in its area of
expertise.&lt;/p&gt;
&lt;p&gt;For example, our synthesizer above doesn&amp;rsquo;t know how to save a patch to its
onboard memory. It relies on its patch memory to handle that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Synthesizer&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save_patch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;:)
    @patch_memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;location&lt;/span&gt;: location, &lt;span style=&#34;color:#e6db74&#34;&gt;patch&lt;/span&gt;: patch)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All the synthesizer itself knows is what &lt;em&gt;message&lt;/em&gt; to send to the memory to
have it do that. The synthesizer is &lt;strong&gt;delegating&lt;/strong&gt; the responsibility of storing
these patches to the patch memory instance.&lt;/p&gt;
&lt;p&gt;Anyone playing the synthesizer does not need to be concerned with how it&amp;rsquo;s
storing these patches, just that it&amp;rsquo;s doing it. Anyone using our synthesizer
class isn&amp;rsquo;t aware that there is a separate patch memory class that the
synthesizer is using.&lt;/p&gt;
&lt;p&gt;At the same time, our synthesizer doesn&amp;rsquo;t know directly how to access its memory.
It relies on the &lt;code&gt;PatchMemory&lt;/code&gt; class for that, and delegates any responsibility
related to memory management to that class. As Sandi Metz describes in
&lt;a href=&#34;https://www.poodr.com/&#34;&gt;Practical Object-Oriented Design In Ruby&lt;/a&gt;, a synthesizer
&lt;em&gt;has a&lt;/em&gt; patch memory, as it &lt;em&gt;has a&lt;/em&gt; series of other parts, and those are
composed together to deliver all the functionality that a synthesizer
provides.&lt;/p&gt;
&lt;h2 id=&#34;key-benefits-to-delegation&#34;&gt;Key Benefits to Delegation &lt;a href=&#34;#key-benefits-to-delegation&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Delegation provides a few important drivers that make it easier to wrangle
complex systems.&lt;/p&gt;
&lt;h3 id=&#34;specialization&#34;&gt;Specialization &lt;a href=&#34;#specialization&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Our patch memory component is solely focused on interfacing with the onboard
memory of the instrument, which is where it saves and recalls stored sounds.
Its tests can dig into all of the edge cases and minutiae that need to be
accounted for. The implementation can make very specific decisions so that it
is extremely performant without other areas of the system needing to worry
about that.&lt;/p&gt;
&lt;p&gt;A synthesizer itself is a complex system. The memory management is only one
small part of it. The strength and value-add of our &lt;code&gt;Synthesizer&lt;/code&gt; class is in
organizing all of these components together, knowing the right messages to pass
to them, with a public API that doesn&amp;rsquo;t require intimate knowledge of all those
details. If the internals of our &lt;code&gt;Synthesizer&lt;/code&gt; class handled all of this
responsibility itself, it would quickly become unwieldy, difficult to navigate,
hard to read, a challenge to troubleshoot, a burden to test, and feared when
changes are required.&lt;/p&gt;
&lt;h3 id=&#34;flexibility--reuse&#34;&gt;Flexibility &amp;amp; Reuse &lt;a href=&#34;#flexibility--reuse&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In reality, there are many different kinds of synthesizer, all of which have
different capabilities. Some may be able to store 1,000 different patches on
board. Others may only have capacity for four. Still more may have expandable
memory, where you can plug in a USB device for nearly infinite storage.&lt;/p&gt;
&lt;p&gt;Rather than needing to create entirely different synthesizer classes to handle
any of these scenarios, instead we only need to model those differences in patch
memory classes. Our synthesizer can then use any of those and still maintain the
rest of its functionality, without needing to duplicate it across different
classes.&lt;/p&gt;
&lt;p&gt;In this &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/synthesizer.rb#L41-L47&#34;&gt;example&lt;/a&gt;,
our synthesizer changes its memory capabilities based on the brand that it is.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize_memory&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @brand &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:moog&lt;/span&gt;
    @patch_memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MoogPatchMemory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; @brand &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:nord&lt;/span&gt;
    @patch_memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NordPatchMemory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/&#34;&gt;duck typing&lt;/a&gt;, as long as these patch
memory classes respond to the same messages, our &lt;code&gt;Synthesizer&lt;/code&gt; class can use
either of them interchangeably.&lt;/p&gt;
&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Composing classes together allows us to create a fully-functional system. A
class that uses another class to handle a request or responsibility is
delegating that duty to the helper class. Delegation can encapsulate the
knowledge of different specialties for code organization without external
consumers needing to know or care about that implementation detail. Delegating
responsibility to different classes can also make it easier for the system to
change, making it more likely to promote code reuse.&lt;/p&gt;
&lt;p&gt;Next we&amp;rsquo;re going to play one of the greatest hits in software design:
&lt;a href=&#34;https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/&#34;&gt;inheritance&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/synthesizing-composition-with-delegation&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>Shedding a Light on Duck Typing</title>
       <link>https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/</link>
       <pubDate>Thu, 03 Dec 2020 12:10:31 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;Dependency Injection: Plug In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shedding a Light on Duck Typing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Duck typing is commonly used by Rubyists and other users of dynamic languages.
We&amp;rsquo;ll demonstrate duck typing by helping a concert lighting team set up the
lighting for a band, which comes from my &lt;a href=&#34;https://rubyconf.org/program/sessions#session-1044&#34;&gt;RubyConf 2020&lt;/a&gt; talk about Ruby&amp;rsquo;s
&lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;
&lt;h2 id=&#34;stage-design&#34;&gt;Stage Design &lt;a href=&#34;#stage-design&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To light the stage for our concert, we have a wide range of lights to
use.&lt;/p&gt;
&lt;p&gt;We have our trusty can, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Stage_lighting_instrument#PAR_lights&#34;&gt;PAR&lt;/a&gt;, lights.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CanLight&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have &lt;a href=&#34;https://en.wikipedia.org/wiki/Stage_lighting_instrument#Spotlights&#34;&gt;spotlights&lt;/a&gt; tasked on each band member.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spotlight&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have fancy &lt;a href=&#34;https://en.wikipedia.org/wiki/Intelligent_lighting&#34;&gt;moving lights&lt;/a&gt; for versatile coverage across the stage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MovingLight&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We even have a &lt;a href=&#34;https://en.wikipedia.org/wiki/Beam_projector&#34;&gt;beam projector&lt;/a&gt;
for a more powerful spotlight effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BeamProjector&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;:, &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;:)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What any of these lights do isn&amp;rsquo;t important here. What is key to notice is that
you operate them all by calling the &lt;code&gt;trigger&lt;/code&gt; method.&lt;/p&gt;
&lt;h2 id=&#34;a-light-touch&#34;&gt;A Light Touch &lt;a href=&#34;#a-light-touch&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The stage lighting technicians, just like the band, are performers in the
concert. For every single note of every single song, they need to make sure that
the visual aesthetic of the stage is set &lt;em&gt;just so&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;All of these lights are managed by a central controller, from which they can
power on all the lights in preparation for a show.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;
    @powered_lights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turn_on_lights&lt;/span&gt;
    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:beam_projector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BeamProjector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:can&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CanLight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:moving_light&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MovingLight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
    @powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:spotlight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Spotlight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As I mentioned, for every note of every song, they need to make sure the lights
look exactly as they&amp;rsquo;re supposed to. This is tracked as the lighting&amp;rsquo;s
composition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingComposition&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:light_name&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:color&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:effect&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ducking-into-lights-on-stage&#34;&gt;Ducking into Lights on Stage &lt;a href=&#34;#ducking-into-lights-on-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the band is playing the show, the lighting technicians follow note-for-note
and need to apply the composition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Song&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;
    @notes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;note&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;

      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @guitar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @vocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sing(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @drum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hit(note) }
      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @keyboardist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;program(note) }
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;      composition &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new { @lighting&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_lighting(note) }
&lt;/span&gt;
      composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because each of our different lights respond to the same message (&lt;code&gt;trigger&lt;/code&gt;)
with the same signature, the lighting controller doesn&amp;rsquo;t need to care, or even
know, about which light it&amp;rsquo;s operating. All it knows is that it needs to send
it the trigger signal and apply the required composition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_lighting&lt;/span&gt;(note)
    lighting_composition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; note&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lighting

    trigger(@powered_lights&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;lighting_composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;light_name&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, lighting_composition)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(light, composition)
    light&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trigger(
      &lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;: composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color,
      &lt;span style=&#34;color:#e6db74&#34;&gt;effect&lt;/span&gt;: composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;effect,
    )
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;LightingController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;trigger&lt;/code&gt; method is taking advantage of duck typing.
Ruby doesn&amp;rsquo;t care what kind of object it&amp;rsquo;s calling in its &lt;code&gt;light&lt;/code&gt; argument. All
that matters is that it responds to &lt;code&gt;trigger&lt;/code&gt;. We also used duck typing when we
discussed &lt;a href=&#34;https://kevin-j-m.github.io/posts/dependency-injection-plug-in/&#34;&gt;dependency injection&lt;/a&gt;. Our guitar
didn&amp;rsquo;t care how the amplifier made sound, or even if it did make sound. All that
matters at runtime to satisfy Ruby is that the object we pass in responds to
&lt;code&gt;play&lt;/code&gt; and accepts an argument.&lt;/p&gt;
&lt;h2 id=&#34;static-lighting&#34;&gt;Static Lighting &lt;a href=&#34;#static-lighting&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re more familiar with static languages or different typing systems, and
you need to define common behavior for what a set of classes do, you may be
familiar with an interface. For example, let&amp;rsquo;s use Java to define an interface
for our lights.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Light&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Color color&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; LightingEffect effect&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each of our lights would then implement this interface, defining their own
implementation of what they do when the light is triggered.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spotlight&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Light &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Color color&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; LightingEffect effect&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Turn the light on or off
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now set our &lt;code&gt;LightingController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;trigger&lt;/code&gt; method to accept any kind of
light.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LightingController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Light light&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; LightingComposition composition&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    light&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; composition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This satisfies Java&amp;rsquo;s type system, because anything that implements
the &lt;code&gt;Light&lt;/code&gt; interface is required to respond to the &lt;code&gt;trigger&lt;/code&gt; method accepting
those types of arguments.&lt;/p&gt;
&lt;p&gt;Because of duck typing in Ruby, defining this contract and enforcing it is
unnecessary. However, Ruby 3 will be &lt;a href=&#34;https://www.ruby-lang.org/en/news/2020/09/25/ruby-3-0-0-preview1-released/&#34;&gt;shipping&lt;/a&gt; with a way to define type
signatures, called &lt;a href=&#34;https://github.com/ruby/rbs&#34;&gt;RBS&lt;/a&gt;. RBS includes a mechanism
to define interfaces, which you can read more about &lt;a href=&#34;https://developer.squareup.com/blog/the-state-of-ruby-3-typing/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Duck typing is a core design feature of Ruby and other dynamic languages;
however, it does require a degree of trust. Because everything is determined at
runtime, there&amp;rsquo;s nothing stopping you from passing in an object to a method that
doesn&amp;rsquo;t respond to the methods it needs to. That will generate an
exception, but that may be too late to get that feedback. However, to many
Rubyists, the flexibility this approach provides often outweighs the cost.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re coming from a static typing system, or desiring more direction or
enforcement about what&amp;rsquo;s expected to be provided as an argument, then
investigate defining interface types with RBS, which will be part of Ruby 3.&lt;/p&gt;
&lt;p&gt;Our concert series continues with a discussion on &lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;composition and delegation&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/shedding-light-on-duck-typing&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>Dependency Injection: Plug In</title>
       <link>https://kevin-j-m.github.io/posts/dependency-injection-plug-in/</link>
       <pubDate>Tue, 24 Nov 2020 14:10:31 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/dependency-injection-plug-in/</guid>
       <description>&lt;h2 id=&#34;ruby-software-design-concert-series&#34;&gt;Ruby Software Design Concert Series &lt;a href=&#34;#ruby-software-design-concert-series&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Dependency Injection: Plug In&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/&#34;&gt;Shedding a Light on Duck Typing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/synthesizing-composition-with-delegation/&#34;&gt;Synthesizing Composition With Delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/inheritance-derivative-songwriting/&#34;&gt;Inheritance: Derivative Songwriting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/using-sonic-pi-to-play-music-with-ruby/&#34;&gt;Using Sonic Pi To Play Music With Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kevin-j-m.github.io/posts/stringing-code-together-to-play-music/&#34;&gt;Stringing Code Together To Play Music&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;setting-the-stage&#34;&gt;Setting the Stage &lt;a href=&#34;#setting-the-stage&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dependency injection is a fancy term. It &lt;strong&gt;sounds&lt;/strong&gt; intimidating. The purpose of
this post is to explain what dependency injection is, how to use it, and why it
can be beneficial. To illustrate, let&amp;rsquo;s talk about playing a guitar in a
concert, which comes from my &lt;a href=&#34;https://rubyconf.org/program/sessions#session-1044&#34;&gt;RubyConf 2020&lt;/a&gt;
talk about Ruby&amp;rsquo;s &lt;a href=&#34;https://docs.ruby-lang.org/en/master/Coverage.html&#34;&gt;Coverage&lt;/a&gt; module.&lt;/p&gt;
&lt;h2 id=&#34;sound-check&#34;&gt;Sound Check &lt;a href=&#34;#sound-check&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A guitarist in a band uses an amplifier when playing a live concert.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;
    @amplifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amplifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the guitar is played the sound travels through the amplifier, so the
audience can hear the notes being played.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strum&lt;/span&gt;(chord)
    chord&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;phrasing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;string_sound&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      @amplifier&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;play(string_sound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;amp_value)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can play a great show with this setup! Your guitar uses the amplifier it
defines, and all is well. Until&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;wall-of-sound&#34;&gt;Wall of Sound &lt;a href=&#34;#wall-of-sound&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some guitarists experiment with gear - a lot. Different amplifiers are going to
make different sounds. However, we&amp;rsquo;ve made it very difficult for our guitar to
be plugged in to different amplifiers.&lt;/p&gt;
&lt;p&gt;Right now, our dependence on the amplifier class to play the sound from the
guitar is hard-coded in the &lt;code&gt;Guitar&lt;/code&gt; class. The initializer sets up an explicit
dependency with the &lt;code&gt;Amplifier&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;If we want to plug the guitar into a &lt;code&gt;LouderAmplifier&lt;/code&gt;, we can&amp;rsquo;t do that without
changing our &lt;code&gt;Guitar&lt;/code&gt; class. Every different amplifier will require a change to
our &lt;code&gt;Guitar&lt;/code&gt; class.&lt;/p&gt;
&lt;h2 id=&#34;plug-and-play&#34;&gt;Plug and Play &lt;a href=&#34;#plug-and-play&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can resolve this limitation by instead passing in the amplifier that&amp;rsquo;ll be
used with the guitar when we make a new guitar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Guitar&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(amplifier)
    @amplifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; amplifier
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this small change, our &lt;code&gt;Guitar&lt;/code&gt; can work with any amplifier that responds
to the &lt;code&gt;play&lt;/code&gt; method. Rather than being coupled to the &lt;code&gt;Amplifier&lt;/code&gt; class, we
require that any users of the &lt;code&gt;Guitar&lt;/code&gt; class instead explicitly pass in this
collaborating class. This is a form of dependency injection, specifically
&lt;a href=&#34;https://martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer&#34;&gt;Constructor Injection&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sound-engineering&#34;&gt;Sound Engineering &lt;a href=&#34;#sound-engineering&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve seen an example of what dependency injection is, let&amp;rsquo;s discuss
why we would want to use it.&lt;/p&gt;
&lt;h3 id=&#34;flexibility&#34;&gt;Flexibility &lt;a href=&#34;#flexibility&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the motivation described in the example above. By removing the
hard-coded dependency as an implementation detail of our class, we can instead
use any dependency desired, as long as it responds to the methods that we need
to use within the class. For us, this means that guitars can use any amplifier
they&amp;rsquo;d like; the guitarist isn&amp;rsquo;t limited to the amp they had when first buying
the guitar.&lt;/p&gt;
&lt;h3 id=&#34;testing&#34;&gt;Testing &lt;a href=&#34;#testing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Testing may be the first situation where the value of this flexibility can be
appreciated. Tests are the first consumers of your implementation, and it&amp;rsquo;s
important to listen to the implicit feedback they give you. If a class or a
method is hard to test, it very likely will be hard to use - or at least complex
to understand.&lt;/p&gt;
&lt;p&gt;In reality, the difficulty in testing the &lt;code&gt;Guitar&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/instruments/guitar.rb&#34;&gt;class&lt;/a&gt;
is what led to the decision to inject the amplifier in. That&amp;rsquo;s because the
&lt;code&gt;Amplifier&lt;/code&gt; &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/amplifier.rb&#34;&gt;class&lt;/a&gt;
is essentially a wrapper around &lt;a href=&#34;https://sonic-pi.net/&#34;&gt;Sonic Pi&lt;/a&gt;. Sonic Pi
describes itself as a &amp;ldquo;code-based music creation and performance tool&amp;rdquo;, so
playing the guitar with this amplifier will actually play a sound on your
computer.&lt;/p&gt;
&lt;p&gt;As exciting as that is, I don&amp;rsquo;t want to have Sonic Pi running just to execute my
tests. And even if I did, I don&amp;rsquo;t need to hear the sound it would generate every
time I run my tests. And so, I created a separate amp for testing: a
&lt;code&gt;PracticeAmplifier&lt;/code&gt;. What does that amp do? &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band/blob/09e7b72b38dac09d4968afe1468eda53caaf294c/lib/ruby_cover_band/practice_amplifier.rb&#34;&gt;Absolutely nothing&lt;/a&gt;!
And that&amp;rsquo;s perfect for my unit tests. They&amp;rsquo;re not concerned with the sound the
amplifier makes when playing the guitar. They&amp;rsquo;re interested in exercising the
logic that&amp;rsquo;s within the &lt;code&gt;Guitar&lt;/code&gt; class only.&lt;/p&gt;
&lt;p&gt;More generally, maybe your class is collaborating with another class that makes
an API call or performs file I/O. You don&amp;rsquo;t want to have to execute or mock out
those actions in your class&amp;rsquo;s tests - it&amp;rsquo;s the collaborator&amp;rsquo;s tests that should
be concerned with that. You can instead pass in another class that doesn&amp;rsquo;t do
those things, providing speedy and relevant feedback in your tests.&lt;/p&gt;
&lt;h3 id=&#34;complexity-identification&#34;&gt;Complexity Identification &lt;a href=&#34;#complexity-identification&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The responsibility of systems tends to grow over time. This is true not only for
your entire application, but the different components of it, down to the
individual classes or methods. As functionality continues to get added to
classes, you may need to add in more and more collaborators. If each of these
changes are made piecemeal over time, it can be difficult to step back and
realize not only how coupled a class is to other classes, but how &lt;strong&gt;many&lt;/strong&gt;
classes it&amp;rsquo;s coupled to.&lt;/p&gt;
&lt;p&gt;Injecting dependencies explicitly makes it more clear &lt;em&gt;what&lt;/em&gt; this class is
dependent on, and &lt;em&gt;how many&lt;/em&gt; things. As the list of things you need to pass in to
a constructor or a method grows to support new features, it can serve
as a proxy to gauge how complexity within the class or method is growing. This
may exert more natural pressure to identify different abstractions or
refactorings to implement.&lt;/p&gt;
&lt;h2 id=&#34;rock-on&#34;&gt;Rock On &lt;a href=&#34;#rock-on&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ruby&amp;rsquo;s inherent flexibility can make dependency injection a less-likely tool to
reach for, particularly if &lt;a href=&#34;https://dhh.dk/2012/dependency-injection-is-not-a-virtue.html&#34;&gt;testing&lt;/a&gt; is when you would notice that pain initially, given the &lt;a href=&#34;https://www.youtube.com/watch?v=iEfpAp2sqiw&#34;&gt;tools&lt;/a&gt; at our
disposal to make testing interactions with dependencies easier.&lt;/p&gt;
&lt;p&gt;Dependency injection is also a daunting term that often carries the assumption
that you need a heavyweight &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection#Dependency_injection_frameworks&#34;&gt;framework&lt;/a&gt; to implement it. However, if you can pass in an object as an argument to an initializer (constructor) or even an individual method - congratulations, you&amp;rsquo;ve injected a dependency!&lt;/p&gt;
&lt;p&gt;Using dependency injection can lead to less tightly-coupled code, which
allows for more flexibility in collaborating with others, reduces the burden of
testing, and makes it more clear when classes are growing to the point where
their current design needs to be reconsidered.&lt;/p&gt;
&lt;p&gt;The next post in our series explains using &lt;a href=&#34;https://kevin-j-m.github.io/posts/shedding-light-on-duck-typing/&#34;&gt;duck typing&lt;/a&gt; in ruby.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/dependency-injection-plug-in&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>Explain Like I&#39;m Five</title>
       <link>https://kevin-j-m.github.io/posts/explain-like-im-five/</link>
       <pubDate>Wed, 11 Nov 2020 15:38:10 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/explain-like-im-five/</guid>
       <description>&lt;h2 id=&#34;explaining-myself&#34;&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;ing Myself &lt;a href=&#34;#explaining-myself&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Running &lt;code&gt;EXPLAIN&lt;/code&gt; to show the execution plan for different database queries can
help you understand why the performance of a particular database interaction
is the way it is, and how you might be able to improve it. The purpose of this
post is not to interpret and understand the results of an execution plan.
Rather, we&amp;rsquo;ll learn five different ways you can get this information from your
Rails app.&lt;/p&gt;
&lt;p&gt;Some of these examples are PostgreSQL-specific.&lt;/p&gt;
&lt;h2 id=&#34;1-activerecords-explain-method&#34;&gt;1. ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; Method &lt;a href=&#34;#1-activerecords-explain-method&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rails already has the &lt;code&gt;explain&lt;/code&gt; method &lt;a href=&#34;https://apidock.com/rails/ActiveRecord/Relation/explain&#34;&gt;built into&lt;/a&gt; ActiveRecord for you to use.
You can add &lt;code&gt;explain&lt;/code&gt; to any ActiveRecord relation, and you&amp;rsquo;ll receive the
execution plan.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain
&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXPLAIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $1 &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
                      &lt;span style=&#34;color:#66d9ef&#34;&gt;QUERY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PLAN&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;-------------------------------------------------------&lt;/span&gt;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Scan&lt;/span&gt; on users  (cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;340&lt;/span&gt;)
   &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: ((email)&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text)
(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us a great starting point, and works across various databases.
However, if you want some additional features, like &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-explain.html&#34;&gt;running&lt;/a&gt; &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;,
you&amp;rsquo;ll need to look elsewhere.&lt;/p&gt;
&lt;h2 id=&#34;2-interpolating-a-query-in-an-activerecord-connection&#34;&gt;2. Interpolating a Query in an ActiveRecord Connection &lt;a href=&#34;#2-interpolating-a-query-in-an-activerecord-connection&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can fall back to creating your own SQL statement and passing that into
ActiveRecord&amp;rsquo;s &lt;code&gt;execute&lt;/code&gt; method. However, you probably don&amp;rsquo;t want to go through
the error-prone and arduous effort of hand-writing the SQL query you just wrote
using ActiveRecord&amp;rsquo;s syntax.&lt;/p&gt;
&lt;p&gt;Luckily, you don&amp;rsquo;t have to! You can convert your ActiveRecord query to a string with
&lt;code&gt;.to_sql&lt;/code&gt;, and add that into a string you provide to &lt;code&gt;execute&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPLAIN &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This itself isn&amp;rsquo;t much of a win at all over using ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt;
method. It&amp;rsquo;s longer, you&amp;rsquo;ve got to remember to grab the &lt;code&gt;values&lt;/code&gt; from the
&lt;code&gt;execute&lt;/code&gt; results, and the output isn&amp;rsquo;t as nicely formatted. However, because
this is &amp;ldquo;just SQL&amp;rdquo; that you&amp;rsquo;re running in &lt;code&gt;execute&lt;/code&gt;, you can use any features
your database engine of choice provides, like &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXPLAIN ANALYZE &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340) (actual time=0.184..0.233 rows=0 loops=1)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Rows Removed by Filter: 57&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Planning time: 0.185 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Execution time: 0.472 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/mlodato517&#34;&gt;Mark Lodato&lt;/a&gt; for this recommendation.&lt;/p&gt;
&lt;h2 id=&#34;3-the-activerecord-explain-analyze-gem&#34;&gt;3. The activerecord-explain-analyze Gem &lt;a href=&#34;#3-the-activerecord-explain-analyze-gem&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re willing to take on a dependency to get some additional explanatory power,
are using ActiveRecord 4 through 6, and use PostgresSQL, then
you can reach for the &lt;a href=&#34;https://github.com/6/activerecord-explain-analyze&#34;&gt;activerecord-explain-analyze&lt;/a&gt; gem.&lt;/p&gt;
&lt;p&gt;Now you can specify the output formatting of your &lt;code&gt;EXPLAIN&lt;/code&gt; results, and call
&lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain(&lt;span style=&#34;color:#e6db74&#34;&gt;analyze&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXPLAIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $1
&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Scan&lt;/span&gt; on &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;users  (cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;340&lt;/span&gt;) (actual time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; loops&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;Output&lt;/span&gt;: id, email, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, created_at, updated_at, time_zone, first_name, last_name, role, applicant_id, centrify_uuid, display_name, uuid, login_authorized, invite_id, legacy_identifier, disabled_at, invite_sent_at, password_last_changed_at, deprovisioning_reason
  &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: ((users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email)&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;text)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;Rows&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Removed&lt;/span&gt; by &lt;span style=&#34;color:#e6db74&#34;&gt;Filter&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;Buffers&lt;/span&gt;: shared hit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Planning&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;time&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;277&lt;/span&gt; ms
&lt;span style=&#34;color:#66d9ef&#34;&gt;Execution&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;time&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt; ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-the-pg-eyeballs-gem&#34;&gt;4. The pg-eyeballs Gem &lt;a href=&#34;#4-the-pg-eyeballs-gem&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bradurani/pg-eyeballs&#34;&gt;pg-eyeballs&lt;/a&gt; is another gem that&amp;rsquo;s PostgreSQL-specific, and provides additional
functionality that ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; method does not currently.&lt;/p&gt;
&lt;p&gt;Our sought-after &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; is one of many options you can request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eyeballs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explain(&lt;span style=&#34;color:#e6db74&#34;&gt;options&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:analyze&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Seq Scan on users  (cost=0.00..2.71 rows=1 width=340) (actual time=0.028..0.036 rows=0 loops=1)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Filter: ((email)::text = &amp;#39;test@example.com&amp;#39;::text)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Rows Removed by Filter: 57&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Planning time: 0.087 ms&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Execution time: 0.084 ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-terminal-cli-of-your-database&#34;&gt;5. Terminal CLI of Your Database &lt;a href=&#34;#5-terminal-cli-of-your-database&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All of these prior examples have been run from within a Rails process such as the
Rails console. However, we can skip Rails entirely and use our database
directly. In our case with PostgreSQL, we can use &lt;code&gt;psql&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# psql -U postgres&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After connecting, we can list which databases exist with &lt;code&gt;\l&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# \l&lt;/span&gt;
                                              List of databases
                Name                 |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges
-------------------------------------+----------+----------+------------+------------+-----------------------
 example_app_development             | postgres | UTF8     | en_US.utf8 | en_US.utf8 |

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After finding the correct database, we can connect to it with &lt;code&gt;\c&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# \c example_app_development&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then we can run any query we would like, including EXPLAIN:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;example_app_development&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# EXPLAIN SELECT * FROM USERS WHERE EMAIL = &amp;#39;test@example.com&amp;#39;;&lt;/span&gt;
                      QUERY PLAN
-------------------------------------------------------
 Seq Scan on users  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.00..2.71 rows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;340&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   Filter: &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;::text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt;::text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; rows&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, we have all the features available to us that our database engine
supports, so we can use &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; or any other functionality, without
needing it to be built into Rails. This gives us all the power our database
provides, but we lose the expressiveness of ActiveRecord&amp;rsquo;s query API - or
rather, we need to find the &lt;code&gt;.to_sql&lt;/code&gt; representation of the query we&amp;rsquo;re
interested in prior to using this.&lt;/p&gt;
&lt;h2 id=&#34;explaining-which-to-use&#34;&gt;&lt;code&gt;EXPLAIN&lt;/code&gt;ing Which to Use &lt;a href=&#34;#explaining-which-to-use&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re interested in quickly getting an execution plan of an existing
ActiveRecord query, start with using ActiveRecord&amp;rsquo;s &lt;code&gt;explain&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Should you need more functionality that your database engine provides, you can
&lt;code&gt;execute&lt;/code&gt; any query you would like to your database through ActiveRecord.&lt;/p&gt;
&lt;p&gt;If you need that additional functionality, such as &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;, on a
regular basis, consider taking on an additional dependency that&amp;rsquo;ll provide that
for you, such as &lt;code&gt;activerecord-explain-analyze&lt;/code&gt; or &lt;code&gt;pg-eyeballs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t forget you can go directly to your database without using Rails as an
intermediary.&lt;/p&gt;
&lt;p&gt;I hope this has &lt;code&gt;EXPLAIN&lt;/code&gt;ed a thing or two (or five) about ways to gather performance
information for your queries. Once you decide which method is right for you,
good luck optimizing!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/explain-like-im-five&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>Enough Coverage To Beat The Band</title>
       <link>https://kevin-j-m.github.io/posts/coverage/</link>
       <pubDate>Mon, 19 Oct 2020 08:12:10 -0400</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/coverage/</guid>
       <description>&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kevin&amp;rsquo;s slides are available for review on &lt;a href=&#34;https://speakerdeck.com/kevinmurphy/enough-coverage-to-beat-the-band&#34;&gt;SpeakerDeck&lt;/a&gt;. The code examples that accompanied the talk are available on &lt;a href=&#34;https://github.com/kevin-j-m/ruby_cover_band&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;code-coverage-modes&#34;&gt;Code Coverage Modes &lt;a href=&#34;#code-coverage-modes&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each mode answers a different question about the code that was run under coverage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lines - how many times was each line executed?&lt;/li&gt;
&lt;li&gt;Oneshot Lines - which lines were executed?&lt;/li&gt;
&lt;li&gt;Methods - how many times was each method executed?&lt;/li&gt;
&lt;li&gt;Branches - how many times was each conditional executed?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lines&#34;&gt;Lines &lt;a href=&#34;#lines&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;p class=&#34;float-image coverage-emoji&#34;&gt;
🎸
&lt;/p&gt;


&lt;p&gt;This is the “classic” implementation of providing coverage. Each relevant line, that is those that aren’t things like empty lines or “end” statements, has a counter that is incremented each time the line is visited in code execution while coverage is running. At the conclusion, you will see how many times each line is executed.&lt;/p&gt;
&lt;h4 id=&#34;benefits&#34;&gt;Benefits &lt;a href=&#34;#benefits&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This is the default mode for coverage.&lt;/li&gt;
&lt;li&gt;Most of the time, this option will provide you with the information you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;oneshot-lines&#34;&gt;Oneshot Lines &lt;a href=&#34;#oneshot-lines&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;p class=&#34;float-image coverage-emoji&#34;&gt;
🎹
&lt;/p&gt;


&lt;p&gt;Similar to Line Coverage, this also documents that a relevant line was executed while coverage was running. However, it’s a binary report of whether it was executed or not. It will not tell you how often. This may be sufficient in many cases, and comes with the benefit of being more performant every subsequent time a particular line of code is executed under coverage.&lt;/p&gt;
&lt;h4 id=&#34;benefits-1&#34;&gt;Benefits &lt;a href=&#34;#benefits-1&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Oneshot provides you with nothing more than if a line of application code is executed in a test suite.&lt;/li&gt;
&lt;li&gt;As long as being constrained to knowing if something ran or not, and not knowing how often, is sufficient, Oneshot Line Coverage provides the same feedback as Line Coverage with better performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods &lt;a href=&#34;#methods&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;p class=&#34;float-image coverage-emoji&#34;&gt;
💡
&lt;/p&gt;


&lt;p&gt;Method Coverage brings the granularity of Line Coverage up to a coarser grain. Rather than tracking individual lines, it’s concerned with whether a particular method is executed. It can be a 10 line method where the first line is the only line ever executed. Method Coverage will still consider that as executed the same as a 20 line method where each line is executed.&lt;/p&gt;
&lt;h4 id=&#34;benefits-2&#34;&gt;Benefits &lt;a href=&#34;#benefits-2&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This has a targeted focus to be able to answer a more specific question - is this method executed? - with easier to process feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;branches&#34;&gt;Branches &lt;a href=&#34;#branches&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;p class=&#34;float-image coverage-emoji&#34;&gt;
🎤
&lt;/p&gt;


&lt;p&gt;Branch Coverage tracks execution of different conditional paths and documents how often those different paths are run. The unique benefit that this provides over Line Coverage is in conditionals that execute multiple code paths in a single line, such as ternary statements. You may have a part of that conditional that’s never run or tested, but you wouldn’t know that if you’re relying on Line Coverage alone.&lt;/p&gt;
&lt;h4 id=&#34;benefits-3&#34;&gt;Benefits &lt;a href=&#34;#benefits-3&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It provides a different frame of reference than Line Coverage, which ends up being either coarser or more granular than line coverage in different situations.&lt;/li&gt;
&lt;li&gt;For conditionals that lay out multiple code paths on a single line, this provides feedback on their individual execution where Line Coverage only considers whether any part of the line was run.&lt;/li&gt;
&lt;li&gt;When interested in conditionals, and only conditionals, it has less noise than Lines Coverage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gem-support&#34;&gt;Gem Support &lt;a href=&#34;#gem-support&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;d like to leverage existing abstractions on top of ruby&amp;rsquo;s Coverage module
in your current applications, I recommend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/simplecov-ruby/simplecov&#34;&gt;SimpleCov&lt;/a&gt; for test coverage. It
now supports &lt;a href=&#34;https://github.com/simplecov-ruby/simplecov#branch-coverage-ruby--25&#34;&gt;branches&lt;/a&gt; coverage!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/danmayer/coverband&#34;&gt;Coverband&lt;/a&gt; for measuring coverage of
production code. Here&amp;rsquo;s an &lt;a href=&#34;https://github.com/danmayer/coverband/blob/43c5ac94febc7a961346b0e9408d829d4d2ef8ad/test/rails5_dummy/config/coverband.rb#L15&#34;&gt;example&lt;/a&gt; on how to configure it to run using oneshot lines coverage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-gnar-company&#34;&gt;The Gnar Company &lt;a href=&#34;#the-gnar-company&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you’d like to discuss how &lt;a href=&#34;https://www.thegnar.co/about.html&#34;&gt;The Gnar Company&lt;/a&gt; can work with you on your technical challenges, &lt;a href=&#34;https://www.thegnar.co/hire-us.html&#34;&gt;let us know&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;presentation-fonts&#34;&gt;Presentation Fonts &lt;a href=&#34;#presentation-fonts&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main content of all my slides, for code examples and similar text, is Arial Narrow.&lt;/p&gt;
&lt;p&gt;Slide titles and big statement fonts are The Fragile, available from &lt;a href=&#34;https://www.theninhotline.com/features/fonts/&#34;&gt;The NIN Hotline&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Supplemental content, like my twitter handle and text pointing to areas
explaining what coverage output represents are The Wretched, also available from
&lt;a href=&#34;https://www.theninhotline.com/features/fonts/&#34;&gt;The NIN Hotline&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;presentation-photo-credits&#34;&gt;Presentation Photo Credits &lt;a href=&#34;#presentation-photo-credits&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All photos used in the presentation are from the band &lt;a href=&#34;https://www.nin.com/&#34;&gt;Nine Inch Nails&lt;/a&gt;, and released on
their &lt;a href=&#34;https://www.flickr.com/photos/nineinchnails/&#34;&gt;flickr&lt;/a&gt; account with a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/2.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 2.0 Generic&lt;/a&gt; license.&lt;/p&gt;
&lt;p&gt;Below I&amp;rsquo;ve embedded all the images used to link directly to their original
source.&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction &lt;a href=&#34;#introduction&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738980841/&#34; title=&#34;Nine Inch Nails Live @ Lollapalooza - Chicago, IL, 8.03.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2222/2738980841_dbc739b957_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Lollapalooza - Chicago, IL, 8.03.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639150601/&#34; title=&#34;Nine Inch Nails live @ PNC Bank Arts Center, Holmdel, NJ, 6.06.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3606/3639150601_409c17e154_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails live @ PNC Bank Arts Center, Holmdel, NJ, 6.06.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;h3 id=&#34;lines-coverage&#34;&gt;Lines Coverage &lt;a href=&#34;#lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573650628/&#34; title=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2455/3573650628_75ed822d85_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573650014/&#34; title=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3340/3573650014_cf942da814_c.jpg&#34; width=&#34;500&#34; height=&#34;750&#34; alt=&#34;Nine Inch Nails Live @ Shoreline Amphitheatre - Mountain View, CA, 5.22.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722222236&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2841/10722222236_c5e6dd1150_c.jpg&#34; width=&#34;533&#34; height=&#34;800&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639160537/&#34; title=&#34;Nine Inch Nails live @ Bonnaroo Festival in Manchester, TN, 6.13.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3331/3639160537_b3f8ea5158_c.jpg&#34; width=&#34;533&#34; height=&#34;800&#34; alt=&#34;Nine Inch Nails live @ Bonnaroo Festival in Manchester, TN, 6.13.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3572799825/&#34; title=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2432/3572799825_c091e87ff3_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639938714/&#34; title=&#34;Nine Inch Nails live @ Starlight Theatre, Kansas City, MO, 5.27.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3664/3639938714_81c6079524_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails live @ Starlight Theatre, Kansas City, MO, 5.27.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;h3 id=&#34;oneshot-lines-coverage&#34;&gt;Oneshot Lines Coverage &lt;a href=&#34;#oneshot-lines-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639113025/&#34; title=&#34;Nine Inch Nails Live @ Sasquatch Festival in George, WA, on 5.24.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2460/3639113025_dee5235b96_c.jpg&#34; width=&#34;800&#34; height=&#34;534&#34; alt=&#34;Nine Inch Nails Live @ Sasquatch Festival in George, WA, on 5.24.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3032772287/&#34; title=&#34;Nine Inch Nails Live @ Bell Centre - Montreal, QC, 11.12.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3057/3032772287_517c1d7b41_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Bell Centre - Montreal, QC, 11.12.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739834768&#34; title=&#34;Nine Inch Nails Live @ Air Canada Centre - Toronto, ON, 8.05.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3252/2739834768_7d40ed685e_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Air Canada Centre - Toronto, ON, 8.05.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573642602&#34; title=&#34;Nine Inch Nails Live @ Santa Barbara Bowl - Santa Barbara, CA, 5.21.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3606/3573642602_c343bd27b4_c.jpg&#34; width=&#34;800&#34; height=&#34;533&#34; alt=&#34;Nine Inch Nails Live @ Santa Barbara Bowl - Santa Barbara, CA, 5.21.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3212245282&#34; title=&#34;Nine Inch Nails Live @ Razzmatazz - Barcelona, Spain, 2.19.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3463/3212245282_e1fee55ee5_z.jpg&#34; width=&#34;640&#34; height=&#34;480&#34; alt=&#34;Nine Inch Nails Live @ Razzmatazz - Barcelona, Spain, 2.19.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3573605580/&#34; title=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3601/3573605580_2dafcc463c_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live @ Cricket Wireless Amphitheater - Chula Vista, CA, 5.16.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3211397961/&#34; title=&#34;Nine Inch Nails Live @ Olympia - Paris, France, 2.21.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3481/3211397961_2c19e04509_z.jpg&#34; width=&#34;640&#34; height=&#34;480&#34; alt=&#34;Nine Inch Nails Live @ Olympia - Paris, France, 2.21.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2827641506/&#34; title=&#34;Nine Inch Nails Live @ Seagate Convention Center - Toledo, OH, 8.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3148/2827641506_d102315760_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Seagate Convention Center - Toledo, OH, 8.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2768600347/&#34; title=&#34;Nine Inch Nails Live @ Gwinnett Arena - Duluth, GA, 8.13.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3147/2768600347_8a7059bf75_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Gwinnett Arena - Duluth, GA, 8.13.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997174649/&#34; title=&#34;Nine Inch Nails Live @ Arena Santiago - Santiago, Chile, 10.04.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3276/2997174649_c8067aa285_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Arena Santiago - Santiago, Chile, 10.04.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;h3 id=&#34;methods-coverage&#34;&gt;Methods Coverage &lt;a href=&#34;#methods-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722216364&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3723/10722216364_e307c51d3b_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3572822083/&#34; title=&#34;Nine Inch Nails Live @ The Pearl - Las Vegas, NV, 5.18.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3298/3572822083_88b2ccae93_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live @ The Pearl - Las Vegas, NV, 5.18.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722275244/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3694/10722275244_34e8865f69_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722195315/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/7459/10722195315_2e3a458395_z.jpg&#34; width=&#34;640&#34; height=&#34;427&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722461283/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/5539/10722461283_68242773f4_z.jpg&#34; width=&#34;640&#34; height=&#34;424&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/10722293856/&#34; title=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/7387/10722293856_eedc277cda_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails Live: Tension 2013&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738931283/&#34; title=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2353/2738931283_2bcaac316c_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739771096/&#34; title=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2103/2739771096_6fda018740_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Pemberton Festival - Pemberton, BC, 7.25.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2826802685/&#34; title=&#34;Nine Inch Nails Live @ Q Arena - Cleveland, OH, 8.22.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3100/2826802685_f425c65f80_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Q Arena - Cleveland, OH, 8.22.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3202016537/&#34; title=&#34;Nine Inch Nails Live @ Coliseum - Lisbon, Portugal, 2.11.07&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3079/3202016537_6c2dd2e850_z.jpg&#34; width=&#34;480&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails Live @ Coliseum - Lisbon, Portugal, 2.11.07&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738948949/&#34; title=&#34;Nine Inch Nails Live @ Key Arena - Seattle, WA, 7.26.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3223/2738948949_a6e508137f_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ Key Arena - Seattle, WA, 7.26.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;h3 id=&#34;branches-coverage&#34;&gt;Branches Coverage &lt;a href=&#34;#branches-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3032765125/&#34; title=&#34;Nine Inch Nails Live @ DCU Center - Worcester, MA, 11.09.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3044/3032765125_0cea90d73b_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ DCU Center - Worcester, MA, 11.09.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997970466/&#34; title=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3143/2997970466_c27cdaef49_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997970974/&#34; title=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3012/2997970974_2cb4dec9ba_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Soundcheck in Buenos Aires, Argentina - 10.01.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2739752862/&#34; title=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/2307/2739752862_346b683bcb_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2738913701/&#34; title=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3201/2738913701_9b991d6e95_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Soundcheck - Pemberton, BC, 7.24.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/2997202615/&#34; title=&#34;Soundcheck in Mexico City, Mexico - 10.17.08&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3061/2997202615_04151a1234_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Soundcheck in Mexico City, Mexico - 10.17.08&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;




&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3017100564/&#34; title=&#34;Nine Inch Nails Live @ House Of Blues - Atlantic City, New Jersey, 11.06.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3017/3017100564_0a48c0b815_z.jpg&#34; width=&#34;640&#34; height=&#34;426&#34; alt=&#34;Nine Inch Nails Live @ House Of Blues - Atlantic City, New Jersey, 11.06.08 (with surprise guest Peter Murphy)&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;h3 id=&#34;closing&#34;&gt;Closing &lt;a href=&#34;#closing&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;


&lt;a data-flickr-embed=&#34;true&#34; data-header=&#34;true&#34; data-footer=&#34;true&#34; href=&#34;https://www.flickr.com/photos/nineinchnails/3639141695/&#34; title=&#34;Nine Inch Nails live @ DTE Energy Music Theatre, Clarkston, MI, 5.31.09&#34;&gt;&lt;img src=&#34;https://live.staticflickr.com/3360/3639141695_836a8f0745_z.jpg&#34; width=&#34;427&#34; height=&#34;640&#34; alt=&#34;Nine Inch Nails live @ DTE Energy Music Theatre, Clarkston, MI, 5.31.09&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


</description>
     </item>
   
     <item>
       <title>Enough Coverage To Beat The Band at RubyConf</title>
       <link>https://kevin-j-m.github.io/posts/rubyconf-2020/</link>
       <pubDate>Wed, 16 Sep 2020 19:47:00 -0400</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/rubyconf-2020/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be speaking as part of RubyConf 2020, which you can join from
&lt;a href=&#34;http://rubyconf.org/&#34;&gt;wherever&lt;/a&gt; you are. I hope you&amp;rsquo;ll join &lt;a href=&#34;http://rubyconf.org/program/sessions#session-1044&#34;&gt;my session&lt;/a&gt; and many others from Nov
17 - 19, 2020.&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The lights cut out. The crowd roars. It’s time. The band takes the stage. They’ve practiced the songs, particularly the covers. They’ve sound checked the coverage of the speakers. They know the lighting rig has the proper colored gels covering the lamps. They’re nervous, but they’ve got it all covered.&lt;/p&gt;
&lt;p&gt;Similarly, code coverage can give you confidence before your app performs on production and also tell you how live code is used (or not used). We’ll cover how to leverage ruby’s different coverage measurement techniques in concert to assist your crew and delight your audience.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Fake It While You Make It</title>
       <link>https://kevin-j-m.github.io/posts/railsconf-2020/</link>
       <pubDate>Mon, 06 Apr 2020 20:05:03 -0400</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/railsconf-2020/</guid>
       <description>&lt;p&gt;I&amp;rsquo;m honored to be speaking as a part of RailsConf 2020, which you can join from
the comfort of your own &lt;a href=&#34;https://railsconf.com/&#34;&gt;couch&lt;/a&gt;! I hope you&amp;rsquo;ll join &lt;a href=&#34;https://railsconf.com/2020/video/kevin-murphy-fake-it-while-you-make-it&#34;&gt;my session&lt;/a&gt; and many others
when they are released on May 5, 2020.&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We all write code to interface with external systems, like a web service or a message queue. Can you confidently write tests without requiring the system as a dependency? How can you shield users of your code from the inner workings of the interface? Explore one attempt to answer these questions.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no shortage of tools at your disposal to solve these problems. This talk will introduce some available options, provide guidance on when one approach may be more appropriate than another, and discuss how to use these tools together to ease the testing process.&lt;/p&gt;
&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/iEfpAp2sqiw&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/testing-services&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/testing-services#testing-methods&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>Coding for Fun (Not Profit)</title>
       <link>https://kevin-j-m.github.io/posts/coding-for-fun-not-profit/</link>
       <pubDate>Tue, 31 Dec 2019 08:56:04 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/coding-for-fun-not-profit/</guid>
       <description>&lt;p&gt;I originally wanted to call this post &amp;ldquo;Coding for Fun &lt;del&gt;And Profit&lt;/del&gt;&amp;rdquo; with And
Profit in strikethrough, but hugo wouldn&amp;rsquo;t recognize markdown in the title of a
new post, so I gave up immediately and renamed it, which is a perfect
encapsulation of what I&amp;rsquo;m looking to convey here.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background &lt;a href=&#34;#background&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been paid to write code for almost 15 years now. I think I&amp;rsquo;m decent at it,
and I enjoy doing it as a profession, but it&amp;rsquo;s not something I do much of in my
free time. I&amp;rsquo;m not against people having side projects, spending their free
time how they&amp;rsquo;d like and doing whatever energizes them, but I write enough code
during the day at work to satisfy my interests there. I&amp;rsquo;ll never get a job
somewhere that requires an extensive personal portfolio to show as proof of
&amp;ldquo;passion&amp;rdquo;. I&amp;rsquo;m comfortable with that, and privileged enough to be able to say
that.&lt;/p&gt;
&lt;p&gt;Before this, I&amp;rsquo;ve also never had a personal website - ever. Sure, I maintain
various profiles on different social networks, but I&amp;rsquo;ve never had a place of my
own on the internet. I&amp;rsquo;m also probably the only Rails developer who&amp;rsquo;s never
typed &lt;code&gt;git push heroku&lt;/code&gt; in a terminal, but that&amp;rsquo;s a different story.&lt;/p&gt;
&lt;h2 id=&#34;coding-for-work&#34;&gt;Coding For Work &lt;a href=&#34;#coding-for-work&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a pretty methodical person in general, and I take that with me to work. It
comes in handy in this business, but as with everything, it has a cost. It takes
time and effort, but my belief is that the value for my employer or client
outweighs that cost. Some of these items include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requirements vetting&lt;/li&gt;
&lt;li&gt;Alternatives analysis&lt;/li&gt;
&lt;li&gt;Automated testing, whether through TDD or not&lt;/li&gt;
&lt;li&gt;Code review&lt;/li&gt;
&lt;li&gt;Maintenance and upkeep of dependencies&lt;/li&gt;
&lt;li&gt;Clean commit history throughout the project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because the results of my actions affect the overall product, my team members,
and all of my business partners, I&amp;rsquo;m careful and deliberate in the work that I
do.&lt;/p&gt;
&lt;h2 id=&#34;coding-for-me&#34;&gt;Coding For Me &lt;a href=&#34;#coding-for-me&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I decided to stand this site up because I had some content I wanted to maintain,
and I had the blessing of my employer to do so. I needed something quick and
fast that I wouldn&amp;rsquo;t need to put a lot of effort into maintaining.&lt;/p&gt;
&lt;p&gt;I also wanted to try out something new, so knowing I only needed a static site
generator, rather than reaching for my comfortable &lt;a href=&#34;https://middlemanapp.com/&#34;&gt;Middleman&lt;/a&gt;
tool, I instead gave &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt; a try. After all, it is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The world&amp;rsquo;s fastest framework for building websites&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In doing so, I of course ran into some hiccups and problems, but what I&amp;rsquo;ll talk
about here is the process, and how this was different than how I regularly work.&lt;/p&gt;
&lt;h3 id=&#34;what-goes&#34;&gt;What Goes &lt;a href=&#34;#what-goes&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;alternatives--upfront-analysis&#34;&gt;Alternatives &amp;amp; Upfront Analysis &lt;a href=&#34;#alternatives--upfront-analysis&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I went with hugo on name recognition only. I didn&amp;rsquo;t even identify the core
feature set I needed or didn&amp;rsquo;t need; I just dove right in. Similarly, I could have
arduously reviewed the vast number of &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt; in
their gallery to find the perfect one, or customized my own. Instead, I chose
three that seemed &amp;ldquo;fine&amp;rdquo; above the fold, and picked the one that I liked best
after a one minute review.&lt;/p&gt;
&lt;h4 id=&#34;focus&#34;&gt;Focus &lt;a href=&#34;#focus&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When I work from home, I do so from my office, with the door closed. I control
the environment and am particular about what noises or stimuli are present.
However, this is just for me, so instead I sat down on the couch next to my wife
while she was watching something on TV. It&amp;rsquo;s ok if it takes a bit longer, or I&amp;rsquo;m
a bit distracted, as long as I&amp;rsquo;m making that trade for me and me alone.&lt;/p&gt;
&lt;h3 id=&#34;what-stays&#34;&gt;What Stays &lt;a href=&#34;#what-stays&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;verification&#34;&gt;Verification &lt;a href=&#34;#verification&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Testing brings comfort to me and I dislike working without tests. It helps guide
my initial implementation, gives safety for future refactors, and provides
confidence in delivering functionality. And most of the work that I like doing
the most, and as such gravitate towards, rarely has a direct user-facing
component.&lt;/p&gt;
&lt;p&gt;However, that&amp;rsquo;s &lt;strong&gt;all&lt;/strong&gt; that this site is. I don&amp;rsquo;t want to spend time futzing
with configurations that I don&amp;rsquo;t need to, or meddling with the theme to eek out
performance improvements, or evaluating updating, changing, or removing
dependencies. But I still need to make sure it works. I spent a ton more time in
the browser than I typically do developing for work, but it&amp;rsquo;s the same process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify a thin slice of functionality&lt;/li&gt;
&lt;li&gt;Focus on implementing it&lt;/li&gt;
&lt;li&gt;Document other observations for future work&lt;/li&gt;
&lt;li&gt;Iterate to the next thin slice&lt;/li&gt;
&lt;li&gt;Deliver&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The mechanism by which I worked that process changed (refreshing the browser vs.
running a test), but the process itself stayed the same.&lt;/p&gt;
&lt;h4 id=&#34;documentation&#34;&gt;Documentation &lt;a href=&#34;#documentation&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Sure, my commit messages are definitely not to the degree that I would expect,
hope, or want them to be. However, that doesn&amp;rsquo;t mean that they&amp;rsquo;re worthless.
Particularly on these projects where I&amp;rsquo;m moving fast, their value is more as
&amp;ldquo;save points&amp;rdquo; than documentation (and I&amp;rsquo;m not cleaning them up prior to moving
them into a mainline branch), but they can still provide valuable information on
&lt;em&gt;why&lt;/em&gt; a change was made.&lt;/p&gt;
&lt;p&gt;Additionally, particularly because this is a project that I&amp;rsquo;m likely to be
revisiting infrequently, I made sure to take the time to add a README that
includes quick examples of all the things I&amp;rsquo;m going to want to do. For this
project, that includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating a new post.&lt;/li&gt;
&lt;li&gt;Running the server locally.&lt;/li&gt;
&lt;li&gt;Deploying the changes (which there&amp;rsquo;s a script for).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Because&lt;/em&gt; it&amp;rsquo;s something I won&amp;rsquo;t touch day-to-day, it&amp;rsquo;s even &lt;strong&gt;more&lt;/strong&gt; important
to take the few minutes to document those quick commands to save myself the time
of needing to search for it every time that I want to edit this.&lt;/p&gt;
&lt;h3 id=&#34;what-emerges&#34;&gt;What Emerges &lt;a href=&#34;#what-emerges&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;quick-assessment-of-good-enough&#34;&gt;Quick Assessment of &amp;ldquo;Good Enough&amp;rdquo; &lt;a href=&#34;#quick-assessment-of-good-enough&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There&amp;rsquo;s always an ideal version of what you&amp;rsquo;re looking to accomplish. That
likely manifests itself both in the code itself, as well as the user-facing
product. And we all want to hit that ideal; however, it&amp;rsquo;s not always feasible.
And while I work diligently to reach that at work, I also do my best to be
pragmatic about at least explaining the implications of getting to that ideal,
presenting that to the decision-makers, and working with them to come to an
agreement on how to proceed.&lt;/p&gt;
&lt;p&gt;However, in this example, my goal was speed and speed alone. For example, I had
a post to add which had some images that I wanted formatted just so. I couldn&amp;rsquo;t
figure out exactly how to position or size them to my liking. I think from
searching for about 30 minutes I could have gotten there by having the images as
&lt;a href=&#34;https://gohugo.io/content-management/page-resources/&#34;&gt;page resources&lt;/a&gt;, then using
hugo&amp;rsquo;s &lt;a href=&#34;https://gohugo.io/content-management/image-processing/&#34;&gt;image processing&lt;/a&gt;,
and having those available in a &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;shortcode&lt;/a&gt;
that I reference in my post.&lt;/p&gt;
&lt;p&gt;I could have done that, but instead - I deleted the images. They weren&amp;rsquo;t
tremendously important to the post. They certainly made things look nicer, but
they didn&amp;rsquo;t provide any explanatory value. So I removed them, and freed myself
of the problem. And the page doesn&amp;rsquo;t look exactly how I wanted it to, but it&amp;rsquo;s
done. And if I feel the need to scratch that itch in the future, I know where to
start.&lt;/p&gt;
&lt;p&gt;Remember the context under which you&amp;rsquo;re developing, who the decision-makers are,
and what choices you should make based on that. But work to know what you
&lt;strong&gt;aren&amp;rsquo;t&lt;/strong&gt; willing to give up in your process, regardless of the context.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Diffin&#39; Dots</title>
       <link>https://kevin-j-m.github.io/posts/diffin-dots/</link>
       <pubDate>Mon, 30 Dec 2019 21:04:53 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/diffin-dots/</guid>
       <description>&lt;h2 id=&#34;a-sweet-surprise&#34;&gt;A Sweet Surprise &lt;a href=&#34;#a-sweet-surprise&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recently, a project needed to re-order some commits on a git branch. We
initially performed this interactive rebase on a separate branch, so we didn&amp;rsquo;t
make a mistake on the original branch. After performing that rebase, we then
used Github&amp;rsquo;s &lt;a href=&#34;https://help.github.com/en/github/committing-changes-to-your-project/comparing-commits-across-time#comparing-branches&#34;&gt;compare view&lt;/a&gt;, expecting to see no files changed.&lt;/p&gt;
&lt;p&gt;Instead, what we saw was every change that was introduced in all of the commits
that were reordered on the new branch. This very much surprised us. We made no
functional changes and were expecting to use this comparison as proof that we
didn&amp;rsquo;t accidentally drop a commit or do something terrible on accident.&lt;/p&gt;
&lt;p&gt;We then looked to compare the branches locally. When we did that, we saw no
diff.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;⇒ diff-test|reorder git diff master

&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Did we find a bug in Github? Did our re-ordering work? At this point, we had no
idea.&lt;/p&gt;
&lt;h2 id=&#34;read-the-recipe&#34;&gt;Read The Recipe &lt;a href=&#34;#read-the-recipe&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We dug into the documentation for &lt;code&gt;diff&lt;/code&gt;, a tool I use frequently,
but don&amp;rsquo;t spend much time considering how it works.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s read some of the help on how to use the diff tool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;⇒ git diff --help
GIT-DIFF&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                                      Git Manual                                      GIT-DIFF&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
...
       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
           This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;.
           You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip
           of a different branch.

       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
           This is to view the changes between two arbitrary &amp;lt;commit&amp;gt;.

       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
           This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the
           same effect as using HEAD instead.

       git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;...&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
           This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting
           at a common ancestor of both &amp;lt;commit&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Almost exclusively I&amp;rsquo;ve used diff in the form of &lt;code&gt;git diff other-ref&lt;/code&gt;. And
with that, I would see what, if any, file changes occurred between those two
branches or commits. This is the two-dot comparison. However, Github uses the
&lt;a href=&#34;https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-comparing-branches-in-pull-requests#three-dot-and-two-dot-git-diff-comparisons&#34;&gt;three-dot comparison&lt;/a&gt;
by default.&lt;/p&gt;
&lt;p&gt;In this scenario, the common ancestor is the latest commit on the reordering
branch that wasn&amp;rsquo;t reordered. After the rebase, all of those reordered commits
have different SHAs, so are seen as different commits. As such, using the
three-dot option, git considers all of those SHAs as different or new, so all of
them show as changes, even though there are no differences in the file contents
themselves.&lt;/p&gt;
&lt;h2 id=&#34;homemade-flavor&#34;&gt;Homemade Flavor &lt;a href=&#34;#homemade-flavor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at demonstrating this behavior entirely locally.&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup &lt;a href=&#34;#setup&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First, let&amp;rsquo;s create a new repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;⇒ mkdir diff-test
⇒ cd diff-test
diff-test|⇒ git init .
Initialized empty Git repository
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll start by adding a few new files, and making the first commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creamy Vanilla Ice Cream done Dippin’ Dots style&amp;#34;&lt;/span&gt; &amp;gt; vanilla.txt
diff-test|master⚡ ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Creamy Milk Chocolate Ice Cream.  Someone pass the spoon&amp;#34;&lt;/span&gt; &amp;gt; chocolate.txt
diff-test|master⚡ ⇒ git add --all
diff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IFO: initial flavor offering&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will then add two more commits with some additional changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dippin&amp;#39; Dots Strawberry Ice Cream is as sweet as a summer&amp;#39;s day and so berry, berry good&amp;#34;&lt;/span&gt; &amp;gt; strawberry.txt
diff-test|master⚡ ⇒ git add --all
diff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introducing strawberry&amp;#34;&lt;/span&gt;

diff-test|master ⇒ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Orange Flavored Ice&amp;#34;&lt;/span&gt; &amp;gt; orange.txt
diff-test|master⚡ ⇒ git add --all
diff-test|master⚡ ⇒ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introducing orange&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;introduce-a-change&#34;&gt;Introduce a change &lt;a href=&#34;#introduce-a-change&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At this point, we realize that it&amp;rsquo;s important to us that orange be introduced in
our history before strawberry.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a new branch to address this, and look at the current order of the
commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|master ⇒ git checkout -b reorder
Switched to a new branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reorder&amp;#39;&lt;/span&gt;
diff-test|reorder ⇒ git log --oneline

e378256 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; reorder, master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Introducing orange
f455e5b Introducing strawberry
e42566b IFO: initial flavor offering
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will then perform an interactive rebase, going back two commits in history.
During that rebase, we will switch the order of orange and strawberry, so orange
is first, as we need it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git rebase -i HEAD~2

pick e378256 Introducing orange
pick f455e5b Introducing strawberry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After performing the rebase, here is the order of our commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git log --oneline

5fa36f4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; reorder&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Introducing strawberry
7a1d500 Introducing orange
e42566b IFO: initial flavor offering
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Congratulations! We&amp;rsquo;ve done what we set out to do, performing a rebase to
reorder our commits. Now let&amp;rsquo;s compare that to our original branch to make sure
everything looks to be as we&amp;rsquo;d expect.&lt;/p&gt;
&lt;h3 id=&#34;differences&#34;&gt;&lt;code&gt;diff&lt;/code&gt;erences &lt;a href=&#34;#differences&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We start by comparing this branch to the original branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git diff master

&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see that there&amp;rsquo;s no difference, which we&amp;rsquo;re expecting and hoping for. No
files changed, no functionality is different; only the history has changed.&lt;/p&gt;
&lt;p&gt;If we diff using the two-dot version, we see the same result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git diff master..reorder

&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That sounds right, because according to the documentation, the two-dot usage is
the same as not providing dots:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; git diff &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;commit&amp;gt;..&amp;lt;commit&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;path&amp;gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
          This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the
          same effect as using HEAD instead.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly, let&amp;rsquo;s perform a three-dot diff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;diff-test|reorder ⇒ git diff master...reorder

diff --git a/orange.txt b/orange.txt
new file mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;
index 0000000..09d8732
--- /dev/null
+++ b/orange.txt
@@ -0,0 +1 @@
+Orange Flavored Ice
diff --git a/strawberry.txt b/strawberry.txt
new file mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;
index 0000000..6ab358d
--- /dev/null
+++ b/strawberry.txt
@@ -0,0 +1 @@
+Dippin&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; Dots Strawberry Ice Cream is as sweet as a summer&amp;#39;&lt;/span&gt;s day and so berry, berry good
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;END&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is where we see that it looks like each of those files have been changed as
a result of this rebase. However, the files themselves &lt;strong&gt;haven&amp;rsquo;t&lt;/strong&gt; changed. What
has is the commits themselves. Their common ancestor is the initial commit of
the repository, so everything that happened since then shows as a difference.&lt;/p&gt;
&lt;h2 id=&#34;the-cherry-on-top&#34;&gt;The Cherry On Top &lt;a href=&#34;#the-cherry-on-top&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Locally, unless you tell git otherwise, &lt;code&gt;diff&lt;/code&gt; will show you the file change
differences between your comparisons. Github by default will show you the
changes from the common ancestor between what&amp;rsquo;s changed.&lt;/p&gt;
&lt;p&gt;Most of the time, this different behavior won&amp;rsquo;t or shouldn&amp;rsquo;t matter in the
course of your workflow. However, if you&amp;rsquo;re doing something a bit more
adventurous, or perhaps ill-advised, knowing how git will, by default, compare
changes locally and how Github, by default, will surface those changes can be
paramount.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href=&#34;https://blog.thegnar.co/diffin-dots&#34;&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>Don’t Hang Me Out To DRY</title>
       <link>https://kevin-j-m.github.io/posts/rubyconf-2019/</link>
       <pubDate>Mon, 30 Dec 2019 20:57:49 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/rubyconf-2019/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Close your eyes and imagine the perfect codebase to work on. I bet you’ll say it has complete test coverage. It’s fully-optimized, both in terms of performance and architectural design. And, of course, it contains only DRY code. Surely we can all agree that this is an aspirational situation. But&amp;hellip;do we &lt;strong&gt;really&lt;/strong&gt; want that?&lt;/p&gt;
&lt;p&gt;Don’t get me wrong; these qualities are all beneficial. However, if we also think we should value everything in moderation, when should we push back on these ideals? What problems can they introduce? Let’s talk about the exceptions to some of the “rules” we all hold dear.&lt;/p&gt;
&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=b960MApGA7A&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/dont-hang-me-out-to-dry&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ivory-tower&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/ivory-tower#code-examples&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;common-guiding-principles&#34;&gt;Common Guiding Principles &lt;a href=&#34;#common-guiding-principles&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Full test coverage, DRY code, and optimized code are all incredibly valuable, and we, as craftspeople, are better off for having them overall. But when should we push back on these ideals? What problems can they introduce?&lt;/p&gt;
&lt;h3 id=&#34;code-coverage&#34;&gt;Code Coverage &lt;a href=&#34;#code-coverage&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code coverage provides a valuable signal about the extent to which some code is tested, but it is not sufficient for a quality metric. 100% test coverage does not mean all code paths are fully exercised, just that all lines are hit at least once in the execution of the test suite. An application with 100% test coverage can still have bugs and can still have sections of code that don&amp;rsquo;t have all scenarios tested. Additionally, testing every line of code has a cost that is felt initially in the time to conceive of the tests and the test strategy. However, the larger costs are felt over time if it leads to a long test suite run time, flakey or inconsistent tests, and a large suite that needs to be continually maintained as both the technologies and requirements of the application change.&lt;/p&gt;
&lt;h3 id=&#34;dry-code&#34;&gt;DRY Code &lt;a href=&#34;#dry-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;DRY code helps to ensure you don&amp;rsquo;t have to make a change in multiple places when the way the system should work changes; instead, everything is in the isolated abstraction. However, not repeating yourself can lead to premature optimizations or abstractions that end up saddling the codebase with a difficult-to-change architecture when it’s discovered that use cases aren’t as similar as initially thought. Certainly reach for design patterns and well-known architectural principles when the opportunity presents itself. But, consider how one might back out of such an introduction should it turn out that the choice was premature - or hold off on introducing it entirely until it’s more clear or there’s sufficient churn in that area of the codebase to warrant the attention.&lt;/p&gt;
&lt;h3 id=&#34;performant-code&#34;&gt;Performant Code &lt;a href=&#34;#performant-code&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Performant code is objectively better than non-performant code, right? As always, the answer is, &amp;ldquo;maybe.&amp;rdquo; Code that is preemptively performance-tuned may or may not be necessary or accurate. Without the data and benchmarking, under load, to illustrate the performance impact, any improvements made in service of performance are done so based on conjecture. This could lead to unnecessary time in developing the believed performance benefit or may even introduce subtle bugs.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>I Know I Can, But Should I?</title>
       <link>https://kevin-j-m.github.io/posts/railsconf-2019/</link>
       <pubDate>Mon, 30 Dec 2019 17:40:50 -0500</pubDate>
       
       <guid>https://kevin-j-m.github.io/posts/railsconf-2019/</guid>
       <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract &lt;a href=&#34;#abstract&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You &lt;strong&gt;can&lt;/strong&gt; use a hammer to drive a screw into wood, but I’d recommend a screwdriver. Why? And when is a hammer the better option? This talk will propose a framework to use when comparing alternative technical choices. I won’t decide for you, but will leave you with a structure to apply in your decision-making process.&lt;/p&gt;
&lt;p&gt;The ruby toolbox is vast. While Rails provides a default experience, it leaves plenty of room for alternatives. In learning how to do something, you may uncover different ways to accomplish the same goal. Determine which tool fits best in your situation with these lessons.&lt;/p&gt;
&lt;h2 id=&#34;presentation-resources&#34;&gt;Presentation Resources &lt;a href=&#34;#presentation-resources&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2NiePLJVjNI&amp;amp;feature=youtu.be&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/kevinmurphy/i-know-i-can-but-should-i-evaluating-alternatives&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/evaluating-alternatives&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevin-j-m/evaluating-alternatives#code-examples&#34;&gt;Code Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;evaluating-gnarly-alternatives&#34;&gt;Evaluating Gnarly Alternatives &lt;a href=&#34;#evaluating-gnarly-alternatives&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At &lt;a href=&#34;https://www.thegnar.co/&#34;&gt;The Gnar Company&lt;/a&gt;, learning about our client’s needs and providing solutions is one of the most satisfying parts of our work. Rails is a great and well-worn tool in our toolbox, but we work with you to understand your needs before ascribing a particular technology or framework. Our team works hard to make it easy to work with us.&lt;/p&gt;
&lt;h3 id=&#34;impact&#34;&gt;Impact &lt;a href=&#34;#impact&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Building a customer portal with &lt;a href=&#34;https://www.thegnar.co/work/dispatch.html&#34;&gt;Dispatch&lt;/a&gt; required a keen eye on the &lt;strong&gt;impact&lt;/strong&gt; of our decisions. Working with the team we’d be handing the project off to, we ensured that any conventions we introduced met their expectations. Additionally, we needed to maintain a focus on non-functional requirements to provide fast response times and real-time communication with their customers.&lt;/p&gt;
&lt;h3 id=&#34;cost&#34;&gt;Cost &lt;a href=&#34;#cost&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Cost&lt;/strong&gt; can be more than dollars and cents. Evaluating when to develop functionality yourself or utilize existing solutions is critical. When we worked to bring &lt;a href=&#34;https://www.thegnar.co/work/valor-performance.html&#34;&gt;Valor Performance&lt;/a&gt;’s product to market, we focused on delivering a custom experience for coaching sales professionals while relying on third-party services to complement the product with scheduling, communication, and authorization functionality. As our involvement on the project wound down, we helped interview and onboard their internal team. Investing in the long-term success of our clients, even beyond our involvement, is built into our process.&lt;/p&gt;
&lt;h3 id=&#34;maintenance&#34;&gt;Maintenance &lt;a href=&#34;#maintenance&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We don’t limit our focus to the scope of our initial engagement; we make sure to account for any &lt;strong&gt;maintenance&lt;/strong&gt; activities that’ll need consideration throughout the life of your product. After delivering a foundational product for &lt;a href=&#34;https://www.thegnar.co/work/qeepsake.html&#34;&gt;Qeepsake&lt;/a&gt;, we continued to provide assistance and iterate on product features and application performance as adoption took off. While initially developing the product, we made sure to leverage best-in-breed solutions in billing and messaging to quickly provide core functionality that will continue to scale as their business grows.&lt;/p&gt;
&lt;h3 id=&#34;consistency&#34;&gt;Consistency &lt;a href=&#34;#consistency&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While working with a large existing development team at &lt;a href=&#34;https://www.thegnar.co/work/level-up.html&#34;&gt;LevelUp&lt;/a&gt;, it was critical to consider &lt;strong&gt;consistency&lt;/strong&gt;. We ensured we were delivering code that adhered to the team’s existing standards to provide a seamless hand-off that they were comfortable supporting. While we introduced our approach and experience to solving similar problems in different contexts, it was all done in a way that aligned with the larger team’s process.&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
